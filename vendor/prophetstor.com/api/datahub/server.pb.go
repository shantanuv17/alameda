// This file has messages and services related to Federator.ai

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: prophetstor/api/datahub/server.proto

package datahub

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	applications "prophetstor.com/api/datahub/applications"
	data "prophetstor.com/api/datahub/data"
	events "prophetstor.com/api/datahub/events"
	gpu "prophetstor.com/api/datahub/gpu"
	keycodes "prophetstor.com/api/datahub/keycodes"
	licenses "prophetstor.com/api/datahub/licenses"
	metrics "prophetstor.com/api/datahub/metrics"
	plannings "prophetstor.com/api/datahub/plannings"
	predictions "prophetstor.com/api/datahub/predictions"
	rawdata "prophetstor.com/api/datahub/rawdata"
	recommendations "prophetstor.com/api/datahub/recommendations"
	resources "prophetstor.com/api/datahub/resources"
	schemas "prophetstor.com/api/datahub/schemas"
	scores "prophetstor.com/api/datahub/scores"
	weavescope "prophetstor.com/api/datahub/weavescope"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_prophetstor_api_datahub_server_proto protoreflect.FileDescriptor

var file_prophetstor_api_datahub_server_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x1a,
	0x33, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x67, 0x70, 0x75, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x32, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x61,
	0x77, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xda, 0x6e, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73, 0x12, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x8b,
	0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x3d, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73, 0x12, 0x3f, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x70, 0x75, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x70,
	0x75, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x70, 0x75, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x70, 0x75, 0x73, 0x12,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x70, 0x75, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x70, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x70, 0x75, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x70, 0x75, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x67,
	0x70, 0x75, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x70, 0x75, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x70, 0x75,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x70, 0x75, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x70, 0x75, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x70, 0x75,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6b, 0x65,
	0x79, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4b,
	0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6b, 0x65, 0x79, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6b, 0x65, 0x79,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x12, 0x78, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6b,
	0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x18, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x35,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x38, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x70, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3f, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x72, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x37,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x78, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x44, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x84, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x6e,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7c,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaf, 0x01, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a,
	0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x61, 0x77, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0c, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x86, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xab, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb4,
	0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc0, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc3, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbd,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xb7, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x64, 0x73, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0xae,
	0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8f, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x57, 0x65, 0x61,
	0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x94, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x12,
	0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77,
	0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65,
	0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65,
	0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x22, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa0, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77, 0x65,
	0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61,
	0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x57, 0x65,
	0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x76, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x77,
	0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65,
	0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x57,
	0x65, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_prophetstor_api_datahub_server_proto_goTypes = []interface{}{
	(*applications.CreateApplicationsRequest)(nil),                  // 0: prophetstor.api.datahub.applications.CreateApplicationsRequest
	(*applications.ListApplicationsRequest)(nil),                    // 1: prophetstor.api.datahub.applications.ListApplicationsRequest
	(*applications.DeleteApplicationsRequest)(nil),                  // 2: prophetstor.api.datahub.applications.DeleteApplicationsRequest
	(*data.ReadDataRequest)(nil),                                    // 3: prophetstor.api.datahub.data.ReadDataRequest
	(*data.WriteDataRequest)(nil),                                   // 4: prophetstor.api.datahub.data.WriteDataRequest
	(*data.DeleteDataRequest)(nil),                                  // 5: prophetstor.api.datahub.data.DeleteDataRequest
	(*data.WriteMetaRequest)(nil),                                   // 6: prophetstor.api.datahub.data.WriteMetaRequest
	(*events.CreateEventsRequest)(nil),                              // 7: prophetstor.api.datahub.events.CreateEventsRequest
	(*events.ListEventsRequest)(nil),                                // 8: prophetstor.api.datahub.events.ListEventsRequest
	(*gpu.CreateGpuPredictionsRequest)(nil),                         // 9: prophetstor.api.datahub.gpu.CreateGpuPredictionsRequest
	(*gpu.ListGpusRequest)(nil),                                     // 10: prophetstor.api.datahub.gpu.ListGpusRequest
	(*gpu.ListGpuMetricsRequest)(nil),                               // 11: prophetstor.api.datahub.gpu.ListGpuMetricsRequest
	(*gpu.ListGpuPredictionsRequest)(nil),                           // 12: prophetstor.api.datahub.gpu.ListGpuPredictionsRequest
	(*keycodes.AddKeycodeRequest)(nil),                              // 13: prophetstor.api.datahub.keycodes.AddKeycodeRequest
	(*keycodes.ListKeycodesRequest)(nil),                            // 14: prophetstor.api.datahub.keycodes.ListKeycodesRequest
	(*keycodes.DeleteKeycodeRequest)(nil),                           // 15: prophetstor.api.datahub.keycodes.DeleteKeycodeRequest
	(*empty.Empty)(nil),                                             // 16: google.protobuf.Empty
	(*keycodes.ActivateRegistrationDataRequest)(nil),                // 17: prophetstor.api.datahub.keycodes.ActivateRegistrationDataRequest
	(*metrics.CreateMetricsRequest)(nil),                            // 18: prophetstor.api.datahub.metrics.CreateMetricsRequest
	(*metrics.CreatePodMetricsRequest)(nil),                         // 19: prophetstor.api.datahub.metrics.CreatePodMetricsRequest
	(*metrics.CreateControllerMetricsRequest)(nil),                  // 20: prophetstor.api.datahub.metrics.CreateControllerMetricsRequest
	(*metrics.CreateApplicationMetricsRequest)(nil),                 // 21: prophetstor.api.datahub.metrics.CreateApplicationMetricsRequest
	(*metrics.CreateNamespaceMetricsRequest)(nil),                   // 22: prophetstor.api.datahub.metrics.CreateNamespaceMetricsRequest
	(*metrics.CreateNodeMetricsRequest)(nil),                        // 23: prophetstor.api.datahub.metrics.CreateNodeMetricsRequest
	(*metrics.CreateClusterMetricsRequest)(nil),                     // 24: prophetstor.api.datahub.metrics.CreateClusterMetricsRequest
	(*metrics.ListMetricsRequest)(nil),                              // 25: prophetstor.api.datahub.metrics.ListMetricsRequest
	(*metrics.ListPodMetricsRequest)(nil),                           // 26: prophetstor.api.datahub.metrics.ListPodMetricsRequest
	(*metrics.ListControllerMetricsRequest)(nil),                    // 27: prophetstor.api.datahub.metrics.ListControllerMetricsRequest
	(*metrics.ListApplicationMetricsRequest)(nil),                   // 28: prophetstor.api.datahub.metrics.ListApplicationMetricsRequest
	(*metrics.ListNamespaceMetricsRequest)(nil),                     // 29: prophetstor.api.datahub.metrics.ListNamespaceMetricsRequest
	(*metrics.ListNodeMetricsRequest)(nil),                          // 30: prophetstor.api.datahub.metrics.ListNodeMetricsRequest
	(*metrics.ListClusterMetricsRequest)(nil),                       // 31: prophetstor.api.datahub.metrics.ListClusterMetricsRequest
	(*plannings.CreatePlanningsRequest)(nil),                        // 32: prophetstor.api.datahub.plannings.CreatePlanningsRequest
	(*plannings.CreatePodPlanningsRequest)(nil),                     // 33: prophetstor.api.datahub.plannings.CreatePodPlanningsRequest
	(*plannings.CreateControllerPlanningsRequest)(nil),              // 34: prophetstor.api.datahub.plannings.CreateControllerPlanningsRequest
	(*plannings.CreateApplicationPlanningsRequest)(nil),             // 35: prophetstor.api.datahub.plannings.CreateApplicationPlanningsRequest
	(*plannings.CreateNamespacePlanningsRequest)(nil),               // 36: prophetstor.api.datahub.plannings.CreateNamespacePlanningsRequest
	(*plannings.CreateNodePlanningsRequest)(nil),                    // 37: prophetstor.api.datahub.plannings.CreateNodePlanningsRequest
	(*plannings.CreateClusterPlanningsRequest)(nil),                 // 38: prophetstor.api.datahub.plannings.CreateClusterPlanningsRequest
	(*plannings.ListPlanningsRequest)(nil),                          // 39: prophetstor.api.datahub.plannings.ListPlanningsRequest
	(*plannings.ListPodPlanningsRequest)(nil),                       // 40: prophetstor.api.datahub.plannings.ListPodPlanningsRequest
	(*plannings.ListControllerPlanningsRequest)(nil),                // 41: prophetstor.api.datahub.plannings.ListControllerPlanningsRequest
	(*plannings.ListApplicationPlanningsRequest)(nil),               // 42: prophetstor.api.datahub.plannings.ListApplicationPlanningsRequest
	(*plannings.ListNamespacePlanningsRequest)(nil),                 // 43: prophetstor.api.datahub.plannings.ListNamespacePlanningsRequest
	(*plannings.ListNodePlanningsRequest)(nil),                      // 44: prophetstor.api.datahub.plannings.ListNodePlanningsRequest
	(*plannings.ListClusterPlanningsRequest)(nil),                   // 45: prophetstor.api.datahub.plannings.ListClusterPlanningsRequest
	(*predictions.CreatePredictionsRequest)(nil),                    // 46: prophetstor.api.datahub.predictions.CreatePredictionsRequest
	(*predictions.CreatePodPredictionsRequest)(nil),                 // 47: prophetstor.api.datahub.predictions.CreatePodPredictionsRequest
	(*predictions.CreateControllerPredictionsRequest)(nil),          // 48: prophetstor.api.datahub.predictions.CreateControllerPredictionsRequest
	(*predictions.CreateApplicationPredictionsRequest)(nil),         // 49: prophetstor.api.datahub.predictions.CreateApplicationPredictionsRequest
	(*predictions.CreateNamespacePredictionsRequest)(nil),           // 50: prophetstor.api.datahub.predictions.CreateNamespacePredictionsRequest
	(*predictions.CreateNodePredictionsRequest)(nil),                // 51: prophetstor.api.datahub.predictions.CreateNodePredictionsRequest
	(*predictions.CreateClusterPredictionsRequest)(nil),             // 52: prophetstor.api.datahub.predictions.CreateClusterPredictionsRequest
	(*predictions.ListPredictionsRequest)(nil),                      // 53: prophetstor.api.datahub.predictions.ListPredictionsRequest
	(*predictions.ListPodPredictionsRequest)(nil),                   // 54: prophetstor.api.datahub.predictions.ListPodPredictionsRequest
	(*predictions.ListControllerPredictionsRequest)(nil),            // 55: prophetstor.api.datahub.predictions.ListControllerPredictionsRequest
	(*predictions.ListApplicationPredictionsRequest)(nil),           // 56: prophetstor.api.datahub.predictions.ListApplicationPredictionsRequest
	(*predictions.ListNamespacePredictionsRequest)(nil),             // 57: prophetstor.api.datahub.predictions.ListNamespacePredictionsRequest
	(*predictions.ListNodePredictionsRequest)(nil),                  // 58: prophetstor.api.datahub.predictions.ListNodePredictionsRequest
	(*predictions.ListClusterPredictionsRequest)(nil),               // 59: prophetstor.api.datahub.predictions.ListClusterPredictionsRequest
	(*rawdata.ReadRawdataRequest)(nil),                              // 60: prophetstor.api.datahub.rawdata.ReadRawdataRequest
	(*rawdata.WriteRawdataRequest)(nil),                             // 61: prophetstor.api.datahub.rawdata.WriteRawdataRequest
	(*recommendations.CreateRecommendationsRequest)(nil),            // 62: prophetstor.api.datahub.recommendations.CreateRecommendationsRequest
	(*recommendations.CreatePodRecommendationsRequest)(nil),         // 63: prophetstor.api.datahub.recommendations.CreatePodRecommendationsRequest
	(*recommendations.CreateControllerRecommendationsRequest)(nil),  // 64: prophetstor.api.datahub.recommendations.CreateControllerRecommendationsRequest
	(*recommendations.CreateApplicationRecommendationsRequest)(nil), // 65: prophetstor.api.datahub.recommendations.CreateApplicationRecommendationsRequest
	(*recommendations.CreateNamespaceRecommendationsRequest)(nil),   // 66: prophetstor.api.datahub.recommendations.CreateNamespaceRecommendationsRequest
	(*recommendations.CreateNodeRecommendationsRequest)(nil),        // 67: prophetstor.api.datahub.recommendations.CreateNodeRecommendationsRequest
	(*recommendations.CreateClusterRecommendationsRequest)(nil),     // 68: prophetstor.api.datahub.recommendations.CreateClusterRecommendationsRequest
	(*recommendations.ListRecommendationsRequest)(nil),              // 69: prophetstor.api.datahub.recommendations.ListRecommendationsRequest
	(*recommendations.ListPodRecommendationsRequest)(nil),           // 70: prophetstor.api.datahub.recommendations.ListPodRecommendationsRequest
	(*recommendations.ListControllerRecommendationsRequest)(nil),    // 71: prophetstor.api.datahub.recommendations.ListControllerRecommendationsRequest
	(*recommendations.ListApplicationRecommendationsRequest)(nil),   // 72: prophetstor.api.datahub.recommendations.ListApplicationRecommendationsRequest
	(*recommendations.ListNamespaceRecommendationsRequest)(nil),     // 73: prophetstor.api.datahub.recommendations.ListNamespaceRecommendationsRequest
	(*recommendations.ListNodeRecommendationsRequest)(nil),          // 74: prophetstor.api.datahub.recommendations.ListNodeRecommendationsRequest
	(*recommendations.ListClusterRecommendationsRequest)(nil),       // 75: prophetstor.api.datahub.recommendations.ListClusterRecommendationsRequest
	(*resources.CreatePodsRequest)(nil),                             // 76: prophetstor.api.datahub.resources.CreatePodsRequest
	(*resources.CreateControllersRequest)(nil),                      // 77: prophetstor.api.datahub.resources.CreateControllersRequest
	(*resources.CreateApplicationsRequest)(nil),                     // 78: prophetstor.api.datahub.resources.CreateApplicationsRequest
	(*resources.CreateNamespacesRequest)(nil),                       // 79: prophetstor.api.datahub.resources.CreateNamespacesRequest
	(*resources.CreateNodesRequest)(nil),                            // 80: prophetstor.api.datahub.resources.CreateNodesRequest
	(*resources.CreateClustersRequest)(nil),                         // 81: prophetstor.api.datahub.resources.CreateClustersRequest
	(*resources.ListPodsRequest)(nil),                               // 82: prophetstor.api.datahub.resources.ListPodsRequest
	(*resources.ListControllersRequest)(nil),                        // 83: prophetstor.api.datahub.resources.ListControllersRequest
	(*resources.ListApplicationsRequest)(nil),                       // 84: prophetstor.api.datahub.resources.ListApplicationsRequest
	(*resources.ListNamespacesRequest)(nil),                         // 85: prophetstor.api.datahub.resources.ListNamespacesRequest
	(*resources.ListNodesRequest)(nil),                              // 86: prophetstor.api.datahub.resources.ListNodesRequest
	(*resources.ListClustersRequest)(nil),                           // 87: prophetstor.api.datahub.resources.ListClustersRequest
	(*resources.DeletePodsRequest)(nil),                             // 88: prophetstor.api.datahub.resources.DeletePodsRequest
	(*resources.DeleteControllersRequest)(nil),                      // 89: prophetstor.api.datahub.resources.DeleteControllersRequest
	(*resources.DeleteApplicationsRequest)(nil),                     // 90: prophetstor.api.datahub.resources.DeleteApplicationsRequest
	(*resources.DeleteNamespacesRequest)(nil),                       // 91: prophetstor.api.datahub.resources.DeleteNamespacesRequest
	(*resources.DeleteNodesRequest)(nil),                            // 92: prophetstor.api.datahub.resources.DeleteNodesRequest
	(*resources.DeleteClustersRequest)(nil),                         // 93: prophetstor.api.datahub.resources.DeleteClustersRequest
	(*schemas.CreateSchemasRequest)(nil),                            // 94: prophetstor.api.datahub.schemas.CreateSchemasRequest
	(*schemas.ListSchemasRequest)(nil),                              // 95: prophetstor.api.datahub.schemas.ListSchemasRequest
	(*schemas.DeleteSchemasRequest)(nil),                            // 96: prophetstor.api.datahub.schemas.DeleteSchemasRequest
	(*scores.CreateSimulatedSchedulingScoresRequest)(nil),           // 97: prophetstor.api.datahub.scores.CreateSimulatedSchedulingScoresRequest
	(*scores.ListSimulatedSchedulingScoresRequest)(nil),             // 98: prophetstor.api.datahub.scores.ListSimulatedSchedulingScoresRequest
	(*weavescope.ListWeaveScopeHostsRequest)(nil),                   // 99: prophetstor.api.datahub.weavescope.ListWeaveScopeHostsRequest
	(*weavescope.ListWeaveScopePodsRequest)(nil),                    // 100: prophetstor.api.datahub.weavescope.ListWeaveScopePodsRequest
	(*weavescope.ListWeaveScopeContainersRequest)(nil),              // 101: prophetstor.api.datahub.weavescope.ListWeaveScopeContainersRequest
	(*status.Status)(nil),                                           // 102: google.rpc.Status
	(*applications.ListApplicationsResponse)(nil),                   // 103: prophetstor.api.datahub.applications.ListApplicationsResponse
	(*data.ReadDataResponse)(nil),                                   // 104: prophetstor.api.datahub.data.ReadDataResponse
	(*events.ListEventsResponse)(nil),                               // 105: prophetstor.api.datahub.events.ListEventsResponse
	(*gpu.ListGpusResponse)(nil),                                    // 106: prophetstor.api.datahub.gpu.ListGpusResponse
	(*gpu.ListGpuMetricsResponse)(nil),                              // 107: prophetstor.api.datahub.gpu.ListGpuMetricsResponse
	(*gpu.ListGpuPredictionsResponse)(nil),                          // 108: prophetstor.api.datahub.gpu.ListGpuPredictionsResponse
	(*keycodes.AddKeycodeResponse)(nil),                             // 109: prophetstor.api.datahub.keycodes.AddKeycodeResponse
	(*keycodes.ListKeycodesResponse)(nil),                           // 110: prophetstor.api.datahub.keycodes.ListKeycodesResponse
	(*keycodes.GenerateRegistrationDataResponse)(nil),               // 111: prophetstor.api.datahub.keycodes.GenerateRegistrationDataResponse
	(*licenses.GetLicenseResponse)(nil),                             // 112: prophetstor.api.datahub.licenses.GetLicenseResponse
	(*metrics.ListMetricsResponse)(nil),                             // 113: prophetstor.api.datahub.metrics.ListMetricsResponse
	(*metrics.ListPodMetricsResponse)(nil),                          // 114: prophetstor.api.datahub.metrics.ListPodMetricsResponse
	(*metrics.ListControllerMetricsResponse)(nil),                   // 115: prophetstor.api.datahub.metrics.ListControllerMetricsResponse
	(*metrics.ListApplicationMetricsResponse)(nil),                  // 116: prophetstor.api.datahub.metrics.ListApplicationMetricsResponse
	(*metrics.ListNamespaceMetricsResponse)(nil),                    // 117: prophetstor.api.datahub.metrics.ListNamespaceMetricsResponse
	(*metrics.ListNodeMetricsResponse)(nil),                         // 118: prophetstor.api.datahub.metrics.ListNodeMetricsResponse
	(*metrics.ListClusterMetricsResponse)(nil),                      // 119: prophetstor.api.datahub.metrics.ListClusterMetricsResponse
	(*plannings.ListPlanningsResponse)(nil),                         // 120: prophetstor.api.datahub.plannings.ListPlanningsResponse
	(*plannings.ListPodPlanningsResponse)(nil),                      // 121: prophetstor.api.datahub.plannings.ListPodPlanningsResponse
	(*plannings.ListControllerPlanningsResponse)(nil),               // 122: prophetstor.api.datahub.plannings.ListControllerPlanningsResponse
	(*plannings.ListApplicationPlanningsResponse)(nil),              // 123: prophetstor.api.datahub.plannings.ListApplicationPlanningsResponse
	(*plannings.ListNamespacePlanningsResponse)(nil),                // 124: prophetstor.api.datahub.plannings.ListNamespacePlanningsResponse
	(*plannings.ListNodePlanningsResponse)(nil),                     // 125: prophetstor.api.datahub.plannings.ListNodePlanningsResponse
	(*plannings.ListClusterPlanningsResponse)(nil),                  // 126: prophetstor.api.datahub.plannings.ListClusterPlanningsResponse
	(*predictions.ListPredictionsResponse)(nil),                     // 127: prophetstor.api.datahub.predictions.ListPredictionsResponse
	(*predictions.ListPodPredictionsResponse)(nil),                  // 128: prophetstor.api.datahub.predictions.ListPodPredictionsResponse
	(*predictions.ListControllerPredictionsResponse)(nil),           // 129: prophetstor.api.datahub.predictions.ListControllerPredictionsResponse
	(*predictions.ListApplicationPredictionsResponse)(nil),          // 130: prophetstor.api.datahub.predictions.ListApplicationPredictionsResponse
	(*predictions.ListNamespacePredictionsResponse)(nil),            // 131: prophetstor.api.datahub.predictions.ListNamespacePredictionsResponse
	(*predictions.ListNodePredictionsResponse)(nil),                 // 132: prophetstor.api.datahub.predictions.ListNodePredictionsResponse
	(*predictions.ListClusterPredictionsResponse)(nil),              // 133: prophetstor.api.datahub.predictions.ListClusterPredictionsResponse
	(*rawdata.ReadRawdataResponse)(nil),                             // 134: prophetstor.api.datahub.rawdata.ReadRawdataResponse
	(*recommendations.ListRecommendationsResponse)(nil),             // 135: prophetstor.api.datahub.recommendations.ListRecommendationsResponse
	(*recommendations.ListPodRecommendationsResponse)(nil),          // 136: prophetstor.api.datahub.recommendations.ListPodRecommendationsResponse
	(*recommendations.ListControllerRecommendationsResponse)(nil),   // 137: prophetstor.api.datahub.recommendations.ListControllerRecommendationsResponse
	(*recommendations.ListApplicationRecommendationsResponse)(nil),  // 138: prophetstor.api.datahub.recommendations.ListApplicationRecommendationsResponse
	(*recommendations.ListNamespaceRecommendationsResponse)(nil),    // 139: prophetstor.api.datahub.recommendations.ListNamespaceRecommendationsResponse
	(*recommendations.ListNodeRecommendationsResponse)(nil),         // 140: prophetstor.api.datahub.recommendations.ListNodeRecommendationsResponse
	(*recommendations.ListClusterRecommendationsResponse)(nil),      // 141: prophetstor.api.datahub.recommendations.ListClusterRecommendationsResponse
	(*resources.ListPodsResponse)(nil),                              // 142: prophetstor.api.datahub.resources.ListPodsResponse
	(*resources.ListControllersResponse)(nil),                       // 143: prophetstor.api.datahub.resources.ListControllersResponse
	(*resources.ListApplicationsResponse)(nil),                      // 144: prophetstor.api.datahub.resources.ListApplicationsResponse
	(*resources.ListNamespacesResponse)(nil),                        // 145: prophetstor.api.datahub.resources.ListNamespacesResponse
	(*resources.ListNodesResponse)(nil),                             // 146: prophetstor.api.datahub.resources.ListNodesResponse
	(*resources.ListClustersResponse)(nil),                          // 147: prophetstor.api.datahub.resources.ListClustersResponse
	(*schemas.ListSchemasResponse)(nil),                             // 148: prophetstor.api.datahub.schemas.ListSchemasResponse
	(*scores.ListSimulatedSchedulingScoresResponse)(nil),            // 149: prophetstor.api.datahub.scores.ListSimulatedSchedulingScoresResponse
	(*weavescope.WeaveScopeResponse)(nil),                           // 150: prophetstor.api.datahub.weavescope.WeaveScopeResponse
}
var file_prophetstor_api_datahub_server_proto_depIdxs = []int32{
	0,   // 0: prophetstor.api.datahub.DatahubService.CreateApps:input_type -> prophetstor.api.datahub.applications.CreateApplicationsRequest
	1,   // 1: prophetstor.api.datahub.DatahubService.ListApps:input_type -> prophetstor.api.datahub.applications.ListApplicationsRequest
	2,   // 2: prophetstor.api.datahub.DatahubService.DeleteApps:input_type -> prophetstor.api.datahub.applications.DeleteApplicationsRequest
	3,   // 3: prophetstor.api.datahub.DatahubService.ReadData:input_type -> prophetstor.api.datahub.data.ReadDataRequest
	4,   // 4: prophetstor.api.datahub.DatahubService.WriteData:input_type -> prophetstor.api.datahub.data.WriteDataRequest
	5,   // 5: prophetstor.api.datahub.DatahubService.DeleteData:input_type -> prophetstor.api.datahub.data.DeleteDataRequest
	6,   // 6: prophetstor.api.datahub.DatahubService.WriteMeta:input_type -> prophetstor.api.datahub.data.WriteMetaRequest
	7,   // 7: prophetstor.api.datahub.DatahubService.CreateEvents:input_type -> prophetstor.api.datahub.events.CreateEventsRequest
	8,   // 8: prophetstor.api.datahub.DatahubService.ListEvents:input_type -> prophetstor.api.datahub.events.ListEventsRequest
	9,   // 9: prophetstor.api.datahub.DatahubService.CreateGpuPredictions:input_type -> prophetstor.api.datahub.gpu.CreateGpuPredictionsRequest
	10,  // 10: prophetstor.api.datahub.DatahubService.ListGpus:input_type -> prophetstor.api.datahub.gpu.ListGpusRequest
	11,  // 11: prophetstor.api.datahub.DatahubService.ListGpuMetrics:input_type -> prophetstor.api.datahub.gpu.ListGpuMetricsRequest
	12,  // 12: prophetstor.api.datahub.DatahubService.ListGpuPredictions:input_type -> prophetstor.api.datahub.gpu.ListGpuPredictionsRequest
	13,  // 13: prophetstor.api.datahub.DatahubService.AddKeycode:input_type -> prophetstor.api.datahub.keycodes.AddKeycodeRequest
	14,  // 14: prophetstor.api.datahub.DatahubService.ListKeycodes:input_type -> prophetstor.api.datahub.keycodes.ListKeycodesRequest
	15,  // 15: prophetstor.api.datahub.DatahubService.DeleteKeycode:input_type -> prophetstor.api.datahub.keycodes.DeleteKeycodeRequest
	16,  // 16: prophetstor.api.datahub.DatahubService.GenerateRegistrationData:input_type -> google.protobuf.Empty
	17,  // 17: prophetstor.api.datahub.DatahubService.ActivateRegistrationData:input_type -> prophetstor.api.datahub.keycodes.ActivateRegistrationDataRequest
	16,  // 18: prophetstor.api.datahub.DatahubService.GetLicense:input_type -> google.protobuf.Empty
	18,  // 19: prophetstor.api.datahub.DatahubService.CreateMetrics:input_type -> prophetstor.api.datahub.metrics.CreateMetricsRequest
	19,  // 20: prophetstor.api.datahub.DatahubService.CreatePodMetrics:input_type -> prophetstor.api.datahub.metrics.CreatePodMetricsRequest
	20,  // 21: prophetstor.api.datahub.DatahubService.CreateControllerMetrics:input_type -> prophetstor.api.datahub.metrics.CreateControllerMetricsRequest
	21,  // 22: prophetstor.api.datahub.DatahubService.CreateApplicationMetrics:input_type -> prophetstor.api.datahub.metrics.CreateApplicationMetricsRequest
	22,  // 23: prophetstor.api.datahub.DatahubService.CreateNamespaceMetrics:input_type -> prophetstor.api.datahub.metrics.CreateNamespaceMetricsRequest
	23,  // 24: prophetstor.api.datahub.DatahubService.CreateNodeMetrics:input_type -> prophetstor.api.datahub.metrics.CreateNodeMetricsRequest
	24,  // 25: prophetstor.api.datahub.DatahubService.CreateClusterMetrics:input_type -> prophetstor.api.datahub.metrics.CreateClusterMetricsRequest
	25,  // 26: prophetstor.api.datahub.DatahubService.ListMetrics:input_type -> prophetstor.api.datahub.metrics.ListMetricsRequest
	26,  // 27: prophetstor.api.datahub.DatahubService.ListPodMetrics:input_type -> prophetstor.api.datahub.metrics.ListPodMetricsRequest
	27,  // 28: prophetstor.api.datahub.DatahubService.ListControllerMetrics:input_type -> prophetstor.api.datahub.metrics.ListControllerMetricsRequest
	28,  // 29: prophetstor.api.datahub.DatahubService.ListApplicationMetrics:input_type -> prophetstor.api.datahub.metrics.ListApplicationMetricsRequest
	29,  // 30: prophetstor.api.datahub.DatahubService.ListNamespaceMetrics:input_type -> prophetstor.api.datahub.metrics.ListNamespaceMetricsRequest
	30,  // 31: prophetstor.api.datahub.DatahubService.ListNodeMetrics:input_type -> prophetstor.api.datahub.metrics.ListNodeMetricsRequest
	31,  // 32: prophetstor.api.datahub.DatahubService.ListClusterMetrics:input_type -> prophetstor.api.datahub.metrics.ListClusterMetricsRequest
	16,  // 33: prophetstor.api.datahub.DatahubService.Ping:input_type -> google.protobuf.Empty
	32,  // 34: prophetstor.api.datahub.DatahubService.CreatePlannings:input_type -> prophetstor.api.datahub.plannings.CreatePlanningsRequest
	33,  // 35: prophetstor.api.datahub.DatahubService.CreatePodPlannings:input_type -> prophetstor.api.datahub.plannings.CreatePodPlanningsRequest
	34,  // 36: prophetstor.api.datahub.DatahubService.CreateControllerPlannings:input_type -> prophetstor.api.datahub.plannings.CreateControllerPlanningsRequest
	35,  // 37: prophetstor.api.datahub.DatahubService.CreateApplicationPlannings:input_type -> prophetstor.api.datahub.plannings.CreateApplicationPlanningsRequest
	36,  // 38: prophetstor.api.datahub.DatahubService.CreateNamespacePlannings:input_type -> prophetstor.api.datahub.plannings.CreateNamespacePlanningsRequest
	37,  // 39: prophetstor.api.datahub.DatahubService.CreateNodePlannings:input_type -> prophetstor.api.datahub.plannings.CreateNodePlanningsRequest
	38,  // 40: prophetstor.api.datahub.DatahubService.CreateClusterPlannings:input_type -> prophetstor.api.datahub.plannings.CreateClusterPlanningsRequest
	39,  // 41: prophetstor.api.datahub.DatahubService.ListPlannings:input_type -> prophetstor.api.datahub.plannings.ListPlanningsRequest
	40,  // 42: prophetstor.api.datahub.DatahubService.ListPodPlannings:input_type -> prophetstor.api.datahub.plannings.ListPodPlanningsRequest
	41,  // 43: prophetstor.api.datahub.DatahubService.ListControllerPlannings:input_type -> prophetstor.api.datahub.plannings.ListControllerPlanningsRequest
	42,  // 44: prophetstor.api.datahub.DatahubService.ListApplicationPlannings:input_type -> prophetstor.api.datahub.plannings.ListApplicationPlanningsRequest
	43,  // 45: prophetstor.api.datahub.DatahubService.ListNamespacePlannings:input_type -> prophetstor.api.datahub.plannings.ListNamespacePlanningsRequest
	44,  // 46: prophetstor.api.datahub.DatahubService.ListNodePlannings:input_type -> prophetstor.api.datahub.plannings.ListNodePlanningsRequest
	45,  // 47: prophetstor.api.datahub.DatahubService.ListClusterPlannings:input_type -> prophetstor.api.datahub.plannings.ListClusterPlanningsRequest
	46,  // 48: prophetstor.api.datahub.DatahubService.CreatePredictions:input_type -> prophetstor.api.datahub.predictions.CreatePredictionsRequest
	47,  // 49: prophetstor.api.datahub.DatahubService.CreatePodPredictions:input_type -> prophetstor.api.datahub.predictions.CreatePodPredictionsRequest
	48,  // 50: prophetstor.api.datahub.DatahubService.CreateControllerPredictions:input_type -> prophetstor.api.datahub.predictions.CreateControllerPredictionsRequest
	49,  // 51: prophetstor.api.datahub.DatahubService.CreateApplicationPredictions:input_type -> prophetstor.api.datahub.predictions.CreateApplicationPredictionsRequest
	50,  // 52: prophetstor.api.datahub.DatahubService.CreateNamespacePredictions:input_type -> prophetstor.api.datahub.predictions.CreateNamespacePredictionsRequest
	51,  // 53: prophetstor.api.datahub.DatahubService.CreateNodePredictions:input_type -> prophetstor.api.datahub.predictions.CreateNodePredictionsRequest
	52,  // 54: prophetstor.api.datahub.DatahubService.CreateClusterPredictions:input_type -> prophetstor.api.datahub.predictions.CreateClusterPredictionsRequest
	53,  // 55: prophetstor.api.datahub.DatahubService.ListPredictions:input_type -> prophetstor.api.datahub.predictions.ListPredictionsRequest
	54,  // 56: prophetstor.api.datahub.DatahubService.ListPodPredictions:input_type -> prophetstor.api.datahub.predictions.ListPodPredictionsRequest
	55,  // 57: prophetstor.api.datahub.DatahubService.ListControllerPredictions:input_type -> prophetstor.api.datahub.predictions.ListControllerPredictionsRequest
	56,  // 58: prophetstor.api.datahub.DatahubService.ListApplicationPredictions:input_type -> prophetstor.api.datahub.predictions.ListApplicationPredictionsRequest
	57,  // 59: prophetstor.api.datahub.DatahubService.ListNamespacePredictions:input_type -> prophetstor.api.datahub.predictions.ListNamespacePredictionsRequest
	58,  // 60: prophetstor.api.datahub.DatahubService.ListNodePredictions:input_type -> prophetstor.api.datahub.predictions.ListNodePredictionsRequest
	59,  // 61: prophetstor.api.datahub.DatahubService.ListClusterPredictions:input_type -> prophetstor.api.datahub.predictions.ListClusterPredictionsRequest
	60,  // 62: prophetstor.api.datahub.DatahubService.ReadRawdata:input_type -> prophetstor.api.datahub.rawdata.ReadRawdataRequest
	61,  // 63: prophetstor.api.datahub.DatahubService.WriteRawdata:input_type -> prophetstor.api.datahub.rawdata.WriteRawdataRequest
	62,  // 64: prophetstor.api.datahub.DatahubService.CreateRecommendations:input_type -> prophetstor.api.datahub.recommendations.CreateRecommendationsRequest
	63,  // 65: prophetstor.api.datahub.DatahubService.CreatePodRecommendations:input_type -> prophetstor.api.datahub.recommendations.CreatePodRecommendationsRequest
	64,  // 66: prophetstor.api.datahub.DatahubService.CreateControllerRecommendations:input_type -> prophetstor.api.datahub.recommendations.CreateControllerRecommendationsRequest
	65,  // 67: prophetstor.api.datahub.DatahubService.CreateApplicationRecommendations:input_type -> prophetstor.api.datahub.recommendations.CreateApplicationRecommendationsRequest
	66,  // 68: prophetstor.api.datahub.DatahubService.CreateNamespaceRecommendations:input_type -> prophetstor.api.datahub.recommendations.CreateNamespaceRecommendationsRequest
	67,  // 69: prophetstor.api.datahub.DatahubService.CreateNodeRecommendations:input_type -> prophetstor.api.datahub.recommendations.CreateNodeRecommendationsRequest
	68,  // 70: prophetstor.api.datahub.DatahubService.CreateClusterRecommendations:input_type -> prophetstor.api.datahub.recommendations.CreateClusterRecommendationsRequest
	69,  // 71: prophetstor.api.datahub.DatahubService.ListRecommendations:input_type -> prophetstor.api.datahub.recommendations.ListRecommendationsRequest
	70,  // 72: prophetstor.api.datahub.DatahubService.ListPodRecommendations:input_type -> prophetstor.api.datahub.recommendations.ListPodRecommendationsRequest
	70,  // 73: prophetstor.api.datahub.DatahubService.ListAvailablePodRecommendations:input_type -> prophetstor.api.datahub.recommendations.ListPodRecommendationsRequest
	71,  // 74: prophetstor.api.datahub.DatahubService.ListControllerRecommendations:input_type -> prophetstor.api.datahub.recommendations.ListControllerRecommendationsRequest
	72,  // 75: prophetstor.api.datahub.DatahubService.ListApplicationRecommendations:input_type -> prophetstor.api.datahub.recommendations.ListApplicationRecommendationsRequest
	73,  // 76: prophetstor.api.datahub.DatahubService.ListNamespaceRecommendations:input_type -> prophetstor.api.datahub.recommendations.ListNamespaceRecommendationsRequest
	74,  // 77: prophetstor.api.datahub.DatahubService.ListNodeRecommendations:input_type -> prophetstor.api.datahub.recommendations.ListNodeRecommendationsRequest
	75,  // 78: prophetstor.api.datahub.DatahubService.ListClusterRecommendations:input_type -> prophetstor.api.datahub.recommendations.ListClusterRecommendationsRequest
	76,  // 79: prophetstor.api.datahub.DatahubService.CreatePods:input_type -> prophetstor.api.datahub.resources.CreatePodsRequest
	77,  // 80: prophetstor.api.datahub.DatahubService.CreateControllers:input_type -> prophetstor.api.datahub.resources.CreateControllersRequest
	78,  // 81: prophetstor.api.datahub.DatahubService.CreateApplications:input_type -> prophetstor.api.datahub.resources.CreateApplicationsRequest
	79,  // 82: prophetstor.api.datahub.DatahubService.CreateNamespaces:input_type -> prophetstor.api.datahub.resources.CreateNamespacesRequest
	80,  // 83: prophetstor.api.datahub.DatahubService.CreateNodes:input_type -> prophetstor.api.datahub.resources.CreateNodesRequest
	81,  // 84: prophetstor.api.datahub.DatahubService.CreateClusters:input_type -> prophetstor.api.datahub.resources.CreateClustersRequest
	82,  // 85: prophetstor.api.datahub.DatahubService.ListPods:input_type -> prophetstor.api.datahub.resources.ListPodsRequest
	83,  // 86: prophetstor.api.datahub.DatahubService.ListControllers:input_type -> prophetstor.api.datahub.resources.ListControllersRequest
	84,  // 87: prophetstor.api.datahub.DatahubService.ListApplications:input_type -> prophetstor.api.datahub.resources.ListApplicationsRequest
	85,  // 88: prophetstor.api.datahub.DatahubService.ListNamespaces:input_type -> prophetstor.api.datahub.resources.ListNamespacesRequest
	86,  // 89: prophetstor.api.datahub.DatahubService.ListNodes:input_type -> prophetstor.api.datahub.resources.ListNodesRequest
	87,  // 90: prophetstor.api.datahub.DatahubService.ListClusters:input_type -> prophetstor.api.datahub.resources.ListClustersRequest
	88,  // 91: prophetstor.api.datahub.DatahubService.DeletePods:input_type -> prophetstor.api.datahub.resources.DeletePodsRequest
	89,  // 92: prophetstor.api.datahub.DatahubService.DeleteControllers:input_type -> prophetstor.api.datahub.resources.DeleteControllersRequest
	90,  // 93: prophetstor.api.datahub.DatahubService.DeleteApplications:input_type -> prophetstor.api.datahub.resources.DeleteApplicationsRequest
	91,  // 94: prophetstor.api.datahub.DatahubService.DeleteNamespaces:input_type -> prophetstor.api.datahub.resources.DeleteNamespacesRequest
	92,  // 95: prophetstor.api.datahub.DatahubService.DeleteNodes:input_type -> prophetstor.api.datahub.resources.DeleteNodesRequest
	93,  // 96: prophetstor.api.datahub.DatahubService.DeleteClusters:input_type -> prophetstor.api.datahub.resources.DeleteClustersRequest
	94,  // 97: prophetstor.api.datahub.DatahubService.CreateSchemas:input_type -> prophetstor.api.datahub.schemas.CreateSchemasRequest
	95,  // 98: prophetstor.api.datahub.DatahubService.ListSchemas:input_type -> prophetstor.api.datahub.schemas.ListSchemasRequest
	96,  // 99: prophetstor.api.datahub.DatahubService.DeleteSchemas:input_type -> prophetstor.api.datahub.schemas.DeleteSchemasRequest
	97,  // 100: prophetstor.api.datahub.DatahubService.CreateSimulatedSchedulingScores:input_type -> prophetstor.api.datahub.scores.CreateSimulatedSchedulingScoresRequest
	98,  // 101: prophetstor.api.datahub.DatahubService.ListSimulatedSchedulingScores:input_type -> prophetstor.api.datahub.scores.ListSimulatedSchedulingScoresRequest
	99,  // 102: prophetstor.api.datahub.DatahubService.ListWeaveScopeHosts:input_type -> prophetstor.api.datahub.weavescope.ListWeaveScopeHostsRequest
	99,  // 103: prophetstor.api.datahub.DatahubService.GetWeaveScopeHostDetails:input_type -> prophetstor.api.datahub.weavescope.ListWeaveScopeHostsRequest
	100, // 104: prophetstor.api.datahub.DatahubService.ListWeaveScopePods:input_type -> prophetstor.api.datahub.weavescope.ListWeaveScopePodsRequest
	100, // 105: prophetstor.api.datahub.DatahubService.GetWeaveScopePodDetails:input_type -> prophetstor.api.datahub.weavescope.ListWeaveScopePodsRequest
	101, // 106: prophetstor.api.datahub.DatahubService.ListWeaveScopeContainers:input_type -> prophetstor.api.datahub.weavescope.ListWeaveScopeContainersRequest
	101, // 107: prophetstor.api.datahub.DatahubService.ListWeaveScopeContainersByHostname:input_type -> prophetstor.api.datahub.weavescope.ListWeaveScopeContainersRequest
	101, // 108: prophetstor.api.datahub.DatahubService.ListWeaveScopeContainersByImage:input_type -> prophetstor.api.datahub.weavescope.ListWeaveScopeContainersRequest
	101, // 109: prophetstor.api.datahub.DatahubService.GetWeaveScopeContainerDetails:input_type -> prophetstor.api.datahub.weavescope.ListWeaveScopeContainersRequest
	102, // 110: prophetstor.api.datahub.DatahubService.CreateApps:output_type -> google.rpc.Status
	103, // 111: prophetstor.api.datahub.DatahubService.ListApps:output_type -> prophetstor.api.datahub.applications.ListApplicationsResponse
	102, // 112: prophetstor.api.datahub.DatahubService.DeleteApps:output_type -> google.rpc.Status
	104, // 113: prophetstor.api.datahub.DatahubService.ReadData:output_type -> prophetstor.api.datahub.data.ReadDataResponse
	102, // 114: prophetstor.api.datahub.DatahubService.WriteData:output_type -> google.rpc.Status
	102, // 115: prophetstor.api.datahub.DatahubService.DeleteData:output_type -> google.rpc.Status
	102, // 116: prophetstor.api.datahub.DatahubService.WriteMeta:output_type -> google.rpc.Status
	102, // 117: prophetstor.api.datahub.DatahubService.CreateEvents:output_type -> google.rpc.Status
	105, // 118: prophetstor.api.datahub.DatahubService.ListEvents:output_type -> prophetstor.api.datahub.events.ListEventsResponse
	102, // 119: prophetstor.api.datahub.DatahubService.CreateGpuPredictions:output_type -> google.rpc.Status
	106, // 120: prophetstor.api.datahub.DatahubService.ListGpus:output_type -> prophetstor.api.datahub.gpu.ListGpusResponse
	107, // 121: prophetstor.api.datahub.DatahubService.ListGpuMetrics:output_type -> prophetstor.api.datahub.gpu.ListGpuMetricsResponse
	108, // 122: prophetstor.api.datahub.DatahubService.ListGpuPredictions:output_type -> prophetstor.api.datahub.gpu.ListGpuPredictionsResponse
	109, // 123: prophetstor.api.datahub.DatahubService.AddKeycode:output_type -> prophetstor.api.datahub.keycodes.AddKeycodeResponse
	110, // 124: prophetstor.api.datahub.DatahubService.ListKeycodes:output_type -> prophetstor.api.datahub.keycodes.ListKeycodesResponse
	102, // 125: prophetstor.api.datahub.DatahubService.DeleteKeycode:output_type -> google.rpc.Status
	111, // 126: prophetstor.api.datahub.DatahubService.GenerateRegistrationData:output_type -> prophetstor.api.datahub.keycodes.GenerateRegistrationDataResponse
	102, // 127: prophetstor.api.datahub.DatahubService.ActivateRegistrationData:output_type -> google.rpc.Status
	112, // 128: prophetstor.api.datahub.DatahubService.GetLicense:output_type -> prophetstor.api.datahub.licenses.GetLicenseResponse
	102, // 129: prophetstor.api.datahub.DatahubService.CreateMetrics:output_type -> google.rpc.Status
	102, // 130: prophetstor.api.datahub.DatahubService.CreatePodMetrics:output_type -> google.rpc.Status
	102, // 131: prophetstor.api.datahub.DatahubService.CreateControllerMetrics:output_type -> google.rpc.Status
	102, // 132: prophetstor.api.datahub.DatahubService.CreateApplicationMetrics:output_type -> google.rpc.Status
	102, // 133: prophetstor.api.datahub.DatahubService.CreateNamespaceMetrics:output_type -> google.rpc.Status
	102, // 134: prophetstor.api.datahub.DatahubService.CreateNodeMetrics:output_type -> google.rpc.Status
	102, // 135: prophetstor.api.datahub.DatahubService.CreateClusterMetrics:output_type -> google.rpc.Status
	113, // 136: prophetstor.api.datahub.DatahubService.ListMetrics:output_type -> prophetstor.api.datahub.metrics.ListMetricsResponse
	114, // 137: prophetstor.api.datahub.DatahubService.ListPodMetrics:output_type -> prophetstor.api.datahub.metrics.ListPodMetricsResponse
	115, // 138: prophetstor.api.datahub.DatahubService.ListControllerMetrics:output_type -> prophetstor.api.datahub.metrics.ListControllerMetricsResponse
	116, // 139: prophetstor.api.datahub.DatahubService.ListApplicationMetrics:output_type -> prophetstor.api.datahub.metrics.ListApplicationMetricsResponse
	117, // 140: prophetstor.api.datahub.DatahubService.ListNamespaceMetrics:output_type -> prophetstor.api.datahub.metrics.ListNamespaceMetricsResponse
	118, // 141: prophetstor.api.datahub.DatahubService.ListNodeMetrics:output_type -> prophetstor.api.datahub.metrics.ListNodeMetricsResponse
	119, // 142: prophetstor.api.datahub.DatahubService.ListClusterMetrics:output_type -> prophetstor.api.datahub.metrics.ListClusterMetricsResponse
	102, // 143: prophetstor.api.datahub.DatahubService.Ping:output_type -> google.rpc.Status
	102, // 144: prophetstor.api.datahub.DatahubService.CreatePlannings:output_type -> google.rpc.Status
	102, // 145: prophetstor.api.datahub.DatahubService.CreatePodPlannings:output_type -> google.rpc.Status
	102, // 146: prophetstor.api.datahub.DatahubService.CreateControllerPlannings:output_type -> google.rpc.Status
	102, // 147: prophetstor.api.datahub.DatahubService.CreateApplicationPlannings:output_type -> google.rpc.Status
	102, // 148: prophetstor.api.datahub.DatahubService.CreateNamespacePlannings:output_type -> google.rpc.Status
	102, // 149: prophetstor.api.datahub.DatahubService.CreateNodePlannings:output_type -> google.rpc.Status
	102, // 150: prophetstor.api.datahub.DatahubService.CreateClusterPlannings:output_type -> google.rpc.Status
	120, // 151: prophetstor.api.datahub.DatahubService.ListPlannings:output_type -> prophetstor.api.datahub.plannings.ListPlanningsResponse
	121, // 152: prophetstor.api.datahub.DatahubService.ListPodPlannings:output_type -> prophetstor.api.datahub.plannings.ListPodPlanningsResponse
	122, // 153: prophetstor.api.datahub.DatahubService.ListControllerPlannings:output_type -> prophetstor.api.datahub.plannings.ListControllerPlanningsResponse
	123, // 154: prophetstor.api.datahub.DatahubService.ListApplicationPlannings:output_type -> prophetstor.api.datahub.plannings.ListApplicationPlanningsResponse
	124, // 155: prophetstor.api.datahub.DatahubService.ListNamespacePlannings:output_type -> prophetstor.api.datahub.plannings.ListNamespacePlanningsResponse
	125, // 156: prophetstor.api.datahub.DatahubService.ListNodePlannings:output_type -> prophetstor.api.datahub.plannings.ListNodePlanningsResponse
	126, // 157: prophetstor.api.datahub.DatahubService.ListClusterPlannings:output_type -> prophetstor.api.datahub.plannings.ListClusterPlanningsResponse
	102, // 158: prophetstor.api.datahub.DatahubService.CreatePredictions:output_type -> google.rpc.Status
	102, // 159: prophetstor.api.datahub.DatahubService.CreatePodPredictions:output_type -> google.rpc.Status
	102, // 160: prophetstor.api.datahub.DatahubService.CreateControllerPredictions:output_type -> google.rpc.Status
	102, // 161: prophetstor.api.datahub.DatahubService.CreateApplicationPredictions:output_type -> google.rpc.Status
	102, // 162: prophetstor.api.datahub.DatahubService.CreateNamespacePredictions:output_type -> google.rpc.Status
	102, // 163: prophetstor.api.datahub.DatahubService.CreateNodePredictions:output_type -> google.rpc.Status
	102, // 164: prophetstor.api.datahub.DatahubService.CreateClusterPredictions:output_type -> google.rpc.Status
	127, // 165: prophetstor.api.datahub.DatahubService.ListPredictions:output_type -> prophetstor.api.datahub.predictions.ListPredictionsResponse
	128, // 166: prophetstor.api.datahub.DatahubService.ListPodPredictions:output_type -> prophetstor.api.datahub.predictions.ListPodPredictionsResponse
	129, // 167: prophetstor.api.datahub.DatahubService.ListControllerPredictions:output_type -> prophetstor.api.datahub.predictions.ListControllerPredictionsResponse
	130, // 168: prophetstor.api.datahub.DatahubService.ListApplicationPredictions:output_type -> prophetstor.api.datahub.predictions.ListApplicationPredictionsResponse
	131, // 169: prophetstor.api.datahub.DatahubService.ListNamespacePredictions:output_type -> prophetstor.api.datahub.predictions.ListNamespacePredictionsResponse
	132, // 170: prophetstor.api.datahub.DatahubService.ListNodePredictions:output_type -> prophetstor.api.datahub.predictions.ListNodePredictionsResponse
	133, // 171: prophetstor.api.datahub.DatahubService.ListClusterPredictions:output_type -> prophetstor.api.datahub.predictions.ListClusterPredictionsResponse
	134, // 172: prophetstor.api.datahub.DatahubService.ReadRawdata:output_type -> prophetstor.api.datahub.rawdata.ReadRawdataResponse
	102, // 173: prophetstor.api.datahub.DatahubService.WriteRawdata:output_type -> google.rpc.Status
	102, // 174: prophetstor.api.datahub.DatahubService.CreateRecommendations:output_type -> google.rpc.Status
	102, // 175: prophetstor.api.datahub.DatahubService.CreatePodRecommendations:output_type -> google.rpc.Status
	102, // 176: prophetstor.api.datahub.DatahubService.CreateControllerRecommendations:output_type -> google.rpc.Status
	102, // 177: prophetstor.api.datahub.DatahubService.CreateApplicationRecommendations:output_type -> google.rpc.Status
	102, // 178: prophetstor.api.datahub.DatahubService.CreateNamespaceRecommendations:output_type -> google.rpc.Status
	102, // 179: prophetstor.api.datahub.DatahubService.CreateNodeRecommendations:output_type -> google.rpc.Status
	102, // 180: prophetstor.api.datahub.DatahubService.CreateClusterRecommendations:output_type -> google.rpc.Status
	135, // 181: prophetstor.api.datahub.DatahubService.ListRecommendations:output_type -> prophetstor.api.datahub.recommendations.ListRecommendationsResponse
	136, // 182: prophetstor.api.datahub.DatahubService.ListPodRecommendations:output_type -> prophetstor.api.datahub.recommendations.ListPodRecommendationsResponse
	136, // 183: prophetstor.api.datahub.DatahubService.ListAvailablePodRecommendations:output_type -> prophetstor.api.datahub.recommendations.ListPodRecommendationsResponse
	137, // 184: prophetstor.api.datahub.DatahubService.ListControllerRecommendations:output_type -> prophetstor.api.datahub.recommendations.ListControllerRecommendationsResponse
	138, // 185: prophetstor.api.datahub.DatahubService.ListApplicationRecommendations:output_type -> prophetstor.api.datahub.recommendations.ListApplicationRecommendationsResponse
	139, // 186: prophetstor.api.datahub.DatahubService.ListNamespaceRecommendations:output_type -> prophetstor.api.datahub.recommendations.ListNamespaceRecommendationsResponse
	140, // 187: prophetstor.api.datahub.DatahubService.ListNodeRecommendations:output_type -> prophetstor.api.datahub.recommendations.ListNodeRecommendationsResponse
	141, // 188: prophetstor.api.datahub.DatahubService.ListClusterRecommendations:output_type -> prophetstor.api.datahub.recommendations.ListClusterRecommendationsResponse
	102, // 189: prophetstor.api.datahub.DatahubService.CreatePods:output_type -> google.rpc.Status
	102, // 190: prophetstor.api.datahub.DatahubService.CreateControllers:output_type -> google.rpc.Status
	102, // 191: prophetstor.api.datahub.DatahubService.CreateApplications:output_type -> google.rpc.Status
	102, // 192: prophetstor.api.datahub.DatahubService.CreateNamespaces:output_type -> google.rpc.Status
	102, // 193: prophetstor.api.datahub.DatahubService.CreateNodes:output_type -> google.rpc.Status
	102, // 194: prophetstor.api.datahub.DatahubService.CreateClusters:output_type -> google.rpc.Status
	142, // 195: prophetstor.api.datahub.DatahubService.ListPods:output_type -> prophetstor.api.datahub.resources.ListPodsResponse
	143, // 196: prophetstor.api.datahub.DatahubService.ListControllers:output_type -> prophetstor.api.datahub.resources.ListControllersResponse
	144, // 197: prophetstor.api.datahub.DatahubService.ListApplications:output_type -> prophetstor.api.datahub.resources.ListApplicationsResponse
	145, // 198: prophetstor.api.datahub.DatahubService.ListNamespaces:output_type -> prophetstor.api.datahub.resources.ListNamespacesResponse
	146, // 199: prophetstor.api.datahub.DatahubService.ListNodes:output_type -> prophetstor.api.datahub.resources.ListNodesResponse
	147, // 200: prophetstor.api.datahub.DatahubService.ListClusters:output_type -> prophetstor.api.datahub.resources.ListClustersResponse
	102, // 201: prophetstor.api.datahub.DatahubService.DeletePods:output_type -> google.rpc.Status
	102, // 202: prophetstor.api.datahub.DatahubService.DeleteControllers:output_type -> google.rpc.Status
	102, // 203: prophetstor.api.datahub.DatahubService.DeleteApplications:output_type -> google.rpc.Status
	102, // 204: prophetstor.api.datahub.DatahubService.DeleteNamespaces:output_type -> google.rpc.Status
	102, // 205: prophetstor.api.datahub.DatahubService.DeleteNodes:output_type -> google.rpc.Status
	102, // 206: prophetstor.api.datahub.DatahubService.DeleteClusters:output_type -> google.rpc.Status
	102, // 207: prophetstor.api.datahub.DatahubService.CreateSchemas:output_type -> google.rpc.Status
	148, // 208: prophetstor.api.datahub.DatahubService.ListSchemas:output_type -> prophetstor.api.datahub.schemas.ListSchemasResponse
	102, // 209: prophetstor.api.datahub.DatahubService.DeleteSchemas:output_type -> google.rpc.Status
	102, // 210: prophetstor.api.datahub.DatahubService.CreateSimulatedSchedulingScores:output_type -> google.rpc.Status
	149, // 211: prophetstor.api.datahub.DatahubService.ListSimulatedSchedulingScores:output_type -> prophetstor.api.datahub.scores.ListSimulatedSchedulingScoresResponse
	150, // 212: prophetstor.api.datahub.DatahubService.ListWeaveScopeHosts:output_type -> prophetstor.api.datahub.weavescope.WeaveScopeResponse
	150, // 213: prophetstor.api.datahub.DatahubService.GetWeaveScopeHostDetails:output_type -> prophetstor.api.datahub.weavescope.WeaveScopeResponse
	150, // 214: prophetstor.api.datahub.DatahubService.ListWeaveScopePods:output_type -> prophetstor.api.datahub.weavescope.WeaveScopeResponse
	150, // 215: prophetstor.api.datahub.DatahubService.GetWeaveScopePodDetails:output_type -> prophetstor.api.datahub.weavescope.WeaveScopeResponse
	150, // 216: prophetstor.api.datahub.DatahubService.ListWeaveScopeContainers:output_type -> prophetstor.api.datahub.weavescope.WeaveScopeResponse
	150, // 217: prophetstor.api.datahub.DatahubService.ListWeaveScopeContainersByHostname:output_type -> prophetstor.api.datahub.weavescope.WeaveScopeResponse
	150, // 218: prophetstor.api.datahub.DatahubService.ListWeaveScopeContainersByImage:output_type -> prophetstor.api.datahub.weavescope.WeaveScopeResponse
	150, // 219: prophetstor.api.datahub.DatahubService.GetWeaveScopeContainerDetails:output_type -> prophetstor.api.datahub.weavescope.WeaveScopeResponse
	110, // [110:220] is the sub-list for method output_type
	0,   // [0:110] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_prophetstor_api_datahub_server_proto_init() }
func file_prophetstor_api_datahub_server_proto_init() {
	if File_prophetstor_api_datahub_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prophetstor_api_datahub_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prophetstor_api_datahub_server_proto_goTypes,
		DependencyIndexes: file_prophetstor_api_datahub_server_proto_depIdxs,
	}.Build()
	File_prophetstor_api_datahub_server_proto = out.File
	file_prophetstor_api_datahub_server_proto_rawDesc = nil
	file_prophetstor_api_datahub_server_proto_goTypes = nil
	file_prophetstor_api_datahub_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatahubServiceClient is the client API for DatahubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatahubServiceClient interface {
	CreateApps(ctx context.Context, in *applications.CreateApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListApps(ctx context.Context, in *applications.ListApplicationsRequest, opts ...grpc.CallOption) (*applications.ListApplicationsResponse, error)
	DeleteApps(ctx context.Context, in *applications.DeleteApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to read data based on alameda specific schemas
	ReadData(ctx context.Context, in *data.ReadDataRequest, opts ...grpc.CallOption) (*data.ReadDataResponse, error)
	// Used to write data based on alameda specific schemas
	WriteData(ctx context.Context, in *data.WriteDataRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to delete data based on alameda specific schemas
	DeleteData(ctx context.Context, in *data.DeleteDataRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to write metadata based on alameda specific schemas
	WriteMeta(ctx context.Context, in *data.WriteMetaRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create alameda specific events
	CreateEvents(ctx context.Context, in *events.CreateEventsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to list alameda specific events
	ListEvents(ctx context.Context, in *events.ListEventsRequest, opts ...grpc.CallOption) (*events.ListEventsResponse, error)
	// Used to create GPU predictions
	CreateGpuPredictions(ctx context.Context, in *gpu.CreateGpuPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to list GPU need to be predicted
	ListGpus(ctx context.Context, in *gpu.ListGpusRequest, opts ...grpc.CallOption) (*gpu.ListGpusResponse, error)
	// Used to list GPU metrics data
	ListGpuMetrics(ctx context.Context, in *gpu.ListGpuMetricsRequest, opts ...grpc.CallOption) (*gpu.ListGpuMetricsResponse, error)
	// Used to list GPU predictions
	ListGpuPredictions(ctx context.Context, in *gpu.ListGpuPredictionsRequest, opts ...grpc.CallOption) (*gpu.ListGpuPredictionsResponse, error)
	// Used to add a keycode
	AddKeycode(ctx context.Context, in *keycodes.AddKeycodeRequest, opts ...grpc.CallOption) (*keycodes.AddKeycodeResponse, error)
	// Used to retrieve keycodes detailed information
	ListKeycodes(ctx context.Context, in *keycodes.ListKeycodesRequest, opts ...grpc.CallOption) (*keycodes.ListKeycodesResponse, error)
	// Used to delete a keycode
	DeleteKeycode(ctx context.Context, in *keycodes.DeleteKeycodeRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to generate license registration data
	GenerateRegistrationData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*keycodes.GenerateRegistrationDataResponse, error)
	// Used to activate license signature data
	ActivateRegistrationData(ctx context.Context, in *keycodes.ActivateRegistrationDataRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to get datahub license information
	GetLicense(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*licenses.GetLicenseResponse, error)
	CreateMetrics(ctx context.Context, in *metrics.CreateMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreatePodMetrics(ctx context.Context, in *metrics.CreatePodMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllerMetrics(ctx context.Context, in *metrics.CreateControllerMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateApplicationMetrics(ctx context.Context, in *metrics.CreateApplicationMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNamespaceMetrics(ctx context.Context, in *metrics.CreateNamespaceMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNodeMetrics(ctx context.Context, in *metrics.CreateNodeMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateClusterMetrics(ctx context.Context, in *metrics.CreateClusterMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListMetrics(ctx context.Context, in *metrics.ListMetricsRequest, opts ...grpc.CallOption) (*metrics.ListMetricsResponse, error)
	// Used to list pod metric data
	ListPodMetrics(ctx context.Context, in *metrics.ListPodMetricsRequest, opts ...grpc.CallOption) (*metrics.ListPodMetricsResponse, error)
	// Used to list controller metric data
	ListControllerMetrics(ctx context.Context, in *metrics.ListControllerMetricsRequest, opts ...grpc.CallOption) (*metrics.ListControllerMetricsResponse, error)
	// Used to list alameda scaler metric data
	ListApplicationMetrics(ctx context.Context, in *metrics.ListApplicationMetricsRequest, opts ...grpc.CallOption) (*metrics.ListApplicationMetricsResponse, error)
	// Used to list namespace metric data
	ListNamespaceMetrics(ctx context.Context, in *metrics.ListNamespaceMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNamespaceMetricsResponse, error)
	// Used to list node metric data
	ListNodeMetrics(ctx context.Context, in *metrics.ListNodeMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNodeMetricsResponse, error)
	// Used to list cluster metric data
	ListClusterMetrics(ctx context.Context, in *metrics.ListClusterMetricsRequest, opts ...grpc.CallOption) (*metrics.ListClusterMetricsResponse, error)
	// Used to check if datahub is still alive
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*status.Status, error)
	CreatePlannings(ctx context.Context, in *plannings.CreatePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreatePodPlannings(ctx context.Context, in *plannings.CreatePodPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllerPlannings(ctx context.Context, in *plannings.CreateControllerPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateApplicationPlannings(ctx context.Context, in *plannings.CreateApplicationPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNamespacePlannings(ctx context.Context, in *plannings.CreateNamespacePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNodePlannings(ctx context.Context, in *plannings.CreateNodePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateClusterPlannings(ctx context.Context, in *plannings.CreateClusterPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPlannings(ctx context.Context, in *plannings.ListPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListPlanningsResponse, error)
	ListPodPlannings(ctx context.Context, in *plannings.ListPodPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListPodPlanningsResponse, error)
	ListControllerPlannings(ctx context.Context, in *plannings.ListControllerPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListControllerPlanningsResponse, error)
	ListApplicationPlannings(ctx context.Context, in *plannings.ListApplicationPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListApplicationPlanningsResponse, error)
	ListNamespacePlannings(ctx context.Context, in *plannings.ListNamespacePlanningsRequest, opts ...grpc.CallOption) (*plannings.ListNamespacePlanningsResponse, error)
	ListNodePlannings(ctx context.Context, in *plannings.ListNodePlanningsRequest, opts ...grpc.CallOption) (*plannings.ListNodePlanningsResponse, error)
	ListClusterPlannings(ctx context.Context, in *plannings.ListClusterPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListClusterPlanningsResponse, error)
	CreatePredictions(ctx context.Context, in *predictions.CreatePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create predictions of pods
	CreatePodPredictions(ctx context.Context, in *predictions.CreatePodPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create predictions of controllers
	CreateControllerPredictions(ctx context.Context, in *predictions.CreateControllerPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create predictions of alameda scalers
	CreateApplicationPredictions(ctx context.Context, in *predictions.CreateApplicationPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create predictions of namespaces
	CreateNamespacePredictions(ctx context.Context, in *predictions.CreateNamespacePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create predictions of nodes
	CreateNodePredictions(ctx context.Context, in *predictions.CreateNodePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create predictions of clusters
	CreateClusterPredictions(ctx context.Context, in *predictions.CreateClusterPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPredictions(ctx context.Context, in *predictions.ListPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListPredictionsResponse, error)
	// Used to list pod predictions
	ListPodPredictions(ctx context.Context, in *predictions.ListPodPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListPodPredictionsResponse, error)
	// Used to list controller predictions
	ListControllerPredictions(ctx context.Context, in *predictions.ListControllerPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListControllerPredictionsResponse, error)
	// Used to list alameda scaler predictions
	ListApplicationPredictions(ctx context.Context, in *predictions.ListApplicationPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListApplicationPredictionsResponse, error)
	// Used to list namespace predictions
	ListNamespacePredictions(ctx context.Context, in *predictions.ListNamespacePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNamespacePredictionsResponse, error)
	// Used to list node predictions
	ListNodePredictions(ctx context.Context, in *predictions.ListNodePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNodePredictionsResponse, error)
	// Used to list cluster predictions
	ListClusterPredictions(ctx context.Context, in *predictions.ListClusterPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListClusterPredictionsResponse, error)
	// Rawdata --------------------------------------------------
	ReadRawdata(ctx context.Context, in *rawdata.ReadRawdataRequest, opts ...grpc.CallOption) (*rawdata.ReadRawdataResponse, error)
	WriteRawdata(ctx context.Context, in *rawdata.WriteRawdataRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateRecommendations(ctx context.Context, in *recommendations.CreateRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create recommendations of pods
	CreatePodRecommendations(ctx context.Context, in *recommendations.CreatePodRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create recommendations of controllers
	CreateControllerRecommendations(ctx context.Context, in *recommendations.CreateControllerRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create recommendations of alameda scalers
	CreateApplicationRecommendations(ctx context.Context, in *recommendations.CreateApplicationRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create recommendations of namespaces
	CreateNamespaceRecommendations(ctx context.Context, in *recommendations.CreateNamespaceRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create recommendations of nodes
	CreateNodeRecommendations(ctx context.Context, in *recommendations.CreateNodeRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to create recommendations of clusters
	CreateClusterRecommendations(ctx context.Context, in *recommendations.CreateClusterRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListRecommendations(ctx context.Context, in *recommendations.ListRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListRecommendationsResponse, error)
	// Used to list pod recommenations
	ListPodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error)
	// Used to list available pod recommenations
	ListAvailablePodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error)
	// Used to list controller recommenations
	ListControllerRecommendations(ctx context.Context, in *recommendations.ListControllerRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListControllerRecommendationsResponse, error)
	// Used to list alameda scaler recommenations
	ListApplicationRecommendations(ctx context.Context, in *recommendations.ListApplicationRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListApplicationRecommendationsResponse, error)
	// Used to list namespace recommenations
	ListNamespaceRecommendations(ctx context.Context, in *recommendations.ListNamespaceRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListNamespaceRecommendationsResponse, error)
	// Used to list node recommenations
	ListNodeRecommendations(ctx context.Context, in *recommendations.ListNodeRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListNodeRecommendationsResponse, error)
	// Used to list cluster recommenations
	ListClusterRecommendations(ctx context.Context, in *recommendations.ListClusterRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListClusterRecommendationsResponse, error)
	// Used to add pods that need to be predicted
	CreatePods(ctx context.Context, in *resources.CreatePodsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to add controllers that need to be predicted
	CreateControllers(ctx context.Context, in *resources.CreateControllersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to add alameda scalers that need to be predicted
	CreateApplications(ctx context.Context, in *resources.CreateApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to add namespaces that need to be predicted
	CreateNamespaces(ctx context.Context, in *resources.CreateNamespacesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to add nodes that need to be predicted
	CreateNodes(ctx context.Context, in *resources.CreateNodesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to add clusters that need to be predicted
	CreateClusters(ctx context.Context, in *resources.CreateClustersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to list pods need to be predicted
	ListPods(ctx context.Context, in *resources.ListPodsRequest, opts ...grpc.CallOption) (*resources.ListPodsResponse, error)
	// Used to list contollers need to be predicted
	ListControllers(ctx context.Context, in *resources.ListControllersRequest, opts ...grpc.CallOption) (*resources.ListControllersResponse, error)
	// Used to list alameda scalers need to be predicted
	ListApplications(ctx context.Context, in *resources.ListApplicationsRequest, opts ...grpc.CallOption) (*resources.ListApplicationsResponse, error)
	// Used to list namespaces need to be predicted
	ListNamespaces(ctx context.Context, in *resources.ListNamespacesRequest, opts ...grpc.CallOption) (*resources.ListNamespacesResponse, error)
	// Used to list nodes' information
	ListNodes(ctx context.Context, in *resources.ListNodesRequest, opts ...grpc.CallOption) (*resources.ListNodesResponse, error)
	// Used to list clusters' information
	ListClusters(ctx context.Context, in *resources.ListClustersRequest, opts ...grpc.CallOption) (*resources.ListClustersResponse, error)
	// Used to stop generating predictions for the pods
	DeletePods(ctx context.Context, in *resources.DeletePodsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to stop generating predictions for the controllers
	DeleteControllers(ctx context.Context, in *resources.DeleteControllersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to stop generating predictions for the applications
	DeleteApplications(ctx context.Context, in *resources.DeleteApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to stop generating predictions for the namespaces
	DeleteNamespaces(ctx context.Context, in *resources.DeleteNamespacesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to stop generating predictions for the nodes
	DeleteNodes(ctx context.Context, in *resources.DeleteNodesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to stop generating predictions for the clusters
	DeleteClusters(ctx context.Context, in *resources.DeleteClustersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Schemas --------------------------------------------------
	CreateSchemas(ctx context.Context, in *schemas.CreateSchemasRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListSchemas(ctx context.Context, in *schemas.ListSchemasRequest, opts ...grpc.CallOption) (*schemas.ListSchemasResponse, error)
	DeleteSchemas(ctx context.Context, in *schemas.DeleteSchemasRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Scores --------------------------------------------------
	CreateSimulatedSchedulingScores(ctx context.Context, in *scores.CreateSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to list system scores
	ListSimulatedSchedulingScores(ctx context.Context, in *scores.ListSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*scores.ListSimulatedSchedulingScoresResponse, error)
	// weave scope --------------------------------------------------
	ListWeaveScopeHosts(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeHostDetails(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopePods(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopePodDetails(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainers(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByHostname(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByImage(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeContainerDetails(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
}

type datahubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatahubServiceClient(cc grpc.ClientConnInterface) DatahubServiceClient {
	return &datahubServiceClient{cc}
}

func (c *datahubServiceClient) CreateApps(ctx context.Context, in *applications.CreateApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApps(ctx context.Context, in *applications.ListApplicationsRequest, opts ...grpc.CallOption) (*applications.ListApplicationsResponse, error) {
	out := new(applications.ListApplicationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteApps(ctx context.Context, in *applications.DeleteApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ReadData(ctx context.Context, in *data.ReadDataRequest, opts ...grpc.CallOption) (*data.ReadDataResponse, error) {
	out := new(data.ReadDataResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ReadData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) WriteData(ctx context.Context, in *data.WriteDataRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/WriteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteData(ctx context.Context, in *data.DeleteDataRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) WriteMeta(ctx context.Context, in *data.WriteMetaRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/WriteMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateEvents(ctx context.Context, in *events.CreateEventsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListEvents(ctx context.Context, in *events.ListEventsRequest, opts ...grpc.CallOption) (*events.ListEventsResponse, error) {
	out := new(events.ListEventsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateGpuPredictions(ctx context.Context, in *gpu.CreateGpuPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateGpuPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpus(ctx context.Context, in *gpu.ListGpusRequest, opts ...grpc.CallOption) (*gpu.ListGpusResponse, error) {
	out := new(gpu.ListGpusResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListGpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpuMetrics(ctx context.Context, in *gpu.ListGpuMetricsRequest, opts ...grpc.CallOption) (*gpu.ListGpuMetricsResponse, error) {
	out := new(gpu.ListGpuMetricsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListGpuMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpuPredictions(ctx context.Context, in *gpu.ListGpuPredictionsRequest, opts ...grpc.CallOption) (*gpu.ListGpuPredictionsResponse, error) {
	out := new(gpu.ListGpuPredictionsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListGpuPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) AddKeycode(ctx context.Context, in *keycodes.AddKeycodeRequest, opts ...grpc.CallOption) (*keycodes.AddKeycodeResponse, error) {
	out := new(keycodes.AddKeycodeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/AddKeycode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListKeycodes(ctx context.Context, in *keycodes.ListKeycodesRequest, opts ...grpc.CallOption) (*keycodes.ListKeycodesResponse, error) {
	out := new(keycodes.ListKeycodesResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListKeycodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteKeycode(ctx context.Context, in *keycodes.DeleteKeycodeRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteKeycode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GenerateRegistrationData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*keycodes.GenerateRegistrationDataResponse, error) {
	out := new(keycodes.GenerateRegistrationDataResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/GenerateRegistrationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ActivateRegistrationData(ctx context.Context, in *keycodes.ActivateRegistrationDataRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ActivateRegistrationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetLicense(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*licenses.GetLicenseResponse, error) {
	out := new(licenses.GetLicenseResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateMetrics(ctx context.Context, in *metrics.CreateMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodMetrics(ctx context.Context, in *metrics.CreatePodMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreatePodMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerMetrics(ctx context.Context, in *metrics.CreateControllerMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateControllerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplicationMetrics(ctx context.Context, in *metrics.CreateApplicationMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateApplicationMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespaceMetrics(ctx context.Context, in *metrics.CreateNamespaceMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNamespaceMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodeMetrics(ctx context.Context, in *metrics.CreateNodeMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNodeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusterMetrics(ctx context.Context, in *metrics.CreateClusterMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateClusterMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListMetrics(ctx context.Context, in *metrics.ListMetricsRequest, opts ...grpc.CallOption) (*metrics.ListMetricsResponse, error) {
	out := new(metrics.ListMetricsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodMetrics(ctx context.Context, in *metrics.ListPodMetricsRequest, opts ...grpc.CallOption) (*metrics.ListPodMetricsResponse, error) {
	out := new(metrics.ListPodMetricsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListPodMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerMetrics(ctx context.Context, in *metrics.ListControllerMetricsRequest, opts ...grpc.CallOption) (*metrics.ListControllerMetricsResponse, error) {
	out := new(metrics.ListControllerMetricsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListControllerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplicationMetrics(ctx context.Context, in *metrics.ListApplicationMetricsRequest, opts ...grpc.CallOption) (*metrics.ListApplicationMetricsResponse, error) {
	out := new(metrics.ListApplicationMetricsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListApplicationMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespaceMetrics(ctx context.Context, in *metrics.ListNamespaceMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNamespaceMetricsResponse, error) {
	out := new(metrics.ListNamespaceMetricsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNamespaceMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodeMetrics(ctx context.Context, in *metrics.ListNodeMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNodeMetricsResponse, error) {
	out := new(metrics.ListNodeMetricsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNodeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusterMetrics(ctx context.Context, in *metrics.ListClusterMetricsRequest, opts ...grpc.CallOption) (*metrics.ListClusterMetricsResponse, error) {
	out := new(metrics.ListClusterMetricsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListClusterMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePlannings(ctx context.Context, in *plannings.CreatePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreatePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodPlannings(ctx context.Context, in *plannings.CreatePodPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreatePodPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerPlannings(ctx context.Context, in *plannings.CreateControllerPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateControllerPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplicationPlannings(ctx context.Context, in *plannings.CreateApplicationPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateApplicationPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespacePlannings(ctx context.Context, in *plannings.CreateNamespacePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNamespacePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodePlannings(ctx context.Context, in *plannings.CreateNodePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNodePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusterPlannings(ctx context.Context, in *plannings.CreateClusterPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateClusterPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPlannings(ctx context.Context, in *plannings.ListPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListPlanningsResponse, error) {
	out := new(plannings.ListPlanningsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodPlannings(ctx context.Context, in *plannings.ListPodPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListPodPlanningsResponse, error) {
	out := new(plannings.ListPodPlanningsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListPodPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerPlannings(ctx context.Context, in *plannings.ListControllerPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListControllerPlanningsResponse, error) {
	out := new(plannings.ListControllerPlanningsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListControllerPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplicationPlannings(ctx context.Context, in *plannings.ListApplicationPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListApplicationPlanningsResponse, error) {
	out := new(plannings.ListApplicationPlanningsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListApplicationPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespacePlannings(ctx context.Context, in *plannings.ListNamespacePlanningsRequest, opts ...grpc.CallOption) (*plannings.ListNamespacePlanningsResponse, error) {
	out := new(plannings.ListNamespacePlanningsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNamespacePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodePlannings(ctx context.Context, in *plannings.ListNodePlanningsRequest, opts ...grpc.CallOption) (*plannings.ListNodePlanningsResponse, error) {
	out := new(plannings.ListNodePlanningsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNodePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusterPlannings(ctx context.Context, in *plannings.ListClusterPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListClusterPlanningsResponse, error) {
	out := new(plannings.ListClusterPlanningsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListClusterPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePredictions(ctx context.Context, in *predictions.CreatePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreatePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodPredictions(ctx context.Context, in *predictions.CreatePodPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreatePodPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerPredictions(ctx context.Context, in *predictions.CreateControllerPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateControllerPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplicationPredictions(ctx context.Context, in *predictions.CreateApplicationPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateApplicationPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespacePredictions(ctx context.Context, in *predictions.CreateNamespacePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNamespacePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodePredictions(ctx context.Context, in *predictions.CreateNodePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNodePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusterPredictions(ctx context.Context, in *predictions.CreateClusterPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateClusterPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPredictions(ctx context.Context, in *predictions.ListPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListPredictionsResponse, error) {
	out := new(predictions.ListPredictionsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodPredictions(ctx context.Context, in *predictions.ListPodPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListPodPredictionsResponse, error) {
	out := new(predictions.ListPodPredictionsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListPodPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerPredictions(ctx context.Context, in *predictions.ListControllerPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListControllerPredictionsResponse, error) {
	out := new(predictions.ListControllerPredictionsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListControllerPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplicationPredictions(ctx context.Context, in *predictions.ListApplicationPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListApplicationPredictionsResponse, error) {
	out := new(predictions.ListApplicationPredictionsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListApplicationPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespacePredictions(ctx context.Context, in *predictions.ListNamespacePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNamespacePredictionsResponse, error) {
	out := new(predictions.ListNamespacePredictionsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNamespacePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodePredictions(ctx context.Context, in *predictions.ListNodePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNodePredictionsResponse, error) {
	out := new(predictions.ListNodePredictionsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNodePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusterPredictions(ctx context.Context, in *predictions.ListClusterPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListClusterPredictionsResponse, error) {
	out := new(predictions.ListClusterPredictionsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListClusterPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ReadRawdata(ctx context.Context, in *rawdata.ReadRawdataRequest, opts ...grpc.CallOption) (*rawdata.ReadRawdataResponse, error) {
	out := new(rawdata.ReadRawdataResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ReadRawdata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) WriteRawdata(ctx context.Context, in *rawdata.WriteRawdataRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/WriteRawdata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateRecommendations(ctx context.Context, in *recommendations.CreateRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodRecommendations(ctx context.Context, in *recommendations.CreatePodRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreatePodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerRecommendations(ctx context.Context, in *recommendations.CreateControllerRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateControllerRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplicationRecommendations(ctx context.Context, in *recommendations.CreateApplicationRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateApplicationRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespaceRecommendations(ctx context.Context, in *recommendations.CreateNamespaceRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNamespaceRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodeRecommendations(ctx context.Context, in *recommendations.CreateNodeRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNodeRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusterRecommendations(ctx context.Context, in *recommendations.CreateClusterRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateClusterRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListRecommendations(ctx context.Context, in *recommendations.ListRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListRecommendationsResponse, error) {
	out := new(recommendations.ListRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error) {
	out := new(recommendations.ListPodRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListPodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListAvailablePodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error) {
	out := new(recommendations.ListPodRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListAvailablePodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerRecommendations(ctx context.Context, in *recommendations.ListControllerRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListControllerRecommendationsResponse, error) {
	out := new(recommendations.ListControllerRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListControllerRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplicationRecommendations(ctx context.Context, in *recommendations.ListApplicationRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListApplicationRecommendationsResponse, error) {
	out := new(recommendations.ListApplicationRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListApplicationRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespaceRecommendations(ctx context.Context, in *recommendations.ListNamespaceRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListNamespaceRecommendationsResponse, error) {
	out := new(recommendations.ListNamespaceRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNamespaceRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodeRecommendations(ctx context.Context, in *recommendations.ListNodeRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListNodeRecommendationsResponse, error) {
	out := new(recommendations.ListNodeRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNodeRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusterRecommendations(ctx context.Context, in *recommendations.ListClusterRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListClusterRecommendationsResponse, error) {
	out := new(recommendations.ListClusterRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListClusterRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePods(ctx context.Context, in *resources.CreatePodsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreatePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllers(ctx context.Context, in *resources.CreateControllersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplications(ctx context.Context, in *resources.CreateApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespaces(ctx context.Context, in *resources.CreateNamespacesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodes(ctx context.Context, in *resources.CreateNodesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusters(ctx context.Context, in *resources.CreateClustersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPods(ctx context.Context, in *resources.ListPodsRequest, opts ...grpc.CallOption) (*resources.ListPodsResponse, error) {
	out := new(resources.ListPodsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllers(ctx context.Context, in *resources.ListControllersRequest, opts ...grpc.CallOption) (*resources.ListControllersResponse, error) {
	out := new(resources.ListControllersResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplications(ctx context.Context, in *resources.ListApplicationsRequest, opts ...grpc.CallOption) (*resources.ListApplicationsResponse, error) {
	out := new(resources.ListApplicationsResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespaces(ctx context.Context, in *resources.ListNamespacesRequest, opts ...grpc.CallOption) (*resources.ListNamespacesResponse, error) {
	out := new(resources.ListNamespacesResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodes(ctx context.Context, in *resources.ListNodesRequest, opts ...grpc.CallOption) (*resources.ListNodesResponse, error) {
	out := new(resources.ListNodesResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusters(ctx context.Context, in *resources.ListClustersRequest, opts ...grpc.CallOption) (*resources.ListClustersResponse, error) {
	out := new(resources.ListClustersResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeletePods(ctx context.Context, in *resources.DeletePodsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeletePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteControllers(ctx context.Context, in *resources.DeleteControllersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteApplications(ctx context.Context, in *resources.DeleteApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteNamespaces(ctx context.Context, in *resources.DeleteNamespacesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteNodes(ctx context.Context, in *resources.DeleteNodesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteClusters(ctx context.Context, in *resources.DeleteClustersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateSchemas(ctx context.Context, in *schemas.CreateSchemasRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListSchemas(ctx context.Context, in *schemas.ListSchemasRequest, opts ...grpc.CallOption) (*schemas.ListSchemasResponse, error) {
	out := new(schemas.ListSchemasResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteSchemas(ctx context.Context, in *schemas.DeleteSchemasRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/DeleteSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateSimulatedSchedulingScores(ctx context.Context, in *scores.CreateSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/CreateSimulatedSchedulingScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListSimulatedSchedulingScores(ctx context.Context, in *scores.ListSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*scores.ListSimulatedSchedulingScoresResponse, error) {
	out := new(scores.ListSimulatedSchedulingScoresResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListSimulatedSchedulingScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeHosts(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListWeaveScopeHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopeHostDetails(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/GetWeaveScopeHostDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopePods(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListWeaveScopePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopePodDetails(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/GetWeaveScopePodDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainers(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListWeaveScopeContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainersByHostname(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListWeaveScopeContainersByHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainersByImage(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/ListWeaveScopeContainersByImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopeContainerDetails(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/prophetstor.api.datahub.DatahubService/GetWeaveScopeContainerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatahubServiceServer is the server API for DatahubService service.
type DatahubServiceServer interface {
	CreateApps(context.Context, *applications.CreateApplicationsRequest) (*status.Status, error)
	ListApps(context.Context, *applications.ListApplicationsRequest) (*applications.ListApplicationsResponse, error)
	DeleteApps(context.Context, *applications.DeleteApplicationsRequest) (*status.Status, error)
	// Used to read data based on alameda specific schemas
	ReadData(context.Context, *data.ReadDataRequest) (*data.ReadDataResponse, error)
	// Used to write data based on alameda specific schemas
	WriteData(context.Context, *data.WriteDataRequest) (*status.Status, error)
	// Used to delete data based on alameda specific schemas
	DeleteData(context.Context, *data.DeleteDataRequest) (*status.Status, error)
	// Used to write metadata based on alameda specific schemas
	WriteMeta(context.Context, *data.WriteMetaRequest) (*status.Status, error)
	// Used to create alameda specific events
	CreateEvents(context.Context, *events.CreateEventsRequest) (*status.Status, error)
	// Used to list alameda specific events
	ListEvents(context.Context, *events.ListEventsRequest) (*events.ListEventsResponse, error)
	// Used to create GPU predictions
	CreateGpuPredictions(context.Context, *gpu.CreateGpuPredictionsRequest) (*status.Status, error)
	// Used to list GPU need to be predicted
	ListGpus(context.Context, *gpu.ListGpusRequest) (*gpu.ListGpusResponse, error)
	// Used to list GPU metrics data
	ListGpuMetrics(context.Context, *gpu.ListGpuMetricsRequest) (*gpu.ListGpuMetricsResponse, error)
	// Used to list GPU predictions
	ListGpuPredictions(context.Context, *gpu.ListGpuPredictionsRequest) (*gpu.ListGpuPredictionsResponse, error)
	// Used to add a keycode
	AddKeycode(context.Context, *keycodes.AddKeycodeRequest) (*keycodes.AddKeycodeResponse, error)
	// Used to retrieve keycodes detailed information
	ListKeycodes(context.Context, *keycodes.ListKeycodesRequest) (*keycodes.ListKeycodesResponse, error)
	// Used to delete a keycode
	DeleteKeycode(context.Context, *keycodes.DeleteKeycodeRequest) (*status.Status, error)
	// Used to generate license registration data
	GenerateRegistrationData(context.Context, *empty.Empty) (*keycodes.GenerateRegistrationDataResponse, error)
	// Used to activate license signature data
	ActivateRegistrationData(context.Context, *keycodes.ActivateRegistrationDataRequest) (*status.Status, error)
	// Used to get datahub license information
	GetLicense(context.Context, *empty.Empty) (*licenses.GetLicenseResponse, error)
	CreateMetrics(context.Context, *metrics.CreateMetricsRequest) (*status.Status, error)
	CreatePodMetrics(context.Context, *metrics.CreatePodMetricsRequest) (*status.Status, error)
	CreateControllerMetrics(context.Context, *metrics.CreateControllerMetricsRequest) (*status.Status, error)
	CreateApplicationMetrics(context.Context, *metrics.CreateApplicationMetricsRequest) (*status.Status, error)
	CreateNamespaceMetrics(context.Context, *metrics.CreateNamespaceMetricsRequest) (*status.Status, error)
	CreateNodeMetrics(context.Context, *metrics.CreateNodeMetricsRequest) (*status.Status, error)
	CreateClusterMetrics(context.Context, *metrics.CreateClusterMetricsRequest) (*status.Status, error)
	ListMetrics(context.Context, *metrics.ListMetricsRequest) (*metrics.ListMetricsResponse, error)
	// Used to list pod metric data
	ListPodMetrics(context.Context, *metrics.ListPodMetricsRequest) (*metrics.ListPodMetricsResponse, error)
	// Used to list controller metric data
	ListControllerMetrics(context.Context, *metrics.ListControllerMetricsRequest) (*metrics.ListControllerMetricsResponse, error)
	// Used to list alameda scaler metric data
	ListApplicationMetrics(context.Context, *metrics.ListApplicationMetricsRequest) (*metrics.ListApplicationMetricsResponse, error)
	// Used to list namespace metric data
	ListNamespaceMetrics(context.Context, *metrics.ListNamespaceMetricsRequest) (*metrics.ListNamespaceMetricsResponse, error)
	// Used to list node metric data
	ListNodeMetrics(context.Context, *metrics.ListNodeMetricsRequest) (*metrics.ListNodeMetricsResponse, error)
	// Used to list cluster metric data
	ListClusterMetrics(context.Context, *metrics.ListClusterMetricsRequest) (*metrics.ListClusterMetricsResponse, error)
	// Used to check if datahub is still alive
	Ping(context.Context, *empty.Empty) (*status.Status, error)
	CreatePlannings(context.Context, *plannings.CreatePlanningsRequest) (*status.Status, error)
	CreatePodPlannings(context.Context, *plannings.CreatePodPlanningsRequest) (*status.Status, error)
	CreateControllerPlannings(context.Context, *plannings.CreateControllerPlanningsRequest) (*status.Status, error)
	CreateApplicationPlannings(context.Context, *plannings.CreateApplicationPlanningsRequest) (*status.Status, error)
	CreateNamespacePlannings(context.Context, *plannings.CreateNamespacePlanningsRequest) (*status.Status, error)
	CreateNodePlannings(context.Context, *plannings.CreateNodePlanningsRequest) (*status.Status, error)
	CreateClusterPlannings(context.Context, *plannings.CreateClusterPlanningsRequest) (*status.Status, error)
	ListPlannings(context.Context, *plannings.ListPlanningsRequest) (*plannings.ListPlanningsResponse, error)
	ListPodPlannings(context.Context, *plannings.ListPodPlanningsRequest) (*plannings.ListPodPlanningsResponse, error)
	ListControllerPlannings(context.Context, *plannings.ListControllerPlanningsRequest) (*plannings.ListControllerPlanningsResponse, error)
	ListApplicationPlannings(context.Context, *plannings.ListApplicationPlanningsRequest) (*plannings.ListApplicationPlanningsResponse, error)
	ListNamespacePlannings(context.Context, *plannings.ListNamespacePlanningsRequest) (*plannings.ListNamespacePlanningsResponse, error)
	ListNodePlannings(context.Context, *plannings.ListNodePlanningsRequest) (*plannings.ListNodePlanningsResponse, error)
	ListClusterPlannings(context.Context, *plannings.ListClusterPlanningsRequest) (*plannings.ListClusterPlanningsResponse, error)
	CreatePredictions(context.Context, *predictions.CreatePredictionsRequest) (*status.Status, error)
	// Used to create predictions of pods
	CreatePodPredictions(context.Context, *predictions.CreatePodPredictionsRequest) (*status.Status, error)
	// Used to create predictions of controllers
	CreateControllerPredictions(context.Context, *predictions.CreateControllerPredictionsRequest) (*status.Status, error)
	// Used to create predictions of alameda scalers
	CreateApplicationPredictions(context.Context, *predictions.CreateApplicationPredictionsRequest) (*status.Status, error)
	// Used to create predictions of namespaces
	CreateNamespacePredictions(context.Context, *predictions.CreateNamespacePredictionsRequest) (*status.Status, error)
	// Used to create predictions of nodes
	CreateNodePredictions(context.Context, *predictions.CreateNodePredictionsRequest) (*status.Status, error)
	// Used to create predictions of clusters
	CreateClusterPredictions(context.Context, *predictions.CreateClusterPredictionsRequest) (*status.Status, error)
	ListPredictions(context.Context, *predictions.ListPredictionsRequest) (*predictions.ListPredictionsResponse, error)
	// Used to list pod predictions
	ListPodPredictions(context.Context, *predictions.ListPodPredictionsRequest) (*predictions.ListPodPredictionsResponse, error)
	// Used to list controller predictions
	ListControllerPredictions(context.Context, *predictions.ListControllerPredictionsRequest) (*predictions.ListControllerPredictionsResponse, error)
	// Used to list alameda scaler predictions
	ListApplicationPredictions(context.Context, *predictions.ListApplicationPredictionsRequest) (*predictions.ListApplicationPredictionsResponse, error)
	// Used to list namespace predictions
	ListNamespacePredictions(context.Context, *predictions.ListNamespacePredictionsRequest) (*predictions.ListNamespacePredictionsResponse, error)
	// Used to list node predictions
	ListNodePredictions(context.Context, *predictions.ListNodePredictionsRequest) (*predictions.ListNodePredictionsResponse, error)
	// Used to list cluster predictions
	ListClusterPredictions(context.Context, *predictions.ListClusterPredictionsRequest) (*predictions.ListClusterPredictionsResponse, error)
	// Rawdata --------------------------------------------------
	ReadRawdata(context.Context, *rawdata.ReadRawdataRequest) (*rawdata.ReadRawdataResponse, error)
	WriteRawdata(context.Context, *rawdata.WriteRawdataRequest) (*status.Status, error)
	CreateRecommendations(context.Context, *recommendations.CreateRecommendationsRequest) (*status.Status, error)
	// Used to create recommendations of pods
	CreatePodRecommendations(context.Context, *recommendations.CreatePodRecommendationsRequest) (*status.Status, error)
	// Used to create recommendations of controllers
	CreateControllerRecommendations(context.Context, *recommendations.CreateControllerRecommendationsRequest) (*status.Status, error)
	// Used to create recommendations of alameda scalers
	CreateApplicationRecommendations(context.Context, *recommendations.CreateApplicationRecommendationsRequest) (*status.Status, error)
	// Used to create recommendations of namespaces
	CreateNamespaceRecommendations(context.Context, *recommendations.CreateNamespaceRecommendationsRequest) (*status.Status, error)
	// Used to create recommendations of nodes
	CreateNodeRecommendations(context.Context, *recommendations.CreateNodeRecommendationsRequest) (*status.Status, error)
	// Used to create recommendations of clusters
	CreateClusterRecommendations(context.Context, *recommendations.CreateClusterRecommendationsRequest) (*status.Status, error)
	ListRecommendations(context.Context, *recommendations.ListRecommendationsRequest) (*recommendations.ListRecommendationsResponse, error)
	// Used to list pod recommenations
	ListPodRecommendations(context.Context, *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error)
	// Used to list available pod recommenations
	ListAvailablePodRecommendations(context.Context, *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error)
	// Used to list controller recommenations
	ListControllerRecommendations(context.Context, *recommendations.ListControllerRecommendationsRequest) (*recommendations.ListControllerRecommendationsResponse, error)
	// Used to list alameda scaler recommenations
	ListApplicationRecommendations(context.Context, *recommendations.ListApplicationRecommendationsRequest) (*recommendations.ListApplicationRecommendationsResponse, error)
	// Used to list namespace recommenations
	ListNamespaceRecommendations(context.Context, *recommendations.ListNamespaceRecommendationsRequest) (*recommendations.ListNamespaceRecommendationsResponse, error)
	// Used to list node recommenations
	ListNodeRecommendations(context.Context, *recommendations.ListNodeRecommendationsRequest) (*recommendations.ListNodeRecommendationsResponse, error)
	// Used to list cluster recommenations
	ListClusterRecommendations(context.Context, *recommendations.ListClusterRecommendationsRequest) (*recommendations.ListClusterRecommendationsResponse, error)
	// Used to add pods that need to be predicted
	CreatePods(context.Context, *resources.CreatePodsRequest) (*status.Status, error)
	// Used to add controllers that need to be predicted
	CreateControllers(context.Context, *resources.CreateControllersRequest) (*status.Status, error)
	// Used to add alameda scalers that need to be predicted
	CreateApplications(context.Context, *resources.CreateApplicationsRequest) (*status.Status, error)
	// Used to add namespaces that need to be predicted
	CreateNamespaces(context.Context, *resources.CreateNamespacesRequest) (*status.Status, error)
	// Used to add nodes that need to be predicted
	CreateNodes(context.Context, *resources.CreateNodesRequest) (*status.Status, error)
	// Used to add clusters that need to be predicted
	CreateClusters(context.Context, *resources.CreateClustersRequest) (*status.Status, error)
	// Used to list pods need to be predicted
	ListPods(context.Context, *resources.ListPodsRequest) (*resources.ListPodsResponse, error)
	// Used to list contollers need to be predicted
	ListControllers(context.Context, *resources.ListControllersRequest) (*resources.ListControllersResponse, error)
	// Used to list alameda scalers need to be predicted
	ListApplications(context.Context, *resources.ListApplicationsRequest) (*resources.ListApplicationsResponse, error)
	// Used to list namespaces need to be predicted
	ListNamespaces(context.Context, *resources.ListNamespacesRequest) (*resources.ListNamespacesResponse, error)
	// Used to list nodes' information
	ListNodes(context.Context, *resources.ListNodesRequest) (*resources.ListNodesResponse, error)
	// Used to list clusters' information
	ListClusters(context.Context, *resources.ListClustersRequest) (*resources.ListClustersResponse, error)
	// Used to stop generating predictions for the pods
	DeletePods(context.Context, *resources.DeletePodsRequest) (*status.Status, error)
	// Used to stop generating predictions for the controllers
	DeleteControllers(context.Context, *resources.DeleteControllersRequest) (*status.Status, error)
	// Used to stop generating predictions for the applications
	DeleteApplications(context.Context, *resources.DeleteApplicationsRequest) (*status.Status, error)
	// Used to stop generating predictions for the namespaces
	DeleteNamespaces(context.Context, *resources.DeleteNamespacesRequest) (*status.Status, error)
	// Used to stop generating predictions for the nodes
	DeleteNodes(context.Context, *resources.DeleteNodesRequest) (*status.Status, error)
	// Used to stop generating predictions for the clusters
	DeleteClusters(context.Context, *resources.DeleteClustersRequest) (*status.Status, error)
	// Schemas --------------------------------------------------
	CreateSchemas(context.Context, *schemas.CreateSchemasRequest) (*status.Status, error)
	ListSchemas(context.Context, *schemas.ListSchemasRequest) (*schemas.ListSchemasResponse, error)
	DeleteSchemas(context.Context, *schemas.DeleteSchemasRequest) (*status.Status, error)
	// Scores --------------------------------------------------
	CreateSimulatedSchedulingScores(context.Context, *scores.CreateSimulatedSchedulingScoresRequest) (*status.Status, error)
	// Used to list system scores
	ListSimulatedSchedulingScores(context.Context, *scores.ListSimulatedSchedulingScoresRequest) (*scores.ListSimulatedSchedulingScoresResponse, error)
	// weave scope --------------------------------------------------
	ListWeaveScopeHosts(context.Context, *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeHostDetails(context.Context, *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopePods(context.Context, *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopePodDetails(context.Context, *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainers(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByHostname(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByImage(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeContainerDetails(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
}

// UnimplementedDatahubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatahubServiceServer struct {
}

func (*UnimplementedDatahubServiceServer) CreateApps(context.Context, *applications.CreateApplicationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApps not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApps(context.Context, *applications.ListApplicationsRequest) (*applications.ListApplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteApps(context.Context, *applications.DeleteApplicationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteApps not implemented")
}
func (*UnimplementedDatahubServiceServer) ReadData(context.Context, *data.ReadDataRequest) (*data.ReadDataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReadData not implemented")
}
func (*UnimplementedDatahubServiceServer) WriteData(context.Context, *data.WriteDataRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method WriteData not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteData(context.Context, *data.DeleteDataRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (*UnimplementedDatahubServiceServer) WriteMeta(context.Context, *data.WriteMetaRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method WriteMeta not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateEvents(context.Context, *events.CreateEventsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateEvents not implemented")
}
func (*UnimplementedDatahubServiceServer) ListEvents(context.Context, *events.ListEventsRequest) (*events.ListEventsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateGpuPredictions(context.Context, *gpu.CreateGpuPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateGpuPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpus(context.Context, *gpu.ListGpusRequest) (*gpu.ListGpusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpus not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpuMetrics(context.Context, *gpu.ListGpuMetricsRequest) (*gpu.ListGpuMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpuMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpuPredictions(context.Context, *gpu.ListGpuPredictionsRequest) (*gpu.ListGpuPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpuPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) AddKeycode(context.Context, *keycodes.AddKeycodeRequest) (*keycodes.AddKeycodeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method AddKeycode not implemented")
}
func (*UnimplementedDatahubServiceServer) ListKeycodes(context.Context, *keycodes.ListKeycodesRequest) (*keycodes.ListKeycodesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKeycodes not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteKeycode(context.Context, *keycodes.DeleteKeycodeRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteKeycode not implemented")
}
func (*UnimplementedDatahubServiceServer) GenerateRegistrationData(context.Context, *empty.Empty) (*keycodes.GenerateRegistrationDataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GenerateRegistrationData not implemented")
}
func (*UnimplementedDatahubServiceServer) ActivateRegistrationData(context.Context, *keycodes.ActivateRegistrationDataRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ActivateRegistrationData not implemented")
}
func (*UnimplementedDatahubServiceServer) GetLicense(context.Context, *empty.Empty) (*licenses.GetLicenseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateMetrics(context.Context, *metrics.CreateMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodMetrics(context.Context, *metrics.CreatePodMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerMetrics(context.Context, *metrics.CreateControllerMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplicationMetrics(context.Context, *metrics.CreateApplicationMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplicationMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespaceMetrics(context.Context, *metrics.CreateNamespaceMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespaceMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodeMetrics(context.Context, *metrics.CreateNodeMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodeMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusterMetrics(context.Context, *metrics.CreateClusterMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusterMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListMetrics(context.Context, *metrics.ListMetricsRequest) (*metrics.ListMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodMetrics(context.Context, *metrics.ListPodMetricsRequest) (*metrics.ListPodMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerMetrics(context.Context, *metrics.ListControllerMetricsRequest) (*metrics.ListControllerMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplicationMetrics(context.Context, *metrics.ListApplicationMetricsRequest) (*metrics.ListApplicationMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplicationMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespaceMetrics(context.Context, *metrics.ListNamespaceMetricsRequest) (*metrics.ListNamespaceMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespaceMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodeMetrics(context.Context, *metrics.ListNodeMetricsRequest) (*metrics.ListNodeMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodeMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusterMetrics(context.Context, *metrics.ListClusterMetricsRequest) (*metrics.ListClusterMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusterMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) Ping(context.Context, *empty.Empty) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePlannings(context.Context, *plannings.CreatePlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodPlannings(context.Context, *plannings.CreatePodPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerPlannings(context.Context, *plannings.CreateControllerPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplicationPlannings(context.Context, *plannings.CreateApplicationPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplicationPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespacePlannings(context.Context, *plannings.CreateNamespacePlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespacePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodePlannings(context.Context, *plannings.CreateNodePlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusterPlannings(context.Context, *plannings.CreateClusterPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusterPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPlannings(context.Context, *plannings.ListPlanningsRequest) (*plannings.ListPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodPlannings(context.Context, *plannings.ListPodPlanningsRequest) (*plannings.ListPodPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerPlannings(context.Context, *plannings.ListControllerPlanningsRequest) (*plannings.ListControllerPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplicationPlannings(context.Context, *plannings.ListApplicationPlanningsRequest) (*plannings.ListApplicationPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplicationPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespacePlannings(context.Context, *plannings.ListNamespacePlanningsRequest) (*plannings.ListNamespacePlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespacePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodePlannings(context.Context, *plannings.ListNodePlanningsRequest) (*plannings.ListNodePlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusterPlannings(context.Context, *plannings.ListClusterPlanningsRequest) (*plannings.ListClusterPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusterPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePredictions(context.Context, *predictions.CreatePredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodPredictions(context.Context, *predictions.CreatePodPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerPredictions(context.Context, *predictions.CreateControllerPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplicationPredictions(context.Context, *predictions.CreateApplicationPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplicationPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespacePredictions(context.Context, *predictions.CreateNamespacePredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespacePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodePredictions(context.Context, *predictions.CreateNodePredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusterPredictions(context.Context, *predictions.CreateClusterPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusterPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPredictions(context.Context, *predictions.ListPredictionsRequest) (*predictions.ListPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodPredictions(context.Context, *predictions.ListPodPredictionsRequest) (*predictions.ListPodPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerPredictions(context.Context, *predictions.ListControllerPredictionsRequest) (*predictions.ListControllerPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplicationPredictions(context.Context, *predictions.ListApplicationPredictionsRequest) (*predictions.ListApplicationPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplicationPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespacePredictions(context.Context, *predictions.ListNamespacePredictionsRequest) (*predictions.ListNamespacePredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespacePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodePredictions(context.Context, *predictions.ListNodePredictionsRequest) (*predictions.ListNodePredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusterPredictions(context.Context, *predictions.ListClusterPredictionsRequest) (*predictions.ListClusterPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusterPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ReadRawdata(context.Context, *rawdata.ReadRawdataRequest) (*rawdata.ReadRawdataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReadRawdata not implemented")
}
func (*UnimplementedDatahubServiceServer) WriteRawdata(context.Context, *rawdata.WriteRawdataRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method WriteRawdata not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateRecommendations(context.Context, *recommendations.CreateRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodRecommendations(context.Context, *recommendations.CreatePodRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerRecommendations(context.Context, *recommendations.CreateControllerRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplicationRecommendations(context.Context, *recommendations.CreateApplicationRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplicationRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespaceRecommendations(context.Context, *recommendations.CreateNamespaceRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespaceRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodeRecommendations(context.Context, *recommendations.CreateNodeRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodeRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusterRecommendations(context.Context, *recommendations.CreateClusterRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusterRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListRecommendations(context.Context, *recommendations.ListRecommendationsRequest) (*recommendations.ListRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodRecommendations(context.Context, *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListAvailablePodRecommendations(context.Context, *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAvailablePodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerRecommendations(context.Context, *recommendations.ListControllerRecommendationsRequest) (*recommendations.ListControllerRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplicationRecommendations(context.Context, *recommendations.ListApplicationRecommendationsRequest) (*recommendations.ListApplicationRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplicationRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespaceRecommendations(context.Context, *recommendations.ListNamespaceRecommendationsRequest) (*recommendations.ListNamespaceRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespaceRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodeRecommendations(context.Context, *recommendations.ListNodeRecommendationsRequest) (*recommendations.ListNodeRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodeRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusterRecommendations(context.Context, *recommendations.ListClusterRecommendationsRequest) (*recommendations.ListClusterRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusterRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePods(context.Context, *resources.CreatePodsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePods not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllers(context.Context, *resources.CreateControllersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplications(context.Context, *resources.CreateApplicationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplications not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespaces(context.Context, *resources.CreateNamespacesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespaces not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodes(context.Context, *resources.CreateNodesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusters(context.Context, *resources.CreateClustersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusters not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPods(context.Context, *resources.ListPodsRequest) (*resources.ListPodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllers(context.Context, *resources.ListControllersRequest) (*resources.ListControllersResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplications(context.Context, *resources.ListApplicationsRequest) (*resources.ListApplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespaces(context.Context, *resources.ListNamespacesRequest) (*resources.ListNamespacesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodes(context.Context, *resources.ListNodesRequest) (*resources.ListNodesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusters(context.Context, *resources.ListClustersRequest) (*resources.ListClustersResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (*UnimplementedDatahubServiceServer) DeletePods(context.Context, *resources.DeletePodsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePods not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteControllers(context.Context, *resources.DeleteControllersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteApplications(context.Context, *resources.DeleteApplicationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteApplications not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteNamespaces(context.Context, *resources.DeleteNamespacesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNamespaces not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteNodes(context.Context, *resources.DeleteNodesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteClusters(context.Context, *resources.DeleteClustersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteClusters not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateSchemas(context.Context, *schemas.CreateSchemasRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSchemas not implemented")
}
func (*UnimplementedDatahubServiceServer) ListSchemas(context.Context, *schemas.ListSchemasRequest) (*schemas.ListSchemasResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteSchemas(context.Context, *schemas.DeleteSchemasRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSchemas not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateSimulatedSchedulingScores(context.Context, *scores.CreateSimulatedSchedulingScoresRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSimulatedSchedulingScores not implemented")
}
func (*UnimplementedDatahubServiceServer) ListSimulatedSchedulingScores(context.Context, *scores.ListSimulatedSchedulingScoresRequest) (*scores.ListSimulatedSchedulingScoresResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSimulatedSchedulingScores not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeHosts(context.Context, *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeHosts not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopeHostDetails(context.Context, *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopeHostDetails not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopePods(context.Context, *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopePods not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopePodDetails(context.Context, *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopePodDetails not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainers(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainers not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainersByHostname(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainersByHostname not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainersByImage(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainersByImage not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopeContainerDetails(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopeContainerDetails not implemented")
}

func RegisterDatahubServiceServer(s *grpc.Server, srv DatahubServiceServer) {
	s.RegisterService(&_DatahubService_serviceDesc, srv)
}

func _DatahubService_CreateApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(applications.CreateApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApps(ctx, req.(*applications.CreateApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(applications.ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApps(ctx, req.(*applications.ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(applications.DeleteApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteApps(ctx, req.(*applications.DeleteApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ReadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(data.ReadDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ReadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ReadData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ReadData(ctx, req.(*data.ReadDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_WriteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(data.WriteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).WriteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/WriteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).WriteData(ctx, req.(*data.WriteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(data.DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteData(ctx, req.(*data.DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_WriteMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(data.WriteMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).WriteMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/WriteMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).WriteMeta(ctx, req.(*data.WriteMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.CreateEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateEvents(ctx, req.(*events.CreateEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListEvents(ctx, req.(*events.ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateGpuPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.CreateGpuPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateGpuPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateGpuPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateGpuPredictions(ctx, req.(*gpu.CreateGpuPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListGpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpus(ctx, req.(*gpu.ListGpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpuMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpuMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpuMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListGpuMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpuMetrics(ctx, req.(*gpu.ListGpuMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpuPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpuPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpuPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListGpuPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpuPredictions(ctx, req.(*gpu.ListGpuPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_AddKeycode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keycodes.AddKeycodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).AddKeycode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/AddKeycode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).AddKeycode(ctx, req.(*keycodes.AddKeycodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListKeycodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keycodes.ListKeycodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListKeycodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListKeycodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListKeycodes(ctx, req.(*keycodes.ListKeycodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteKeycode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keycodes.DeleteKeycodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteKeycode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteKeycode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteKeycode(ctx, req.(*keycodes.DeleteKeycodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GenerateRegistrationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GenerateRegistrationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/GenerateRegistrationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GenerateRegistrationData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ActivateRegistrationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keycodes.ActivateRegistrationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ActivateRegistrationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ActivateRegistrationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ActivateRegistrationData(ctx, req.(*keycodes.ActivateRegistrationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetLicense(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateMetrics(ctx, req.(*metrics.CreateMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreatePodMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreatePodMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodMetrics(ctx, req.(*metrics.CreatePodMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateControllerMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateControllerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerMetrics(ctx, req.(*metrics.CreateControllerMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplicationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateApplicationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplicationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateApplicationMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplicationMetrics(ctx, req.(*metrics.CreateApplicationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespaceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateNamespaceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespaceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNamespaceMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespaceMetrics(ctx, req.(*metrics.CreateNamespaceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNodeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodeMetrics(ctx, req.(*metrics.CreateNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusterMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateClusterMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusterMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateClusterMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusterMetrics(ctx, req.(*metrics.CreateClusterMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListMetrics(ctx, req.(*metrics.ListMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListPodMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListPodMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodMetrics(ctx, req.(*metrics.ListPodMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListControllerMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListControllerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerMetrics(ctx, req.(*metrics.ListControllerMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplicationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListApplicationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplicationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListApplicationMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplicationMetrics(ctx, req.(*metrics.ListApplicationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespaceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListNamespaceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespaceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNamespaceMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespaceMetrics(ctx, req.(*metrics.ListNamespaceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNodeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodeMetrics(ctx, req.(*metrics.ListNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusterMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListClusterMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusterMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListClusterMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusterMetrics(ctx, req.(*metrics.ListClusterMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreatePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreatePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePlannings(ctx, req.(*plannings.CreatePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreatePodPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreatePodPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodPlannings(ctx, req.(*plannings.CreatePodPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateControllerPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateControllerPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerPlannings(ctx, req.(*plannings.CreateControllerPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplicationPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateApplicationPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplicationPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateApplicationPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplicationPlannings(ctx, req.(*plannings.CreateApplicationPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespacePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateNamespacePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespacePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNamespacePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespacePlannings(ctx, req.(*plannings.CreateNamespacePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateNodePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNodePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodePlannings(ctx, req.(*plannings.CreateNodePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusterPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateClusterPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusterPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateClusterPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusterPlannings(ctx, req.(*plannings.CreateClusterPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPlannings(ctx, req.(*plannings.ListPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListPodPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListPodPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodPlannings(ctx, req.(*plannings.ListPodPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListControllerPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListControllerPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerPlannings(ctx, req.(*plannings.ListControllerPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplicationPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListApplicationPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplicationPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListApplicationPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplicationPlannings(ctx, req.(*plannings.ListApplicationPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespacePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListNamespacePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespacePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNamespacePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespacePlannings(ctx, req.(*plannings.ListNamespacePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListNodePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNodePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodePlannings(ctx, req.(*plannings.ListNodePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusterPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListClusterPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusterPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListClusterPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusterPlannings(ctx, req.(*plannings.ListClusterPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreatePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreatePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePredictions(ctx, req.(*predictions.CreatePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreatePodPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreatePodPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodPredictions(ctx, req.(*predictions.CreatePodPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateControllerPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateControllerPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerPredictions(ctx, req.(*predictions.CreateControllerPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplicationPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateApplicationPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplicationPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateApplicationPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplicationPredictions(ctx, req.(*predictions.CreateApplicationPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespacePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateNamespacePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespacePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNamespacePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespacePredictions(ctx, req.(*predictions.CreateNamespacePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateNodePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNodePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodePredictions(ctx, req.(*predictions.CreateNodePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusterPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateClusterPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusterPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateClusterPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusterPredictions(ctx, req.(*predictions.CreateClusterPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPredictions(ctx, req.(*predictions.ListPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListPodPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListPodPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodPredictions(ctx, req.(*predictions.ListPodPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListControllerPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListControllerPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerPredictions(ctx, req.(*predictions.ListControllerPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplicationPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListApplicationPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplicationPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListApplicationPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplicationPredictions(ctx, req.(*predictions.ListApplicationPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespacePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListNamespacePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespacePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNamespacePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespacePredictions(ctx, req.(*predictions.ListNamespacePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListNodePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNodePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodePredictions(ctx, req.(*predictions.ListNodePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusterPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListClusterPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusterPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListClusterPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusterPredictions(ctx, req.(*predictions.ListClusterPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ReadRawdata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rawdata.ReadRawdataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ReadRawdata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ReadRawdata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ReadRawdata(ctx, req.(*rawdata.ReadRawdataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_WriteRawdata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rawdata.WriteRawdataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).WriteRawdata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/WriteRawdata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).WriteRawdata(ctx, req.(*rawdata.WriteRawdataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateRecommendations(ctx, req.(*recommendations.CreateRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreatePodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreatePodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodRecommendations(ctx, req.(*recommendations.CreatePodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateControllerRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateControllerRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerRecommendations(ctx, req.(*recommendations.CreateControllerRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplicationRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateApplicationRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplicationRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateApplicationRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplicationRecommendations(ctx, req.(*recommendations.CreateApplicationRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespaceRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateNamespaceRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespaceRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNamespaceRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespaceRecommendations(ctx, req.(*recommendations.CreateNamespaceRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodeRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateNodeRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodeRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNodeRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodeRecommendations(ctx, req.(*recommendations.CreateNodeRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusterRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateClusterRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusterRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateClusterRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusterRecommendations(ctx, req.(*recommendations.CreateClusterRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListRecommendations(ctx, req.(*recommendations.ListRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListPodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListPodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodRecommendations(ctx, req.(*recommendations.ListPodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListAvailablePodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListPodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListAvailablePodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListAvailablePodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListAvailablePodRecommendations(ctx, req.(*recommendations.ListPodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListControllerRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListControllerRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerRecommendations(ctx, req.(*recommendations.ListControllerRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplicationRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListApplicationRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplicationRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListApplicationRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplicationRecommendations(ctx, req.(*recommendations.ListApplicationRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespaceRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListNamespaceRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespaceRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNamespaceRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespaceRecommendations(ctx, req.(*recommendations.ListNamespaceRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodeRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListNodeRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodeRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNodeRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodeRecommendations(ctx, req.(*recommendations.ListNodeRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusterRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListClusterRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusterRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListClusterRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusterRecommendations(ctx, req.(*recommendations.ListClusterRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreatePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreatePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePods(ctx, req.(*resources.CreatePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllers(ctx, req.(*resources.CreateControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplications(ctx, req.(*resources.CreateApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespaces(ctx, req.(*resources.CreateNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodes(ctx, req.(*resources.CreateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusters(ctx, req.(*resources.CreateClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPods(ctx, req.(*resources.ListPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllers(ctx, req.(*resources.ListControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplications(ctx, req.(*resources.ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespaces(ctx, req.(*resources.ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodes(ctx, req.(*resources.ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusters(ctx, req.(*resources.ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeletePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeletePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeletePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeletePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeletePods(ctx, req.(*resources.DeletePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteControllers(ctx, req.(*resources.DeleteControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteApplications(ctx, req.(*resources.DeleteApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteNamespaces(ctx, req.(*resources.DeleteNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteNodes(ctx, req.(*resources.DeleteNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteClusters(ctx, req.(*resources.DeleteClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schemas.CreateSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateSchemas(ctx, req.(*schemas.CreateSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schemas.ListSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListSchemas(ctx, req.(*schemas.ListSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schemas.DeleteSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/DeleteSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteSchemas(ctx, req.(*schemas.DeleteSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateSimulatedSchedulingScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scores.CreateSimulatedSchedulingScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateSimulatedSchedulingScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/CreateSimulatedSchedulingScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateSimulatedSchedulingScores(ctx, req.(*scores.CreateSimulatedSchedulingScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListSimulatedSchedulingScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scores.ListSimulatedSchedulingScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListSimulatedSchedulingScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListSimulatedSchedulingScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListSimulatedSchedulingScores(ctx, req.(*scores.ListSimulatedSchedulingScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListWeaveScopeHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeHosts(ctx, req.(*weavescope.ListWeaveScopeHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopeHostDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopeHostDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/GetWeaveScopeHostDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopeHostDetails(ctx, req.(*weavescope.ListWeaveScopeHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListWeaveScopePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopePods(ctx, req.(*weavescope.ListWeaveScopePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopePodDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopePodDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/GetWeaveScopePodDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopePodDetails(ctx, req.(*weavescope.ListWeaveScopePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListWeaveScopeContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainers(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainersByHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListWeaveScopeContainersByHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByHostname(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainersByImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/ListWeaveScopeContainersByImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByImage(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopeContainerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopeContainerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prophetstor.api.datahub.DatahubService/GetWeaveScopeContainerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopeContainerDetails(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatahubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "prophetstor.api.datahub.DatahubService",
	HandlerType: (*DatahubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApps",
			Handler:    _DatahubService_CreateApps_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _DatahubService_ListApps_Handler,
		},
		{
			MethodName: "DeleteApps",
			Handler:    _DatahubService_DeleteApps_Handler,
		},
		{
			MethodName: "ReadData",
			Handler:    _DatahubService_ReadData_Handler,
		},
		{
			MethodName: "WriteData",
			Handler:    _DatahubService_WriteData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _DatahubService_DeleteData_Handler,
		},
		{
			MethodName: "WriteMeta",
			Handler:    _DatahubService_WriteMeta_Handler,
		},
		{
			MethodName: "CreateEvents",
			Handler:    _DatahubService_CreateEvents_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _DatahubService_ListEvents_Handler,
		},
		{
			MethodName: "CreateGpuPredictions",
			Handler:    _DatahubService_CreateGpuPredictions_Handler,
		},
		{
			MethodName: "ListGpus",
			Handler:    _DatahubService_ListGpus_Handler,
		},
		{
			MethodName: "ListGpuMetrics",
			Handler:    _DatahubService_ListGpuMetrics_Handler,
		},
		{
			MethodName: "ListGpuPredictions",
			Handler:    _DatahubService_ListGpuPredictions_Handler,
		},
		{
			MethodName: "AddKeycode",
			Handler:    _DatahubService_AddKeycode_Handler,
		},
		{
			MethodName: "ListKeycodes",
			Handler:    _DatahubService_ListKeycodes_Handler,
		},
		{
			MethodName: "DeleteKeycode",
			Handler:    _DatahubService_DeleteKeycode_Handler,
		},
		{
			MethodName: "GenerateRegistrationData",
			Handler:    _DatahubService_GenerateRegistrationData_Handler,
		},
		{
			MethodName: "ActivateRegistrationData",
			Handler:    _DatahubService_ActivateRegistrationData_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _DatahubService_GetLicense_Handler,
		},
		{
			MethodName: "CreateMetrics",
			Handler:    _DatahubService_CreateMetrics_Handler,
		},
		{
			MethodName: "CreatePodMetrics",
			Handler:    _DatahubService_CreatePodMetrics_Handler,
		},
		{
			MethodName: "CreateControllerMetrics",
			Handler:    _DatahubService_CreateControllerMetrics_Handler,
		},
		{
			MethodName: "CreateApplicationMetrics",
			Handler:    _DatahubService_CreateApplicationMetrics_Handler,
		},
		{
			MethodName: "CreateNamespaceMetrics",
			Handler:    _DatahubService_CreateNamespaceMetrics_Handler,
		},
		{
			MethodName: "CreateNodeMetrics",
			Handler:    _DatahubService_CreateNodeMetrics_Handler,
		},
		{
			MethodName: "CreateClusterMetrics",
			Handler:    _DatahubService_CreateClusterMetrics_Handler,
		},
		{
			MethodName: "ListMetrics",
			Handler:    _DatahubService_ListMetrics_Handler,
		},
		{
			MethodName: "ListPodMetrics",
			Handler:    _DatahubService_ListPodMetrics_Handler,
		},
		{
			MethodName: "ListControllerMetrics",
			Handler:    _DatahubService_ListControllerMetrics_Handler,
		},
		{
			MethodName: "ListApplicationMetrics",
			Handler:    _DatahubService_ListApplicationMetrics_Handler,
		},
		{
			MethodName: "ListNamespaceMetrics",
			Handler:    _DatahubService_ListNamespaceMetrics_Handler,
		},
		{
			MethodName: "ListNodeMetrics",
			Handler:    _DatahubService_ListNodeMetrics_Handler,
		},
		{
			MethodName: "ListClusterMetrics",
			Handler:    _DatahubService_ListClusterMetrics_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DatahubService_Ping_Handler,
		},
		{
			MethodName: "CreatePlannings",
			Handler:    _DatahubService_CreatePlannings_Handler,
		},
		{
			MethodName: "CreatePodPlannings",
			Handler:    _DatahubService_CreatePodPlannings_Handler,
		},
		{
			MethodName: "CreateControllerPlannings",
			Handler:    _DatahubService_CreateControllerPlannings_Handler,
		},
		{
			MethodName: "CreateApplicationPlannings",
			Handler:    _DatahubService_CreateApplicationPlannings_Handler,
		},
		{
			MethodName: "CreateNamespacePlannings",
			Handler:    _DatahubService_CreateNamespacePlannings_Handler,
		},
		{
			MethodName: "CreateNodePlannings",
			Handler:    _DatahubService_CreateNodePlannings_Handler,
		},
		{
			MethodName: "CreateClusterPlannings",
			Handler:    _DatahubService_CreateClusterPlannings_Handler,
		},
		{
			MethodName: "ListPlannings",
			Handler:    _DatahubService_ListPlannings_Handler,
		},
		{
			MethodName: "ListPodPlannings",
			Handler:    _DatahubService_ListPodPlannings_Handler,
		},
		{
			MethodName: "ListControllerPlannings",
			Handler:    _DatahubService_ListControllerPlannings_Handler,
		},
		{
			MethodName: "ListApplicationPlannings",
			Handler:    _DatahubService_ListApplicationPlannings_Handler,
		},
		{
			MethodName: "ListNamespacePlannings",
			Handler:    _DatahubService_ListNamespacePlannings_Handler,
		},
		{
			MethodName: "ListNodePlannings",
			Handler:    _DatahubService_ListNodePlannings_Handler,
		},
		{
			MethodName: "ListClusterPlannings",
			Handler:    _DatahubService_ListClusterPlannings_Handler,
		},
		{
			MethodName: "CreatePredictions",
			Handler:    _DatahubService_CreatePredictions_Handler,
		},
		{
			MethodName: "CreatePodPredictions",
			Handler:    _DatahubService_CreatePodPredictions_Handler,
		},
		{
			MethodName: "CreateControllerPredictions",
			Handler:    _DatahubService_CreateControllerPredictions_Handler,
		},
		{
			MethodName: "CreateApplicationPredictions",
			Handler:    _DatahubService_CreateApplicationPredictions_Handler,
		},
		{
			MethodName: "CreateNamespacePredictions",
			Handler:    _DatahubService_CreateNamespacePredictions_Handler,
		},
		{
			MethodName: "CreateNodePredictions",
			Handler:    _DatahubService_CreateNodePredictions_Handler,
		},
		{
			MethodName: "CreateClusterPredictions",
			Handler:    _DatahubService_CreateClusterPredictions_Handler,
		},
		{
			MethodName: "ListPredictions",
			Handler:    _DatahubService_ListPredictions_Handler,
		},
		{
			MethodName: "ListPodPredictions",
			Handler:    _DatahubService_ListPodPredictions_Handler,
		},
		{
			MethodName: "ListControllerPredictions",
			Handler:    _DatahubService_ListControllerPredictions_Handler,
		},
		{
			MethodName: "ListApplicationPredictions",
			Handler:    _DatahubService_ListApplicationPredictions_Handler,
		},
		{
			MethodName: "ListNamespacePredictions",
			Handler:    _DatahubService_ListNamespacePredictions_Handler,
		},
		{
			MethodName: "ListNodePredictions",
			Handler:    _DatahubService_ListNodePredictions_Handler,
		},
		{
			MethodName: "ListClusterPredictions",
			Handler:    _DatahubService_ListClusterPredictions_Handler,
		},
		{
			MethodName: "ReadRawdata",
			Handler:    _DatahubService_ReadRawdata_Handler,
		},
		{
			MethodName: "WriteRawdata",
			Handler:    _DatahubService_WriteRawdata_Handler,
		},
		{
			MethodName: "CreateRecommendations",
			Handler:    _DatahubService_CreateRecommendations_Handler,
		},
		{
			MethodName: "CreatePodRecommendations",
			Handler:    _DatahubService_CreatePodRecommendations_Handler,
		},
		{
			MethodName: "CreateControllerRecommendations",
			Handler:    _DatahubService_CreateControllerRecommendations_Handler,
		},
		{
			MethodName: "CreateApplicationRecommendations",
			Handler:    _DatahubService_CreateApplicationRecommendations_Handler,
		},
		{
			MethodName: "CreateNamespaceRecommendations",
			Handler:    _DatahubService_CreateNamespaceRecommendations_Handler,
		},
		{
			MethodName: "CreateNodeRecommendations",
			Handler:    _DatahubService_CreateNodeRecommendations_Handler,
		},
		{
			MethodName: "CreateClusterRecommendations",
			Handler:    _DatahubService_CreateClusterRecommendations_Handler,
		},
		{
			MethodName: "ListRecommendations",
			Handler:    _DatahubService_ListRecommendations_Handler,
		},
		{
			MethodName: "ListPodRecommendations",
			Handler:    _DatahubService_ListPodRecommendations_Handler,
		},
		{
			MethodName: "ListAvailablePodRecommendations",
			Handler:    _DatahubService_ListAvailablePodRecommendations_Handler,
		},
		{
			MethodName: "ListControllerRecommendations",
			Handler:    _DatahubService_ListControllerRecommendations_Handler,
		},
		{
			MethodName: "ListApplicationRecommendations",
			Handler:    _DatahubService_ListApplicationRecommendations_Handler,
		},
		{
			MethodName: "ListNamespaceRecommendations",
			Handler:    _DatahubService_ListNamespaceRecommendations_Handler,
		},
		{
			MethodName: "ListNodeRecommendations",
			Handler:    _DatahubService_ListNodeRecommendations_Handler,
		},
		{
			MethodName: "ListClusterRecommendations",
			Handler:    _DatahubService_ListClusterRecommendations_Handler,
		},
		{
			MethodName: "CreatePods",
			Handler:    _DatahubService_CreatePods_Handler,
		},
		{
			MethodName: "CreateControllers",
			Handler:    _DatahubService_CreateControllers_Handler,
		},
		{
			MethodName: "CreateApplications",
			Handler:    _DatahubService_CreateApplications_Handler,
		},
		{
			MethodName: "CreateNamespaces",
			Handler:    _DatahubService_CreateNamespaces_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _DatahubService_CreateNodes_Handler,
		},
		{
			MethodName: "CreateClusters",
			Handler:    _DatahubService_CreateClusters_Handler,
		},
		{
			MethodName: "ListPods",
			Handler:    _DatahubService_ListPods_Handler,
		},
		{
			MethodName: "ListControllers",
			Handler:    _DatahubService_ListControllers_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _DatahubService_ListApplications_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _DatahubService_ListNamespaces_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _DatahubService_ListNodes_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _DatahubService_ListClusters_Handler,
		},
		{
			MethodName: "DeletePods",
			Handler:    _DatahubService_DeletePods_Handler,
		},
		{
			MethodName: "DeleteControllers",
			Handler:    _DatahubService_DeleteControllers_Handler,
		},
		{
			MethodName: "DeleteApplications",
			Handler:    _DatahubService_DeleteApplications_Handler,
		},
		{
			MethodName: "DeleteNamespaces",
			Handler:    _DatahubService_DeleteNamespaces_Handler,
		},
		{
			MethodName: "DeleteNodes",
			Handler:    _DatahubService_DeleteNodes_Handler,
		},
		{
			MethodName: "DeleteClusters",
			Handler:    _DatahubService_DeleteClusters_Handler,
		},
		{
			MethodName: "CreateSchemas",
			Handler:    _DatahubService_CreateSchemas_Handler,
		},
		{
			MethodName: "ListSchemas",
			Handler:    _DatahubService_ListSchemas_Handler,
		},
		{
			MethodName: "DeleteSchemas",
			Handler:    _DatahubService_DeleteSchemas_Handler,
		},
		{
			MethodName: "CreateSimulatedSchedulingScores",
			Handler:    _DatahubService_CreateSimulatedSchedulingScores_Handler,
		},
		{
			MethodName: "ListSimulatedSchedulingScores",
			Handler:    _DatahubService_ListSimulatedSchedulingScores_Handler,
		},
		{
			MethodName: "ListWeaveScopeHosts",
			Handler:    _DatahubService_ListWeaveScopeHosts_Handler,
		},
		{
			MethodName: "GetWeaveScopeHostDetails",
			Handler:    _DatahubService_GetWeaveScopeHostDetails_Handler,
		},
		{
			MethodName: "ListWeaveScopePods",
			Handler:    _DatahubService_ListWeaveScopePods_Handler,
		},
		{
			MethodName: "GetWeaveScopePodDetails",
			Handler:    _DatahubService_GetWeaveScopePodDetails_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainers",
			Handler:    _DatahubService_ListWeaveScopeContainers_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainersByHostname",
			Handler:    _DatahubService_ListWeaveScopeContainersByHostname_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainersByImage",
			Handler:    _DatahubService_ListWeaveScopeContainersByImage_Handler,
		},
		{
			MethodName: "GetWeaveScopeContainerDetails",
			Handler:    _DatahubService_GetWeaveScopeContainerDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prophetstor/api/datahub/server.proto",
}
