// source: prophetstor/api/datahub/rawdata/rawdata.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var prophetstor_api_datahub_common_rawdata_pb = require('../../../../prophetstor/api/datahub/common/rawdata_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_common_rawdata_pb);
var prophetstor_api_datahub_common_types_pb = require('../../../../prophetstor/api/datahub/common/types_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_common_types_pb);
var prophetstor_api_datahub_rawdata_types_pb = require('../../../../prophetstor/api/datahub/rawdata/types_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_rawdata_types_pb);
goog.exportSymbol('proto.prophetstor.api.datahub.rawdata.ReadRawdata', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.rawdata.WriteRawdata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prophetstor.api.datahub.rawdata.ReadRawdata.repeatedFields_, null);
};
goog.inherits(proto.prophetstor.api.datahub.rawdata.ReadRawdata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.rawdata.ReadRawdata.displayName = 'proto.prophetstor.api.datahub.rawdata.ReadRawdata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prophetstor.api.datahub.rawdata.WriteRawdata.repeatedFields_, null);
};
goog.inherits(proto.prophetstor.api.datahub.rawdata.WriteRawdata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.rawdata.WriteRawdata.displayName = 'proto.prophetstor.api.datahub.rawdata.WriteRawdata';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.rawdata.ReadRawdata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && prophetstor_api_datahub_rawdata_types_pb.Query.toObject(includeInstance, f),
    columnsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    prophetstor_api_datahub_common_rawdata_pb.Group.toObject, includeInstance),
    rawdata: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.rawdata.ReadRawdata;
  return proto.prophetstor.api.datahub.rawdata.ReadRawdata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prophetstor_api_datahub_rawdata_types_pb.Query;
      reader.readMessage(value,prophetstor_api_datahub_rawdata_types_pb.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumns(value);
      break;
    case 3:
      var value = new prophetstor_api_datahub_common_rawdata_pb.Group;
      reader.readMessage(value,prophetstor_api_datahub_common_rawdata_pb.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.rawdata.ReadRawdata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prophetstor_api_datahub_rawdata_types_pb.Query.serializeBinaryToWriter
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      prophetstor_api_datahub_common_rawdata_pb.Group.serializeBinaryToWriter
    );
  }
  f = message.getRawdata();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Query query = 1;
 * @return {?proto.prophetstor.api.datahub.rawdata.Query}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.getQuery = function() {
  return /** @type{?proto.prophetstor.api.datahub.rawdata.Query} */ (
    jspb.Message.getWrapperField(this, prophetstor_api_datahub_rawdata_types_pb.Query, 1));
};


/**
 * @param {?proto.prophetstor.api.datahub.rawdata.Query|undefined} value
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} returns this
*/
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string columns = 2;
 * @return {!Array<string>}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.getColumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.setColumnsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.addColumns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * repeated prophetstor.api.datahub.common.Group groups = 3;
 * @return {!Array<!proto.prophetstor.api.datahub.common.Group>}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.prophetstor.api.datahub.common.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, prophetstor_api_datahub_common_rawdata_pb.Group, 3));
};


/**
 * @param {!Array<!proto.prophetstor.api.datahub.common.Group>} value
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} returns this
*/
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.prophetstor.api.datahub.common.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.common.Group}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.prophetstor.api.datahub.common.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * optional string rawdata = 4;
 * @return {string}
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.getRawdata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.rawdata.ReadRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.ReadRawdata.prototype.setRawdata = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.repeatedFields_ = [3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.rawdata.WriteRawdata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.toObject = function(includeInstance, msg) {
  var f, obj = {
    database: jspb.Message.getFieldWithDefault(msg, 1, ""),
    table: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    prophetstor_api_datahub_common_rawdata_pb.Row.toObject, includeInstance),
    columnTypesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    dataTypesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.rawdata.WriteRawdata;
  return proto.prophetstor.api.datahub.rawdata.WriteRawdata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumns(value);
      break;
    case 4:
      var value = new prophetstor_api_datahub_common_rawdata_pb.Row;
      reader.readMessage(value,prophetstor_api_datahub_common_rawdata_pb.Row.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    case 5:
      var value = /** @type {!Array<!proto.prophetstor.api.datahub.common.ColumnType>} */ (reader.readPackedEnum());
      msg.setColumnTypesList(value);
      break;
    case 6:
      var value = /** @type {!Array<!proto.prophetstor.api.datahub.common.DataType>} */ (reader.readPackedEnum());
      msg.setDataTypesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.rawdata.WriteRawdata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      prophetstor_api_datahub_common_rawdata_pb.Row.serializeBinaryToWriter
    );
  }
  f = message.getColumnTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getDataTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
};


/**
 * optional string database = 1;
 * @return {string}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string table = 2;
 * @return {string}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string columns = 3;
 * @return {!Array<string>}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.getColumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.setColumnsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.addColumns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * repeated prophetstor.api.datahub.common.Row rows = 4;
 * @return {!Array<!proto.prophetstor.api.datahub.common.Row>}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.prophetstor.api.datahub.common.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, prophetstor_api_datahub_common_rawdata_pb.Row, 4));
};


/**
 * @param {!Array<!proto.prophetstor.api.datahub.common.Row>} value
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
*/
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.prophetstor.api.datahub.common.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.common.Row}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.prophetstor.api.datahub.common.Row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};


/**
 * repeated prophetstor.api.datahub.common.ColumnType column_types = 5;
 * @return {!Array<!proto.prophetstor.api.datahub.common.ColumnType>}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.getColumnTypesList = function() {
  return /** @type {!Array<!proto.prophetstor.api.datahub.common.ColumnType>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.prophetstor.api.datahub.common.ColumnType>} value
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.setColumnTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.prophetstor.api.datahub.common.ColumnType} value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.addColumnTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.clearColumnTypesList = function() {
  return this.setColumnTypesList([]);
};


/**
 * repeated prophetstor.api.datahub.common.DataType data_types = 6;
 * @return {!Array<!proto.prophetstor.api.datahub.common.DataType>}
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.getDataTypesList = function() {
  return /** @type {!Array<!proto.prophetstor.api.datahub.common.DataType>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.prophetstor.api.datahub.common.DataType>} value
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.setDataTypesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.prophetstor.api.datahub.common.DataType} value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.addDataTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.rawdata.WriteRawdata} returns this
 */
proto.prophetstor.api.datahub.rawdata.WriteRawdata.prototype.clearDataTypesList = function() {
  return this.setDataTypesList([]);
};


goog.object.extend(exports, proto.prophetstor.api.datahub.rawdata);
