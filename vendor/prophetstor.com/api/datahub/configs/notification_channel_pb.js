// source: prophetstor/api/datahub/configs/notification_channel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var prophetstor_api_datahub_resources_metadata_pb = require('../../../../prophetstor/api/datahub/resources/metadata_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_resources_metadata_pb);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.ChannelType', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.Email', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.NotificationChannel', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.NotificationChannel.TypeChannelCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.Email = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.Email, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.Email.displayName = 'proto.prophetstor.api.datahub.configs.Email';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.NotificationChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.prophetstor.api.datahub.configs.NotificationChannel.oneofGroups_);
};
goog.inherits(proto.prophetstor.api.datahub.configs.NotificationChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.NotificationChannel.displayName = 'proto.prophetstor.api.datahub.configs.NotificationChannel';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.Email.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.Email.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.Email} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Email.toObject = function(includeInstance, msg) {
  var f, obj = {
    server: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    from: jspb.Message.getFieldWithDefault(msg, 3, ""),
    username: jspb.Message.getFieldWithDefault(msg, 4, ""),
    password: jspb.Message.getFieldWithDefault(msg, 5, ""),
    encryption: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.Email}
 */
proto.prophetstor.api.datahub.configs.Email.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.Email;
  return proto.prophetstor.api.datahub.configs.Email.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.Email} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.Email}
 */
proto.prophetstor.api.datahub.configs.Email.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncryption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.Email.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.Email.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.Email} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Email.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEncryption();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string server = 1;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.Email.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.Email} returns this
 */
proto.prophetstor.api.datahub.configs.Email.prototype.setServer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.prophetstor.api.datahub.configs.Email.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.configs.Email} returns this
 */
proto.prophetstor.api.datahub.configs.Email.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string from = 3;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.Email.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.Email} returns this
 */
proto.prophetstor.api.datahub.configs.Email.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string username = 4;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.Email.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.Email} returns this
 */
proto.prophetstor.api.datahub.configs.Email.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string password = 5;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.Email.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.Email} returns this
 */
proto.prophetstor.api.datahub.configs.Email.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string encryption = 6;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.Email.prototype.getEncryption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.Email} returns this
 */
proto.prophetstor.api.datahub.configs.Email.prototype.setEncryption = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.TypeChannelCase = {
  TYPE_CHANNEL_NOT_SET: 0,
  EMAIL_CHANNEL: 3
};

/**
 * @return {proto.prophetstor.api.datahub.configs.NotificationChannel.TypeChannelCase}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.getTypeChannelCase = function() {
  return /** @type {proto.prophetstor.api.datahub.configs.NotificationChannel.TypeChannelCase} */(jspb.Message.computeOneofCase(this, proto.prophetstor.api.datahub.configs.NotificationChannel.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.NotificationChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.NotificationChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectMeta: (f = msg.getObjectMeta()) && prophetstor_api_datahub_resources_metadata_pb.ObjectMeta.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    emailChannel: (f = msg.getEmailChannel()) && proto.prophetstor.api.datahub.configs.Email.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.NotificationChannel}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.NotificationChannel;
  return proto.prophetstor.api.datahub.configs.NotificationChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.NotificationChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.NotificationChannel}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prophetstor_api_datahub_resources_metadata_pb.ObjectMeta;
      reader.readMessage(value,prophetstor_api_datahub_resources_metadata_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setObjectMeta(value);
      break;
    case 2:
      var value = /** @type {!proto.prophetstor.api.datahub.configs.ChannelType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.prophetstor.api.datahub.configs.Email;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.Email.deserializeBinaryFromReader);
      msg.setEmailChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.NotificationChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.NotificationChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prophetstor_api_datahub_resources_metadata_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEmailChannel();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.prophetstor.api.datahub.configs.Email.serializeBinaryToWriter
    );
  }
};


/**
 * optional prophetstor.api.datahub.resources.ObjectMeta object_meta = 1;
 * @return {?proto.prophetstor.api.datahub.resources.ObjectMeta}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.getObjectMeta = function() {
  return /** @type{?proto.prophetstor.api.datahub.resources.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, prophetstor_api_datahub_resources_metadata_pb.ObjectMeta, 1));
};


/**
 * @param {?proto.prophetstor.api.datahub.resources.ObjectMeta|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.NotificationChannel} returns this
*/
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.setObjectMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.NotificationChannel} returns this
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.clearObjectMeta = function() {
  return this.setObjectMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.hasObjectMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelType type = 2;
 * @return {!proto.prophetstor.api.datahub.configs.ChannelType}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.getType = function() {
  return /** @type {!proto.prophetstor.api.datahub.configs.ChannelType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.prophetstor.api.datahub.configs.ChannelType} value
 * @return {!proto.prophetstor.api.datahub.configs.NotificationChannel} returns this
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Email email_channel = 3;
 * @return {?proto.prophetstor.api.datahub.configs.Email}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.getEmailChannel = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.Email} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.Email, 3));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.Email|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.NotificationChannel} returns this
*/
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.setEmailChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.prophetstor.api.datahub.configs.NotificationChannel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.NotificationChannel} returns this
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.clearEmailChannel = function() {
  return this.setEmailChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.NotificationChannel.prototype.hasEmailChannel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.configs.ChannelType = {
  CHANNEL_TYPE_UNDEFINED: 0,
  EMAIL: 1
};

goog.object.extend(exports, proto.prophetstor.api.datahub.configs);
