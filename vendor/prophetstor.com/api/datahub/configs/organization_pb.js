// source: prophetstor/api/datahub/configs/organization.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var prophetstor_api_datahub_resources_metadata_pb = require('../../../../prophetstor/api/datahub/resources/metadata_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_resources_metadata_pb);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.Cluster', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.CostAnalysisFeature', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.DataSource', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.DataSourceType', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.Feature', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.Feature.TypeFeatureCase', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.FeatureMeta', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.FeatureMode', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.FeatureType', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.Key', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.LogicOperator', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.Organization', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.ResourcePlanningFeature', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.configs.WatchedNamespace', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prophetstor.api.datahub.configs.WatchedNamespace.repeatedFields_, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.WatchedNamespace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.WatchedNamespace.displayName = 'proto.prophetstor.api.datahub.configs.WatchedNamespace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.Key.displayName = 'proto.prophetstor.api.datahub.configs.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.FeatureMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.FeatureMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.FeatureMeta.displayName = 'proto.prophetstor.api.datahub.configs.FeatureMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.ResourcePlanningFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.displayName = 'proto.prophetstor.api.datahub.configs.ResourcePlanningFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.CostAnalysisFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.CostAnalysisFeature.displayName = 'proto.prophetstor.api.datahub.configs.CostAnalysisFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.DataSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prophetstor.api.datahub.configs.DataSource.repeatedFields_, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.DataSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.DataSource.displayName = 'proto.prophetstor.api.datahub.configs.DataSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.prophetstor.api.datahub.configs.Feature.oneofGroups_);
};
goog.inherits(proto.prophetstor.api.datahub.configs.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.Feature.displayName = 'proto.prophetstor.api.datahub.configs.Feature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.Cluster = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prophetstor.api.datahub.configs.Cluster.repeatedFields_, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.Cluster, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.Cluster.displayName = 'proto.prophetstor.api.datahub.configs.Cluster';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.configs.Organization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prophetstor.api.datahub.configs.Organization.repeatedFields_, null);
};
goog.inherits(proto.prophetstor.api.datahub.configs.Organization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.configs.Organization.displayName = 'proto.prophetstor.api.datahub.configs.Organization';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.WatchedNamespace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.WatchedNamespace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.toObject = function(includeInstance, msg) {
  var f, obj = {
    namesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    operator: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.WatchedNamespace}
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.WatchedNamespace;
  return proto.prophetstor.api.datahub.configs.WatchedNamespace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.WatchedNamespace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.WatchedNamespace}
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    case 2:
      var value = /** @type {!proto.prophetstor.api.datahub.configs.LogicOperator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.WatchedNamespace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.WatchedNamespace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated string names = 1;
 * @return {!Array<string>}
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.prophetstor.api.datahub.configs.WatchedNamespace} returns this
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.configs.WatchedNamespace} returns this
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.configs.WatchedNamespace} returns this
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};


/**
 * optional LogicOperator operator = 2;
 * @return {!proto.prophetstor.api.datahub.configs.LogicOperator}
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.prototype.getOperator = function() {
  return /** @type {!proto.prophetstor.api.datahub.configs.LogicOperator} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.prophetstor.api.datahub.configs.LogicOperator} value
 * @return {!proto.prophetstor.api.datahub.configs.WatchedNamespace} returns this
 */
proto.prophetstor.api.datahub.configs.WatchedNamespace.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.Key}
 */
proto.prophetstor.api.datahub.configs.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.Key;
  return proto.prophetstor.api.datahub.configs.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.Key}
 */
proto.prophetstor.api.datahub.configs.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.Key.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.Key} returns this
 */
proto.prophetstor.api.datahub.configs.Key.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.FeatureMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.FeatureMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    mode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.FeatureMeta}
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.FeatureMeta;
  return proto.prophetstor.api.datahub.configs.FeatureMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.FeatureMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.FeatureMeta}
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.prophetstor.api.datahub.configs.FeatureMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.FeatureMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.FeatureMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.prophetstor.api.datahub.configs.FeatureMeta} returns this
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional FeatureMode mode = 2;
 * @return {!proto.prophetstor.api.datahub.configs.FeatureMode}
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.prototype.getMode = function() {
  return /** @type {!proto.prophetstor.api.datahub.configs.FeatureMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.prophetstor.api.datahub.configs.FeatureMode} value
 * @return {!proto.prophetstor.api.datahub.configs.FeatureMeta} returns this
 */
proto.prophetstor.api.datahub.configs.FeatureMeta.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.ResourcePlanningFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureMeta: (f = msg.getFeatureMeta()) && proto.prophetstor.api.datahub.configs.FeatureMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.ResourcePlanningFeature}
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.ResourcePlanningFeature;
  return proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.ResourcePlanningFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.ResourcePlanningFeature}
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prophetstor.api.datahub.configs.FeatureMeta;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.FeatureMeta.deserializeBinaryFromReader);
      msg.setFeatureMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.ResourcePlanningFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prophetstor.api.datahub.configs.FeatureMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureMeta feature_meta = 1;
 * @return {?proto.prophetstor.api.datahub.configs.FeatureMeta}
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.prototype.getFeatureMeta = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.FeatureMeta} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.FeatureMeta, 1));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.FeatureMeta|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.ResourcePlanningFeature} returns this
*/
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.prototype.setFeatureMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.ResourcePlanningFeature} returns this
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.prototype.clearFeatureMeta = function() {
  return this.setFeatureMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.prototype.hasFeatureMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.CostAnalysisFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.CostAnalysisFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureMeta: (f = msg.getFeatureMeta()) && proto.prophetstor.api.datahub.configs.FeatureMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.CostAnalysisFeature}
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.CostAnalysisFeature;
  return proto.prophetstor.api.datahub.configs.CostAnalysisFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.CostAnalysisFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.CostAnalysisFeature}
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prophetstor.api.datahub.configs.FeatureMeta;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.FeatureMeta.deserializeBinaryFromReader);
      msg.setFeatureMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.CostAnalysisFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.CostAnalysisFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prophetstor.api.datahub.configs.FeatureMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureMeta feature_meta = 1;
 * @return {?proto.prophetstor.api.datahub.configs.FeatureMeta}
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.prototype.getFeatureMeta = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.FeatureMeta} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.FeatureMeta, 1));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.FeatureMeta|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.CostAnalysisFeature} returns this
*/
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.prototype.setFeatureMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.CostAnalysisFeature} returns this
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.prototype.clearFeatureMeta = function() {
  return this.setFeatureMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.CostAnalysisFeature.prototype.hasFeatureMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prophetstor.api.datahub.configs.DataSource.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.DataSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.DataSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.DataSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.prophetstor.api.datahub.configs.Key.toObject, includeInstance),
    account: jspb.Message.getFieldWithDefault(msg, 3, ""),
    address: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.DataSource}
 */
proto.prophetstor.api.datahub.configs.DataSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.DataSource;
  return proto.prophetstor.api.datahub.configs.DataSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.DataSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.DataSource}
 */
proto.prophetstor.api.datahub.configs.DataSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.prophetstor.api.datahub.configs.DataSourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.prophetstor.api.datahub.configs.Key;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.DataSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.DataSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.DataSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.prophetstor.api.datahub.configs.Key.serializeBinaryToWriter
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional DataSourceType type = 1;
 * @return {!proto.prophetstor.api.datahub.configs.DataSourceType}
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.getType = function() {
  return /** @type {!proto.prophetstor.api.datahub.configs.DataSourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.prophetstor.api.datahub.configs.DataSourceType} value
 * @return {!proto.prophetstor.api.datahub.configs.DataSource} returns this
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Key keys = 2;
 * @return {!Array<!proto.prophetstor.api.datahub.configs.Key>}
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.prophetstor.api.datahub.configs.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prophetstor.api.datahub.configs.Key, 2));
};


/**
 * @param {!Array<!proto.prophetstor.api.datahub.configs.Key>} value
 * @return {!proto.prophetstor.api.datahub.configs.DataSource} returns this
*/
proto.prophetstor.api.datahub.configs.DataSource.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.prophetstor.api.datahub.configs.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.configs.Key}
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.prophetstor.api.datahub.configs.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.configs.DataSource} returns this
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * optional string account = 3;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.DataSource} returns this
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.DataSource} returns this
 */
proto.prophetstor.api.datahub.configs.DataSource.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.prophetstor.api.datahub.configs.Feature.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.configs.Feature.TypeFeatureCase = {
  TYPE_FEATURE_NOT_SET: 0,
  RESOURCE_PLANNING_FEATURE: 2,
  COST_ANALYSIS_FEATURE: 3
};

/**
 * @return {proto.prophetstor.api.datahub.configs.Feature.TypeFeatureCase}
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.getTypeFeatureCase = function() {
  return /** @type {proto.prophetstor.api.datahub.configs.Feature.TypeFeatureCase} */(jspb.Message.computeOneofCase(this, proto.prophetstor.api.datahub.configs.Feature.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.Feature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resourcePlanningFeature: (f = msg.getResourcePlanningFeature()) && proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.toObject(includeInstance, f),
    costAnalysisFeature: (f = msg.getCostAnalysisFeature()) && proto.prophetstor.api.datahub.configs.CostAnalysisFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.Feature}
 */
proto.prophetstor.api.datahub.configs.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.Feature;
  return proto.prophetstor.api.datahub.configs.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.Feature}
 */
proto.prophetstor.api.datahub.configs.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.prophetstor.api.datahub.configs.FeatureType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.prophetstor.api.datahub.configs.ResourcePlanningFeature;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.deserializeBinaryFromReader);
      msg.setResourcePlanningFeature(value);
      break;
    case 3:
      var value = new proto.prophetstor.api.datahub.configs.CostAnalysisFeature;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.CostAnalysisFeature.deserializeBinaryFromReader);
      msg.setCostAnalysisFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.Feature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Feature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResourcePlanningFeature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.prophetstor.api.datahub.configs.ResourcePlanningFeature.serializeBinaryToWriter
    );
  }
  f = message.getCostAnalysisFeature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.prophetstor.api.datahub.configs.CostAnalysisFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeatureType type = 1;
 * @return {!proto.prophetstor.api.datahub.configs.FeatureType}
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.getType = function() {
  return /** @type {!proto.prophetstor.api.datahub.configs.FeatureType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.prophetstor.api.datahub.configs.FeatureType} value
 * @return {!proto.prophetstor.api.datahub.configs.Feature} returns this
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ResourcePlanningFeature resource_planning_feature = 2;
 * @return {?proto.prophetstor.api.datahub.configs.ResourcePlanningFeature}
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.getResourcePlanningFeature = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.ResourcePlanningFeature} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.ResourcePlanningFeature, 2));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.ResourcePlanningFeature|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.Feature} returns this
*/
proto.prophetstor.api.datahub.configs.Feature.prototype.setResourcePlanningFeature = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.prophetstor.api.datahub.configs.Feature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.Feature} returns this
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.clearResourcePlanningFeature = function() {
  return this.setResourcePlanningFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.hasResourcePlanningFeature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CostAnalysisFeature cost_analysis_feature = 3;
 * @return {?proto.prophetstor.api.datahub.configs.CostAnalysisFeature}
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.getCostAnalysisFeature = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.CostAnalysisFeature} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.CostAnalysisFeature, 3));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.CostAnalysisFeature|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.Feature} returns this
*/
proto.prophetstor.api.datahub.configs.Feature.prototype.setCostAnalysisFeature = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.prophetstor.api.datahub.configs.Feature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.Feature} returns this
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.clearCostAnalysisFeature = function() {
  return this.setCostAnalysisFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.Feature.prototype.hasCostAnalysisFeature = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prophetstor.api.datahub.configs.Cluster.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.Cluster.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.Cluster} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Cluster.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataSource: (f = msg.getDataSource()) && proto.prophetstor.api.datahub.configs.DataSource.toObject(includeInstance, f),
    watchedNamespace: (f = msg.getWatchedNamespace()) && proto.prophetstor.api.datahub.configs.WatchedNamespace.toObject(includeInstance, f),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.prophetstor.api.datahub.configs.Feature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.Cluster}
 */
proto.prophetstor.api.datahub.configs.Cluster.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.Cluster;
  return proto.prophetstor.api.datahub.configs.Cluster.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.Cluster} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.Cluster}
 */
proto.prophetstor.api.datahub.configs.Cluster.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.prophetstor.api.datahub.configs.DataSource;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.DataSource.deserializeBinaryFromReader);
      msg.setDataSource(value);
      break;
    case 3:
      var value = new proto.prophetstor.api.datahub.configs.WatchedNamespace;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.WatchedNamespace.deserializeBinaryFromReader);
      msg.setWatchedNamespace(value);
      break;
    case 4:
      var value = new proto.prophetstor.api.datahub.configs.Feature;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.Feature.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.Cluster.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.Cluster} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Cluster.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.prophetstor.api.datahub.configs.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getWatchedNamespace();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.prophetstor.api.datahub.configs.WatchedNamespace.serializeBinaryToWriter
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.prophetstor.api.datahub.configs.Feature.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.Cluster} returns this
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DataSource data_source = 2;
 * @return {?proto.prophetstor.api.datahub.configs.DataSource}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.getDataSource = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.DataSource, 2));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.DataSource|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.Cluster} returns this
*/
proto.prophetstor.api.datahub.configs.Cluster.prototype.setDataSource = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.Cluster} returns this
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.clearDataSource = function() {
  return this.setDataSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.hasDataSource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WatchedNamespace watched_namespace = 3;
 * @return {?proto.prophetstor.api.datahub.configs.WatchedNamespace}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.getWatchedNamespace = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.WatchedNamespace} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.WatchedNamespace, 3));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.WatchedNamespace|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.Cluster} returns this
*/
proto.prophetstor.api.datahub.configs.Cluster.prototype.setWatchedNamespace = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.Cluster} returns this
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.clearWatchedNamespace = function() {
  return this.setWatchedNamespace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.hasWatchedNamespace = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Feature features = 4;
 * @return {!Array<!proto.prophetstor.api.datahub.configs.Feature>}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.prophetstor.api.datahub.configs.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prophetstor.api.datahub.configs.Feature, 4));
};


/**
 * @param {!Array<!proto.prophetstor.api.datahub.configs.Feature>} value
 * @return {!proto.prophetstor.api.datahub.configs.Cluster} returns this
*/
proto.prophetstor.api.datahub.configs.Cluster.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.prophetstor.api.datahub.configs.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.configs.Feature}
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.prophetstor.api.datahub.configs.Feature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.configs.Cluster} returns this
 */
proto.prophetstor.api.datahub.configs.Cluster.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prophetstor.api.datahub.configs.Organization.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.configs.Organization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.configs.Organization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Organization.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectMeta: (f = msg.getObjectMeta()) && prophetstor_api_datahub_resources_metadata_pb.ObjectMeta.toObject(includeInstance, f),
    tenant: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.prophetstor.api.datahub.configs.Feature.toObject, includeInstance),
    dataSource: (f = msg.getDataSource()) && proto.prophetstor.api.datahub.configs.DataSource.toObject(includeInstance, f),
    watchedNamespace: (f = msg.getWatchedNamespace()) && proto.prophetstor.api.datahub.configs.WatchedNamespace.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.configs.Organization}
 */
proto.prophetstor.api.datahub.configs.Organization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.configs.Organization;
  return proto.prophetstor.api.datahub.configs.Organization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.configs.Organization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.configs.Organization}
 */
proto.prophetstor.api.datahub.configs.Organization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prophetstor_api_datahub_resources_metadata_pb.ObjectMeta;
      reader.readMessage(value,prophetstor_api_datahub_resources_metadata_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setObjectMeta(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenant(value);
      break;
    case 3:
      var value = new proto.prophetstor.api.datahub.configs.Feature;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.Feature.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 4:
      var value = new proto.prophetstor.api.datahub.configs.DataSource;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.DataSource.deserializeBinaryFromReader);
      msg.setDataSource(value);
      break;
    case 5:
      var value = new proto.prophetstor.api.datahub.configs.WatchedNamespace;
      reader.readMessage(value,proto.prophetstor.api.datahub.configs.WatchedNamespace.deserializeBinaryFromReader);
      msg.setWatchedNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.configs.Organization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.configs.Organization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.configs.Organization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prophetstor_api_datahub_resources_metadata_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getTenant();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.prophetstor.api.datahub.configs.Feature.serializeBinaryToWriter
    );
  }
  f = message.getDataSource();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.prophetstor.api.datahub.configs.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getWatchedNamespace();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.prophetstor.api.datahub.configs.WatchedNamespace.serializeBinaryToWriter
    );
  }
};


/**
 * optional prophetstor.api.datahub.resources.ObjectMeta object_meta = 1;
 * @return {?proto.prophetstor.api.datahub.resources.ObjectMeta}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.getObjectMeta = function() {
  return /** @type{?proto.prophetstor.api.datahub.resources.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, prophetstor_api_datahub_resources_metadata_pb.ObjectMeta, 1));
};


/**
 * @param {?proto.prophetstor.api.datahub.resources.ObjectMeta|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
*/
proto.prophetstor.api.datahub.configs.Organization.prototype.setObjectMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.clearObjectMeta = function() {
  return this.setObjectMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.hasObjectMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tenant = 2;
 * @return {string}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.getTenant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.setTenant = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Feature features = 3;
 * @return {!Array<!proto.prophetstor.api.datahub.configs.Feature>}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.prophetstor.api.datahub.configs.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prophetstor.api.datahub.configs.Feature, 3));
};


/**
 * @param {!Array<!proto.prophetstor.api.datahub.configs.Feature>} value
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
*/
proto.prophetstor.api.datahub.configs.Organization.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.prophetstor.api.datahub.configs.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.configs.Feature}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.prophetstor.api.datahub.configs.Feature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * optional DataSource data_source = 4;
 * @return {?proto.prophetstor.api.datahub.configs.DataSource}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.getDataSource = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.DataSource} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.DataSource, 4));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.DataSource|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
*/
proto.prophetstor.api.datahub.configs.Organization.prototype.setDataSource = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.clearDataSource = function() {
  return this.setDataSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.hasDataSource = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional WatchedNamespace watched_namespace = 5;
 * @return {?proto.prophetstor.api.datahub.configs.WatchedNamespace}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.getWatchedNamespace = function() {
  return /** @type{?proto.prophetstor.api.datahub.configs.WatchedNamespace} */ (
    jspb.Message.getWrapperField(this, proto.prophetstor.api.datahub.configs.WatchedNamespace, 5));
};


/**
 * @param {?proto.prophetstor.api.datahub.configs.WatchedNamespace|undefined} value
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
*/
proto.prophetstor.api.datahub.configs.Organization.prototype.setWatchedNamespace = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.configs.Organization} returns this
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.clearWatchedNamespace = function() {
  return this.setWatchedNamespace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.configs.Organization.prototype.hasWatchedNamespace = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.configs.LogicOperator = {
  LOGIC_OPERATOR_UNDEFINED: 0,
  INCLUDE: 1,
  EXCLUDE: 2
};

/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.configs.DataSourceType = {
  DATA_SOURCETYPE_UNDEFINED: 0,
  DATADOG: 1,
  PROMETHEUS: 2
};

/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.configs.FeatureType = {
  FEATURE_TYPE_UNDEFINED: 0,
  RESOURCE_PLANNING: 1,
  COST_ANALYSIS: 2
};

/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.configs.FeatureMode = {
  FEATURE_MODE_UNDEFINED: 0,
  UPLOAD_RESULT: 1,
  LOCAL_ONLY: 2
};

goog.object.extend(exports, proto.prophetstor.api.datahub.configs);
