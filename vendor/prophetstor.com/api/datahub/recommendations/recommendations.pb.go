// This file has messages related to recommendations of containers, pods, and nodes

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: prophetstor/api/datahub/recommendations/recommendations.proto

package recommendations

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "prophetstor.com/api/datahub/common"
	resources "prophetstor.com/api/datahub/resources"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
// Represents a resource configuration recommendation made by the AI Engine.
//
// It includes recommended limits and requests for the initial stage (a container which is just started) and after the initial strage.
//
type ContainerRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LimitRecommendations          []*common.MetricData `protobuf:"bytes,2,rep,name=limit_recommendations,json=limitRecommendations,proto3" json:"limit_recommendations,omitempty"`
	RequestRecommendations        []*common.MetricData `protobuf:"bytes,3,rep,name=request_recommendations,json=requestRecommendations,proto3" json:"request_recommendations,omitempty"`
	InitialLimitRecommendations   []*common.MetricData `protobuf:"bytes,4,rep,name=initial_limit_recommendations,json=initialLimitRecommendations,proto3" json:"initial_limit_recommendations,omitempty"`
	InitialRequestRecommendations []*common.MetricData `protobuf:"bytes,5,rep,name=initial_request_recommendations,json=initialRequestRecommendations,proto3" json:"initial_request_recommendations,omitempty"`
}

func (x *ContainerRecommendation) Reset() {
	*x = ContainerRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRecommendation) ProtoMessage() {}

func (x *ContainerRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRecommendation.ProtoReflect.Descriptor instead.
func (*ContainerRecommendation) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP(), []int{0}
}

func (x *ContainerRecommendation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerRecommendation) GetLimitRecommendations() []*common.MetricData {
	if x != nil {
		return x.LimitRecommendations
	}
	return nil
}

func (x *ContainerRecommendation) GetRequestRecommendations() []*common.MetricData {
	if x != nil {
		return x.RequestRecommendations
	}
	return nil
}

func (x *ContainerRecommendation) GetInitialLimitRecommendations() []*common.MetricData {
	if x != nil {
		return x.InitialLimitRecommendations
	}
	return nil
}

func (x *ContainerRecommendation) GetInitialRequestRecommendations() []*common.MetricData {
	if x != nil {
		return x.InitialRequestRecommendations
	}
	return nil
}

//*
// Represents a set of container resource configuration recommendations of a pod.
type PodRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta               *resources.ObjectMeta      `protobuf:"bytes,1,opt,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	ApplyRecommendationNow   bool                       `protobuf:"varint,2,opt,name=apply_recommendation_now,json=applyRecommendationNow,proto3" json:"apply_recommendation_now,omitempty"`
	AssignPodPolicy          *resources.AssignPodPolicy `protobuf:"bytes,3,opt,name=assign_pod_policy,json=assignPodPolicy,proto3" json:"assign_pod_policy,omitempty"`
	ContainerRecommendations []*ContainerRecommendation `protobuf:"bytes,4,rep,name=container_recommendations,json=containerRecommendations,proto3" json:"container_recommendations,omitempty"`
	StartTime                *timestamp.Timestamp       `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                  *timestamp.Timestamp       `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	TopController            *resources.Controller      `protobuf:"bytes,7,opt,name=top_controller,json=topController,proto3" json:"top_controller,omitempty"`
	RecommendationId         string                     `protobuf:"bytes,8,opt,name=recommendation_id,json=recommendationId,proto3" json:"recommendation_id,omitempty"`
	TotalCost                float64                    `protobuf:"fixed64,9,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (x *PodRecommendation) Reset() {
	*x = PodRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodRecommendation) ProtoMessage() {}

func (x *PodRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodRecommendation.ProtoReflect.Descriptor instead.
func (*PodRecommendation) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP(), []int{1}
}

func (x *PodRecommendation) GetObjectMeta() *resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *PodRecommendation) GetApplyRecommendationNow() bool {
	if x != nil {
		return x.ApplyRecommendationNow
	}
	return false
}

func (x *PodRecommendation) GetAssignPodPolicy() *resources.AssignPodPolicy {
	if x != nil {
		return x.AssignPodPolicy
	}
	return nil
}

func (x *PodRecommendation) GetContainerRecommendations() []*ContainerRecommendation {
	if x != nil {
		return x.ContainerRecommendations
	}
	return nil
}

func (x *PodRecommendation) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PodRecommendation) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PodRecommendation) GetTopController() *resources.Controller {
	if x != nil {
		return x.TopController
	}
	return nil
}

func (x *PodRecommendation) GetRecommendationId() string {
	if x != nil {
		return x.RecommendationId
	}
	return ""
}

func (x *PodRecommendation) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

//*
// Represents resource configuration recommendations of a controller.
type ControllerRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta         *resources.ObjectMeta         `protobuf:"bytes,1,opt,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Kind               resources.Kind                `protobuf:"varint,2,opt,name=kind,proto3,enum=prophetstor.api.datahub.resources.Kind" json:"kind,omitempty"`
	RecommendedType    ControllerRecommendedType     `protobuf:"varint,3,opt,name=recommended_type,json=recommendedType,proto3,enum=prophetstor.api.datahub.recommendations.ControllerRecommendedType" json:"recommended_type,omitempty"`
	RecommendedSpec    *ControllerRecommendedSpec    `protobuf:"bytes,4,opt,name=recommended_spec,json=recommendedSpec,proto3" json:"recommended_spec,omitempty"`
	RecommendedSpecK8S *ControllerRecommendedSpecK8S `protobuf:"bytes,5,opt,name=recommended_spec_k8s,json=recommendedSpecK8s,proto3" json:"recommended_spec_k8s,omitempty"`
}

func (x *ControllerRecommendation) Reset() {
	*x = ControllerRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerRecommendation) ProtoMessage() {}

func (x *ControllerRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerRecommendation.ProtoReflect.Descriptor instead.
func (*ControllerRecommendation) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP(), []int{2}
}

func (x *ControllerRecommendation) GetObjectMeta() *resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ControllerRecommendation) GetKind() resources.Kind {
	if x != nil {
		return x.Kind
	}
	return resources.Kind_KIND_UNDEFINED
}

func (x *ControllerRecommendation) GetRecommendedType() ControllerRecommendedType {
	if x != nil {
		return x.RecommendedType
	}
	return ControllerRecommendedType_CRT_UNDEFINED
}

func (x *ControllerRecommendation) GetRecommendedSpec() *ControllerRecommendedSpec {
	if x != nil {
		return x.RecommendedSpec
	}
	return nil
}

func (x *ControllerRecommendation) GetRecommendedSpecK8S() *ControllerRecommendedSpecK8S {
	if x != nil {
		return x.RecommendedSpecK8S
	}
	return nil
}

//*
// Represents resource configuration recommendations of a alameda scaler.
type ApplicationRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta         *resources.ObjectMeta         `protobuf:"bytes,1,opt,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Kind               resources.Kind                `protobuf:"varint,2,opt,name=kind,proto3,enum=prophetstor.api.datahub.resources.Kind" json:"kind,omitempty"`
	RecommendedType    ControllerRecommendedType     `protobuf:"varint,3,opt,name=recommended_type,json=recommendedType,proto3,enum=prophetstor.api.datahub.recommendations.ControllerRecommendedType" json:"recommended_type,omitempty"`
	RecommendedSpec    *ControllerRecommendedSpec    `protobuf:"bytes,4,opt,name=recommended_spec,json=recommendedSpec,proto3" json:"recommended_spec,omitempty"`
	RecommendedSpecK8S *ControllerRecommendedSpecK8S `protobuf:"bytes,5,opt,name=recommended_spec_k8s,json=recommendedSpecK8s,proto3" json:"recommended_spec_k8s,omitempty"`
}

func (x *ApplicationRecommendation) Reset() {
	*x = ApplicationRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationRecommendation) ProtoMessage() {}

func (x *ApplicationRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationRecommendation.ProtoReflect.Descriptor instead.
func (*ApplicationRecommendation) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationRecommendation) GetObjectMeta() *resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ApplicationRecommendation) GetKind() resources.Kind {
	if x != nil {
		return x.Kind
	}
	return resources.Kind_KIND_UNDEFINED
}

func (x *ApplicationRecommendation) GetRecommendedType() ControllerRecommendedType {
	if x != nil {
		return x.RecommendedType
	}
	return ControllerRecommendedType_CRT_UNDEFINED
}

func (x *ApplicationRecommendation) GetRecommendedSpec() *ControllerRecommendedSpec {
	if x != nil {
		return x.RecommendedSpec
	}
	return nil
}

func (x *ApplicationRecommendation) GetRecommendedSpecK8S() *ControllerRecommendedSpecK8S {
	if x != nil {
		return x.RecommendedSpecK8S
	}
	return nil
}

//*
// Represents resource configuration recommendations of a namespace.
type NamespaceRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta         *resources.ObjectMeta         `protobuf:"bytes,1,opt,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Kind               resources.Kind                `protobuf:"varint,2,opt,name=kind,proto3,enum=prophetstor.api.datahub.resources.Kind" json:"kind,omitempty"`
	RecommendedType    ControllerRecommendedType     `protobuf:"varint,3,opt,name=recommended_type,json=recommendedType,proto3,enum=prophetstor.api.datahub.recommendations.ControllerRecommendedType" json:"recommended_type,omitempty"`
	RecommendedSpec    *ControllerRecommendedSpec    `protobuf:"bytes,4,opt,name=recommended_spec,json=recommendedSpec,proto3" json:"recommended_spec,omitempty"`
	RecommendedSpecK8S *ControllerRecommendedSpecK8S `protobuf:"bytes,5,opt,name=recommended_spec_k8s,json=recommendedSpecK8s,proto3" json:"recommended_spec_k8s,omitempty"`
}

func (x *NamespaceRecommendation) Reset() {
	*x = NamespaceRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceRecommendation) ProtoMessage() {}

func (x *NamespaceRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceRecommendation.ProtoReflect.Descriptor instead.
func (*NamespaceRecommendation) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP(), []int{4}
}

func (x *NamespaceRecommendation) GetObjectMeta() *resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *NamespaceRecommendation) GetKind() resources.Kind {
	if x != nil {
		return x.Kind
	}
	return resources.Kind_KIND_UNDEFINED
}

func (x *NamespaceRecommendation) GetRecommendedType() ControllerRecommendedType {
	if x != nil {
		return x.RecommendedType
	}
	return ControllerRecommendedType_CRT_UNDEFINED
}

func (x *NamespaceRecommendation) GetRecommendedSpec() *ControllerRecommendedSpec {
	if x != nil {
		return x.RecommendedSpec
	}
	return nil
}

func (x *NamespaceRecommendation) GetRecommendedSpecK8S() *ControllerRecommendedSpecK8S {
	if x != nil {
		return x.RecommendedSpecK8S
	}
	return nil
}

//*
// Represents resource configuration recommendations of a node.
type NodeRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta         *resources.ObjectMeta         `protobuf:"bytes,1,opt,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Kind               resources.Kind                `protobuf:"varint,2,opt,name=kind,proto3,enum=prophetstor.api.datahub.resources.Kind" json:"kind,omitempty"`
	RecommendedType    ControllerRecommendedType     `protobuf:"varint,3,opt,name=recommended_type,json=recommendedType,proto3,enum=prophetstor.api.datahub.recommendations.ControllerRecommendedType" json:"recommended_type,omitempty"`
	RecommendedSpec    *ControllerRecommendedSpec    `protobuf:"bytes,4,opt,name=recommended_spec,json=recommendedSpec,proto3" json:"recommended_spec,omitempty"`
	RecommendedSpecK8S *ControllerRecommendedSpecK8S `protobuf:"bytes,5,opt,name=recommended_spec_k8s,json=recommendedSpecK8s,proto3" json:"recommended_spec_k8s,omitempty"`
}

func (x *NodeRecommendation) Reset() {
	*x = NodeRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRecommendation) ProtoMessage() {}

func (x *NodeRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRecommendation.ProtoReflect.Descriptor instead.
func (*NodeRecommendation) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP(), []int{5}
}

func (x *NodeRecommendation) GetObjectMeta() *resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *NodeRecommendation) GetKind() resources.Kind {
	if x != nil {
		return x.Kind
	}
	return resources.Kind_KIND_UNDEFINED
}

func (x *NodeRecommendation) GetRecommendedType() ControllerRecommendedType {
	if x != nil {
		return x.RecommendedType
	}
	return ControllerRecommendedType_CRT_UNDEFINED
}

func (x *NodeRecommendation) GetRecommendedSpec() *ControllerRecommendedSpec {
	if x != nil {
		return x.RecommendedSpec
	}
	return nil
}

func (x *NodeRecommendation) GetRecommendedSpecK8S() *ControllerRecommendedSpecK8S {
	if x != nil {
		return x.RecommendedSpecK8S
	}
	return nil
}

//*
// Represents resource configuration recommendations of a cluster.
type ClusterRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta         *resources.ObjectMeta         `protobuf:"bytes,1,opt,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Kind               resources.Kind                `protobuf:"varint,2,opt,name=kind,proto3,enum=prophetstor.api.datahub.resources.Kind" json:"kind,omitempty"`
	RecommendedType    ControllerRecommendedType     `protobuf:"varint,3,opt,name=recommended_type,json=recommendedType,proto3,enum=prophetstor.api.datahub.recommendations.ControllerRecommendedType" json:"recommended_type,omitempty"`
	RecommendedSpec    *ControllerRecommendedSpec    `protobuf:"bytes,4,opt,name=recommended_spec,json=recommendedSpec,proto3" json:"recommended_spec,omitempty"`
	RecommendedSpecK8S *ControllerRecommendedSpecK8S `protobuf:"bytes,5,opt,name=recommended_spec_k8s,json=recommendedSpecK8s,proto3" json:"recommended_spec_k8s,omitempty"`
}

func (x *ClusterRecommendation) Reset() {
	*x = ClusterRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRecommendation) ProtoMessage() {}

func (x *ClusterRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRecommendation.ProtoReflect.Descriptor instead.
func (*ClusterRecommendation) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterRecommendation) GetObjectMeta() *resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ClusterRecommendation) GetKind() resources.Kind {
	if x != nil {
		return x.Kind
	}
	return resources.Kind_KIND_UNDEFINED
}

func (x *ClusterRecommendation) GetRecommendedType() ControllerRecommendedType {
	if x != nil {
		return x.RecommendedType
	}
	return ControllerRecommendedType_CRT_UNDEFINED
}

func (x *ClusterRecommendation) GetRecommendedSpec() *ControllerRecommendedSpec {
	if x != nil {
		return x.RecommendedSpec
	}
	return nil
}

func (x *ClusterRecommendation) GetRecommendedSpecK8S() *ControllerRecommendedSpecK8S {
	if x != nil {
		return x.RecommendedSpecK8S
	}
	return nil
}

type WriteRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricType    common.MetricType    `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=prophetstor.api.datahub.common.MetricType" json:"metric_type,omitempty"`
	ResourceQuota common.ResourceQuota `protobuf:"varint,2,opt,name=resource_quota,json=resourceQuota,proto3,enum=prophetstor.api.datahub.common.ResourceQuota" json:"resource_quota,omitempty"`
	WriteData     *common.WriteData    `protobuf:"bytes,3,opt,name=write_data,json=writeData,proto3" json:"write_data,omitempty"`
}

func (x *WriteRecommendation) Reset() {
	*x = WriteRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRecommendation) ProtoMessage() {}

func (x *WriteRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRecommendation.ProtoReflect.Descriptor instead.
func (*WriteRecommendation) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP(), []int{7}
}

func (x *WriteRecommendation) GetMetricType() common.MetricType {
	if x != nil {
		return x.MetricType
	}
	return common.MetricType_METRICS_TYPE_UNDEFINED
}

func (x *WriteRecommendation) GetResourceQuota() common.ResourceQuota {
	if x != nil {
		return x.ResourceQuota
	}
	return common.ResourceQuota_RESOURCE_QUOTA_UNDEFINED
}

func (x *WriteRecommendation) GetWriteData() *common.WriteData {
	if x != nil {
		return x.WriteData
	}
	return nil
}

var File_prophetstor_api_datahub_recommendations_recommendations_proto protoreflect.FileDescriptor

var file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x27, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x30, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x03,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a,
	0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63,
	0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x1d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x1f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x05, 0x0a, 0x11, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x18, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7d, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x0d, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xfe, 0x03, 0x0a, 0x18, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x77, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6b, 0x38, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x22, 0xff, 0x03, 0x0a, 0x19,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x77, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6b, 0x38, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x22, 0xfd, 0x03,
	0x0a, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x77, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6b, 0x38, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x22, 0xf8, 0x03,
	0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x77, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x6b, 0x38, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x4b, 0x38, 0x73, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x22, 0xfb, 0x03, 0x0a, 0x15, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x6d, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x77, 0x0a,
	0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x6b, 0x38, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4b,
	0x38, 0x73, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x12, 0x48, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2d, 0x5a, 0x2b, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescOnce sync.Once
	file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescData = file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDesc
)

func file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescGZIP() []byte {
	file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescOnce.Do(func() {
		file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescData = protoimpl.X.CompressGZIP(file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescData)
	})
	return file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDescData
}

var file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_prophetstor_api_datahub_recommendations_recommendations_proto_goTypes = []interface{}{
	(*ContainerRecommendation)(nil),      // 0: prophetstor.api.datahub.recommendations.ContainerRecommendation
	(*PodRecommendation)(nil),            // 1: prophetstor.api.datahub.recommendations.PodRecommendation
	(*ControllerRecommendation)(nil),     // 2: prophetstor.api.datahub.recommendations.ControllerRecommendation
	(*ApplicationRecommendation)(nil),    // 3: prophetstor.api.datahub.recommendations.ApplicationRecommendation
	(*NamespaceRecommendation)(nil),      // 4: prophetstor.api.datahub.recommendations.NamespaceRecommendation
	(*NodeRecommendation)(nil),           // 5: prophetstor.api.datahub.recommendations.NodeRecommendation
	(*ClusterRecommendation)(nil),        // 6: prophetstor.api.datahub.recommendations.ClusterRecommendation
	(*WriteRecommendation)(nil),          // 7: prophetstor.api.datahub.recommendations.WriteRecommendation
	(*common.MetricData)(nil),            // 8: prophetstor.api.datahub.common.MetricData
	(*resources.ObjectMeta)(nil),         // 9: prophetstor.api.datahub.resources.ObjectMeta
	(*resources.AssignPodPolicy)(nil),    // 10: prophetstor.api.datahub.resources.AssignPodPolicy
	(*timestamp.Timestamp)(nil),          // 11: google.protobuf.Timestamp
	(*resources.Controller)(nil),         // 12: prophetstor.api.datahub.resources.Controller
	(resources.Kind)(0),                  // 13: prophetstor.api.datahub.resources.Kind
	(ControllerRecommendedType)(0),       // 14: prophetstor.api.datahub.recommendations.ControllerRecommendedType
	(*ControllerRecommendedSpec)(nil),    // 15: prophetstor.api.datahub.recommendations.ControllerRecommendedSpec
	(*ControllerRecommendedSpecK8S)(nil), // 16: prophetstor.api.datahub.recommendations.ControllerRecommendedSpecK8s
	(common.MetricType)(0),               // 17: prophetstor.api.datahub.common.MetricType
	(common.ResourceQuota)(0),            // 18: prophetstor.api.datahub.common.ResourceQuota
	(*common.WriteData)(nil),             // 19: prophetstor.api.datahub.common.WriteData
}
var file_prophetstor_api_datahub_recommendations_recommendations_proto_depIdxs = []int32{
	8,  // 0: prophetstor.api.datahub.recommendations.ContainerRecommendation.limit_recommendations:type_name -> prophetstor.api.datahub.common.MetricData
	8,  // 1: prophetstor.api.datahub.recommendations.ContainerRecommendation.request_recommendations:type_name -> prophetstor.api.datahub.common.MetricData
	8,  // 2: prophetstor.api.datahub.recommendations.ContainerRecommendation.initial_limit_recommendations:type_name -> prophetstor.api.datahub.common.MetricData
	8,  // 3: prophetstor.api.datahub.recommendations.ContainerRecommendation.initial_request_recommendations:type_name -> prophetstor.api.datahub.common.MetricData
	9,  // 4: prophetstor.api.datahub.recommendations.PodRecommendation.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	10, // 5: prophetstor.api.datahub.recommendations.PodRecommendation.assign_pod_policy:type_name -> prophetstor.api.datahub.resources.AssignPodPolicy
	0,  // 6: prophetstor.api.datahub.recommendations.PodRecommendation.container_recommendations:type_name -> prophetstor.api.datahub.recommendations.ContainerRecommendation
	11, // 7: prophetstor.api.datahub.recommendations.PodRecommendation.start_time:type_name -> google.protobuf.Timestamp
	11, // 8: prophetstor.api.datahub.recommendations.PodRecommendation.end_time:type_name -> google.protobuf.Timestamp
	12, // 9: prophetstor.api.datahub.recommendations.PodRecommendation.top_controller:type_name -> prophetstor.api.datahub.resources.Controller
	9,  // 10: prophetstor.api.datahub.recommendations.ControllerRecommendation.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	13, // 11: prophetstor.api.datahub.recommendations.ControllerRecommendation.kind:type_name -> prophetstor.api.datahub.resources.Kind
	14, // 12: prophetstor.api.datahub.recommendations.ControllerRecommendation.recommended_type:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedType
	15, // 13: prophetstor.api.datahub.recommendations.ControllerRecommendation.recommended_spec:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpec
	16, // 14: prophetstor.api.datahub.recommendations.ControllerRecommendation.recommended_spec_k8s:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpecK8s
	9,  // 15: prophetstor.api.datahub.recommendations.ApplicationRecommendation.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	13, // 16: prophetstor.api.datahub.recommendations.ApplicationRecommendation.kind:type_name -> prophetstor.api.datahub.resources.Kind
	14, // 17: prophetstor.api.datahub.recommendations.ApplicationRecommendation.recommended_type:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedType
	15, // 18: prophetstor.api.datahub.recommendations.ApplicationRecommendation.recommended_spec:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpec
	16, // 19: prophetstor.api.datahub.recommendations.ApplicationRecommendation.recommended_spec_k8s:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpecK8s
	9,  // 20: prophetstor.api.datahub.recommendations.NamespaceRecommendation.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	13, // 21: prophetstor.api.datahub.recommendations.NamespaceRecommendation.kind:type_name -> prophetstor.api.datahub.resources.Kind
	14, // 22: prophetstor.api.datahub.recommendations.NamespaceRecommendation.recommended_type:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedType
	15, // 23: prophetstor.api.datahub.recommendations.NamespaceRecommendation.recommended_spec:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpec
	16, // 24: prophetstor.api.datahub.recommendations.NamespaceRecommendation.recommended_spec_k8s:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpecK8s
	9,  // 25: prophetstor.api.datahub.recommendations.NodeRecommendation.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	13, // 26: prophetstor.api.datahub.recommendations.NodeRecommendation.kind:type_name -> prophetstor.api.datahub.resources.Kind
	14, // 27: prophetstor.api.datahub.recommendations.NodeRecommendation.recommended_type:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedType
	15, // 28: prophetstor.api.datahub.recommendations.NodeRecommendation.recommended_spec:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpec
	16, // 29: prophetstor.api.datahub.recommendations.NodeRecommendation.recommended_spec_k8s:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpecK8s
	9,  // 30: prophetstor.api.datahub.recommendations.ClusterRecommendation.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	13, // 31: prophetstor.api.datahub.recommendations.ClusterRecommendation.kind:type_name -> prophetstor.api.datahub.resources.Kind
	14, // 32: prophetstor.api.datahub.recommendations.ClusterRecommendation.recommended_type:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedType
	15, // 33: prophetstor.api.datahub.recommendations.ClusterRecommendation.recommended_spec:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpec
	16, // 34: prophetstor.api.datahub.recommendations.ClusterRecommendation.recommended_spec_k8s:type_name -> prophetstor.api.datahub.recommendations.ControllerRecommendedSpecK8s
	17, // 35: prophetstor.api.datahub.recommendations.WriteRecommendation.metric_type:type_name -> prophetstor.api.datahub.common.MetricType
	18, // 36: prophetstor.api.datahub.recommendations.WriteRecommendation.resource_quota:type_name -> prophetstor.api.datahub.common.ResourceQuota
	19, // 37: prophetstor.api.datahub.recommendations.WriteRecommendation.write_data:type_name -> prophetstor.api.datahub.common.WriteData
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_prophetstor_api_datahub_recommendations_recommendations_proto_init() }
func file_prophetstor_api_datahub_recommendations_recommendations_proto_init() {
	if File_prophetstor_api_datahub_recommendations_recommendations_proto != nil {
		return
	}
	file_prophetstor_api_datahub_recommendations_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prophetstor_api_datahub_recommendations_recommendations_proto_goTypes,
		DependencyIndexes: file_prophetstor_api_datahub_recommendations_recommendations_proto_depIdxs,
		MessageInfos:      file_prophetstor_api_datahub_recommendations_recommendations_proto_msgTypes,
	}.Build()
	File_prophetstor_api_datahub_recommendations_recommendations_proto = out.File
	file_prophetstor_api_datahub_recommendations_recommendations_proto_rawDesc = nil
	file_prophetstor_api_datahub_recommendations_recommendations_proto_goTypes = nil
	file_prophetstor_api_datahub_recommendations_recommendations_proto_depIdxs = nil
}
