// source: prophetstor/api/datahub/plannings/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var prophetstor_api_datahub_common_metrics_pb = require('../../../../prophetstor/api/datahub/common/metrics_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_common_metrics_pb);
var prophetstor_api_datahub_common_rawdata_pb = require('../../../../prophetstor/api/datahub/common/rawdata_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_common_rawdata_pb);
var prophetstor_api_datahub_common_types_pb = require('../../../../prophetstor/api/datahub/common/types_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_common_types_pb);
var prophetstor_api_datahub_schemas_types_pb = require('../../../../prophetstor/api/datahub/schemas/types_pb.js');
goog.object.extend(proto, prophetstor_api_datahub_schemas_types_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.plannings.ControllerPlanningType', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.plannings.PlanningData', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.plannings.PlanningType', null, global);
goog.exportSymbol('proto.prophetstor.api.datahub.plannings.RawPlanning', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.displayName = 'proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.displayName = 'proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.plannings.RawPlanning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prophetstor.api.datahub.plannings.RawPlanning.repeatedFields_, null);
};
goog.inherits(proto.prophetstor.api.datahub.plannings.RawPlanning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.plannings.RawPlanning.displayName = 'proto.prophetstor.api.datahub.plannings.RawPlanning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prophetstor.api.datahub.plannings.PlanningData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prophetstor.api.datahub.plannings.PlanningData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prophetstor.api.datahub.plannings.PlanningData.displayName = 'proto.prophetstor.api.datahub.plannings.PlanningData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentReplicas: jspb.Message.getFieldWithDefault(msg, 1, 0),
    desiredReplicas: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createTime: (f = msg.getCreateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    currentCpuRequests: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    currentMemRequests: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    currentCpuLimits: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    currentMemLimits: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    desiredCpuLimits: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    desiredMemLimits: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    totalCost: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec;
  return proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentReplicas(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDesiredReplicas(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentCpuRequests(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentMemRequests(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentCpuLimits(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentMemLimits(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDesiredCpuLimits(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDesiredMemLimits(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalCost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentReplicas();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDesiredReplicas();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreateTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCurrentCpuRequests();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCurrentMemRequests();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getCurrentCpuLimits();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCurrentMemLimits();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getDesiredCpuLimits();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getDesiredMemLimits();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getTotalCost();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional int32 current_replicas = 1;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getCurrentReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setCurrentReplicas = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 desired_replicas = 2;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getDesiredReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setDesiredReplicas = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
*/
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp create_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getCreateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
*/
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setCreateTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.clearCreateTime = function() {
  return this.setCreateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double current_cpu_requests = 5;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getCurrentCpuRequests = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setCurrentCpuRequests = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double current_mem_requests = 6;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getCurrentMemRequests = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setCurrentMemRequests = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double current_cpu_limits = 7;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getCurrentCpuLimits = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setCurrentCpuLimits = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double current_mem_limits = 8;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getCurrentMemLimits = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setCurrentMemLimits = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double desired_cpu_limits = 9;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getDesiredCpuLimits = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setDesiredCpuLimits = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double desired_mem_limits = 10;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getDesiredMemLimits = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setDesiredMemLimits = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double total_cost = 11;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.getTotalCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpec.prototype.setTotalCost = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentReplicas: jspb.Message.getFieldWithDefault(msg, 1, 0),
    desiredReplicas: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createTime: (f = msg.getCreateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s;
  return proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentReplicas(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDesiredReplicas(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentReplicas();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDesiredReplicas();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreateTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 current_replicas = 1;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.getCurrentReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.setCurrentReplicas = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 desired_replicas = 2;
 * @return {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.getDesiredReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.setDesiredReplicas = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} returns this
*/
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp create_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.getCreateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} returns this
*/
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.setCreateTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s} returns this
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.clearCreateTime = function() {
  return this.setCreateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.plannings.RawPlanning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.plannings.RawPlanning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaMeta: (f = msg.getSchemaMeta()) && prophetstor_api_datahub_schemas_types_pb.SchemaMeta.toObject(includeInstance, f),
    planningDataList: jspb.Message.toObjectList(msg.getPlanningDataList(),
    proto.prophetstor.api.datahub.plannings.PlanningData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.plannings.RawPlanning}
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.plannings.RawPlanning;
  return proto.prophetstor.api.datahub.plannings.RawPlanning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.plannings.RawPlanning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.plannings.RawPlanning}
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prophetstor_api_datahub_schemas_types_pb.SchemaMeta;
      reader.readMessage(value,prophetstor_api_datahub_schemas_types_pb.SchemaMeta.deserializeBinaryFromReader);
      msg.setSchemaMeta(value);
      break;
    case 2:
      var value = new proto.prophetstor.api.datahub.plannings.PlanningData;
      reader.readMessage(value,proto.prophetstor.api.datahub.plannings.PlanningData.deserializeBinaryFromReader);
      msg.addPlanningData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.plannings.RawPlanning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.plannings.RawPlanning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prophetstor_api_datahub_schemas_types_pb.SchemaMeta.serializeBinaryToWriter
    );
  }
  f = message.getPlanningDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.prophetstor.api.datahub.plannings.PlanningData.serializeBinaryToWriter
    );
  }
};


/**
 * optional prophetstor.api.datahub.schemas.SchemaMeta schema_meta = 1;
 * @return {?proto.prophetstor.api.datahub.schemas.SchemaMeta}
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.getSchemaMeta = function() {
  return /** @type{?proto.prophetstor.api.datahub.schemas.SchemaMeta} */ (
    jspb.Message.getWrapperField(this, prophetstor_api_datahub_schemas_types_pb.SchemaMeta, 1));
};


/**
 * @param {?proto.prophetstor.api.datahub.schemas.SchemaMeta|undefined} value
 * @return {!proto.prophetstor.api.datahub.plannings.RawPlanning} returns this
*/
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.setSchemaMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.plannings.RawPlanning} returns this
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.clearSchemaMeta = function() {
  return this.setSchemaMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.hasSchemaMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PlanningData planning_data = 2;
 * @return {!Array<!proto.prophetstor.api.datahub.plannings.PlanningData>}
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.getPlanningDataList = function() {
  return /** @type{!Array<!proto.prophetstor.api.datahub.plannings.PlanningData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prophetstor.api.datahub.plannings.PlanningData, 2));
};


/**
 * @param {!Array<!proto.prophetstor.api.datahub.plannings.PlanningData>} value
 * @return {!proto.prophetstor.api.datahub.plannings.RawPlanning} returns this
*/
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.setPlanningDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.prophetstor.api.datahub.plannings.PlanningData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prophetstor.api.datahub.plannings.PlanningData}
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.addPlanningData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.prophetstor.api.datahub.plannings.PlanningData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prophetstor.api.datahub.plannings.RawPlanning} returns this
 */
proto.prophetstor.api.datahub.plannings.RawPlanning.prototype.clearPlanningDataList = function() {
  return this.setPlanningDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.toObject = function(opt_includeInstance) {
  return proto.prophetstor.api.datahub.plannings.PlanningData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prophetstor.api.datahub.plannings.PlanningData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.plannings.PlanningData.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resourceQuota: jspb.Message.getFieldWithDefault(msg, 2, 0),
    readData: (f = msg.getReadData()) && prophetstor_api_datahub_common_rawdata_pb.ReadData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prophetstor.api.datahub.plannings.PlanningData}
 */
proto.prophetstor.api.datahub.plannings.PlanningData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prophetstor.api.datahub.plannings.PlanningData;
  return proto.prophetstor.api.datahub.plannings.PlanningData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prophetstor.api.datahub.plannings.PlanningData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prophetstor.api.datahub.plannings.PlanningData}
 */
proto.prophetstor.api.datahub.plannings.PlanningData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.prophetstor.api.datahub.common.MetricType} */ (reader.readEnum());
      msg.setMetricType(value);
      break;
    case 2:
      var value = /** @type {!proto.prophetstor.api.datahub.common.ResourceQuota} */ (reader.readEnum());
      msg.setResourceQuota(value);
      break;
    case 3:
      var value = new prophetstor_api_datahub_common_rawdata_pb.ReadData;
      reader.readMessage(value,prophetstor_api_datahub_common_rawdata_pb.ReadData.deserializeBinaryFromReader);
      msg.setReadData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prophetstor.api.datahub.plannings.PlanningData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prophetstor.api.datahub.plannings.PlanningData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prophetstor.api.datahub.plannings.PlanningData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResourceQuota();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReadData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      prophetstor_api_datahub_common_rawdata_pb.ReadData.serializeBinaryToWriter
    );
  }
};


/**
 * optional prophetstor.api.datahub.common.MetricType metric_type = 1;
 * @return {!proto.prophetstor.api.datahub.common.MetricType}
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.getMetricType = function() {
  return /** @type {!proto.prophetstor.api.datahub.common.MetricType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.prophetstor.api.datahub.common.MetricType} value
 * @return {!proto.prophetstor.api.datahub.plannings.PlanningData} returns this
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.setMetricType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional prophetstor.api.datahub.common.ResourceQuota resource_quota = 2;
 * @return {!proto.prophetstor.api.datahub.common.ResourceQuota}
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.getResourceQuota = function() {
  return /** @type {!proto.prophetstor.api.datahub.common.ResourceQuota} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.prophetstor.api.datahub.common.ResourceQuota} value
 * @return {!proto.prophetstor.api.datahub.plannings.PlanningData} returns this
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.setResourceQuota = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional prophetstor.api.datahub.common.ReadData read_data = 3;
 * @return {?proto.prophetstor.api.datahub.common.ReadData}
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.getReadData = function() {
  return /** @type{?proto.prophetstor.api.datahub.common.ReadData} */ (
    jspb.Message.getWrapperField(this, prophetstor_api_datahub_common_rawdata_pb.ReadData, 3));
};


/**
 * @param {?proto.prophetstor.api.datahub.common.ReadData|undefined} value
 * @return {!proto.prophetstor.api.datahub.plannings.PlanningData} returns this
*/
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.setReadData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prophetstor.api.datahub.plannings.PlanningData} returns this
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.clearReadData = function() {
  return this.setReadData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prophetstor.api.datahub.plannings.PlanningData.prototype.hasReadData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.plannings.PlanningType = {
  PT_UNDEFINED: 0,
  PT_RECOMMENDATION: 1,
  PT_PLANNING: 2
};

/**
 * @enum {number}
 */
proto.prophetstor.api.datahub.plannings.ControllerPlanningType = {
  CPT_UNDEFINED: 0,
  CPT_PRIMITIVE: 1,
  CPT_K8S: 2
};

goog.object.extend(exports, proto.prophetstor.api.datahub.plannings);
