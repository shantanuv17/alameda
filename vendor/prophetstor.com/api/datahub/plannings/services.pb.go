// This file has messages related to plannings of containers, pods, and controllers

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: prophetstor/api/datahub/plannings/services.proto

package plannings

import (
	proto "github.com/golang/protobuf/proto"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "prophetstor.com/api/datahub/common"
	resources "prophetstor.com/api/datahub/resources"
	schemas "prophetstor.com/api/datahub/schemas"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Represents a request for creating a pod's plannings
type CreatePodPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodPlannings []*PodPlanning `protobuf:"bytes,1,rep,name=pod_plannings,json=podPlannings,proto3" json:"pod_plannings,omitempty"`
	Granularity  int64          `protobuf:"varint,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
}

func (x *CreatePodPlanningsRequest) Reset() {
	*x = CreatePodPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePodPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePodPlanningsRequest) ProtoMessage() {}

func (x *CreatePodPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePodPlanningsRequest.ProtoReflect.Descriptor instead.
func (*CreatePodPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePodPlanningsRequest) GetPodPlannings() []*PodPlanning {
	if x != nil {
		return x.PodPlannings
	}
	return nil
}

func (x *CreatePodPlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

// Represents a request for creating a controller's plannings
type CreateControllerPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerPlannings []*ControllerPlanning `protobuf:"bytes,1,rep,name=controller_plannings,json=controllerPlannings,proto3" json:"controller_plannings,omitempty"`
	Granularity         int64                 `protobuf:"varint,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
}

func (x *CreateControllerPlanningsRequest) Reset() {
	*x = CreateControllerPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateControllerPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateControllerPlanningsRequest) ProtoMessage() {}

func (x *CreateControllerPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateControllerPlanningsRequest.ProtoReflect.Descriptor instead.
func (*CreateControllerPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{1}
}

func (x *CreateControllerPlanningsRequest) GetControllerPlannings() []*ControllerPlanning {
	if x != nil {
		return x.ControllerPlannings
	}
	return nil
}

func (x *CreateControllerPlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

type CreateApplicationPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationPlannings []*ApplicationPlanning `protobuf:"bytes,1,rep,name=application_plannings,json=applicationPlannings,proto3" json:"application_plannings,omitempty"`
	Granularity          int64                  `protobuf:"varint,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
}

func (x *CreateApplicationPlanningsRequest) Reset() {
	*x = CreateApplicationPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationPlanningsRequest) ProtoMessage() {}

func (x *CreateApplicationPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationPlanningsRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{2}
}

func (x *CreateApplicationPlanningsRequest) GetApplicationPlannings() []*ApplicationPlanning {
	if x != nil {
		return x.ApplicationPlannings
	}
	return nil
}

func (x *CreateApplicationPlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

type CreateNamespacePlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespacePlannings []*NamespacePlanning `protobuf:"bytes,1,rep,name=namespace_plannings,json=namespacePlannings,proto3" json:"namespace_plannings,omitempty"`
	Granularity        int64                `protobuf:"varint,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
}

func (x *CreateNamespacePlanningsRequest) Reset() {
	*x = CreateNamespacePlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespacePlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespacePlanningsRequest) ProtoMessage() {}

func (x *CreateNamespacePlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespacePlanningsRequest.ProtoReflect.Descriptor instead.
func (*CreateNamespacePlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNamespacePlanningsRequest) GetNamespacePlannings() []*NamespacePlanning {
	if x != nil {
		return x.NamespacePlannings
	}
	return nil
}

func (x *CreateNamespacePlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

type CreateNodePlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodePlannings []*NodePlanning `protobuf:"bytes,1,rep,name=node_plannings,json=nodePlannings,proto3" json:"node_plannings,omitempty"`
	Granularity   int64           `protobuf:"varint,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
}

func (x *CreateNodePlanningsRequest) Reset() {
	*x = CreateNodePlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodePlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodePlanningsRequest) ProtoMessage() {}

func (x *CreateNodePlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodePlanningsRequest.ProtoReflect.Descriptor instead.
func (*CreateNodePlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNodePlanningsRequest) GetNodePlannings() []*NodePlanning {
	if x != nil {
		return x.NodePlannings
	}
	return nil
}

func (x *CreateNodePlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

type CreateClusterPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterPlannings []*ClusterPlanning `protobuf:"bytes,1,rep,name=cluster_plannings,json=clusterPlannings,proto3" json:"cluster_plannings,omitempty"`
	Granularity      int64              `protobuf:"varint,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
}

func (x *CreateClusterPlanningsRequest) Reset() {
	*x = CreateClusterPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterPlanningsRequest) ProtoMessage() {}

func (x *CreateClusterPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterPlanningsRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{5}
}

func (x *CreateClusterPlanningsRequest) GetClusterPlannings() []*ClusterPlanning {
	if x != nil {
		return x.ClusterPlannings
	}
	return nil
}

func (x *CreateClusterPlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

// Represents a request for listing plannings of pods
type ListPodPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryCondition *common.QueryCondition  `protobuf:"bytes,1,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	ObjectMeta     []*resources.ObjectMeta `protobuf:"bytes,2,rep,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Granularity    int64                   `protobuf:"varint,3,opt,name=granularity,proto3" json:"granularity,omitempty"`
	PlanningType   PlanningType            `protobuf:"varint,4,opt,name=planning_type,json=planningType,proto3,enum=prophetstor.api.datahub.plannings.PlanningType" json:"planning_type,omitempty"`
}

func (x *ListPodPlanningsRequest) Reset() {
	*x = ListPodPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPodPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPodPlanningsRequest) ProtoMessage() {}

func (x *ListPodPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPodPlanningsRequest.ProtoReflect.Descriptor instead.
func (*ListPodPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{6}
}

func (x *ListPodPlanningsRequest) GetQueryCondition() *common.QueryCondition {
	if x != nil {
		return x.QueryCondition
	}
	return nil
}

func (x *ListPodPlanningsRequest) GetObjectMeta() []*resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ListPodPlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

func (x *ListPodPlanningsRequest) GetPlanningType() PlanningType {
	if x != nil {
		return x.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

// Represents a response for listing pod plannings request
type ListPodPlanningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PodPlannings []*PodPlanning `protobuf:"bytes,2,rep,name=pod_plannings,json=podPlannings,proto3" json:"pod_plannings,omitempty"`
}

func (x *ListPodPlanningsResponse) Reset() {
	*x = ListPodPlanningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPodPlanningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPodPlanningsResponse) ProtoMessage() {}

func (x *ListPodPlanningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPodPlanningsResponse.ProtoReflect.Descriptor instead.
func (*ListPodPlanningsResponse) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{7}
}

func (x *ListPodPlanningsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListPodPlanningsResponse) GetPodPlannings() []*PodPlanning {
	if x != nil {
		return x.PodPlannings
	}
	return nil
}

// Represents a request for listing plannings of controllers
type ListControllerPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryCondition *common.QueryCondition  `protobuf:"bytes,1,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	ObjectMeta     []*resources.ObjectMeta `protobuf:"bytes,2,rep,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Kind           resources.Kind          `protobuf:"varint,3,opt,name=kind,proto3,enum=prophetstor.api.datahub.resources.Kind" json:"kind,omitempty"`
	Granularity    int64                   `protobuf:"varint,4,opt,name=granularity,proto3" json:"granularity,omitempty"`
	PlanningType   PlanningType            `protobuf:"varint,5,opt,name=planning_type,json=planningType,proto3,enum=prophetstor.api.datahub.plannings.PlanningType" json:"planning_type,omitempty"`
}

func (x *ListControllerPlanningsRequest) Reset() {
	*x = ListControllerPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListControllerPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListControllerPlanningsRequest) ProtoMessage() {}

func (x *ListControllerPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListControllerPlanningsRequest.ProtoReflect.Descriptor instead.
func (*ListControllerPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{8}
}

func (x *ListControllerPlanningsRequest) GetQueryCondition() *common.QueryCondition {
	if x != nil {
		return x.QueryCondition
	}
	return nil
}

func (x *ListControllerPlanningsRequest) GetObjectMeta() []*resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ListControllerPlanningsRequest) GetKind() resources.Kind {
	if x != nil {
		return x.Kind
	}
	return resources.Kind_KIND_UNDEFINED
}

func (x *ListControllerPlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

func (x *ListControllerPlanningsRequest) GetPlanningType() PlanningType {
	if x != nil {
		return x.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

// Represents a response for listing controller plannings request
type ListControllerPlanningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *status.Status        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ControllerPlannings []*ControllerPlanning `protobuf:"bytes,2,rep,name=controller_plannings,json=controllerPlannings,proto3" json:"controller_plannings,omitempty"`
}

func (x *ListControllerPlanningsResponse) Reset() {
	*x = ListControllerPlanningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListControllerPlanningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListControllerPlanningsResponse) ProtoMessage() {}

func (x *ListControllerPlanningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListControllerPlanningsResponse.ProtoReflect.Descriptor instead.
func (*ListControllerPlanningsResponse) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{9}
}

func (x *ListControllerPlanningsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListControllerPlanningsResponse) GetControllerPlannings() []*ControllerPlanning {
	if x != nil {
		return x.ControllerPlannings
	}
	return nil
}

type ListApplicationPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryCondition *common.QueryCondition  `protobuf:"bytes,1,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	ObjectMeta     []*resources.ObjectMeta `protobuf:"bytes,2,rep,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Granularity    int64                   `protobuf:"varint,3,opt,name=granularity,proto3" json:"granularity,omitempty"`
	PlanningType   PlanningType            `protobuf:"varint,4,opt,name=planning_type,json=planningType,proto3,enum=prophetstor.api.datahub.plannings.PlanningType" json:"planning_type,omitempty"`
}

func (x *ListApplicationPlanningsRequest) Reset() {
	*x = ListApplicationPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationPlanningsRequest) ProtoMessage() {}

func (x *ListApplicationPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationPlanningsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{10}
}

func (x *ListApplicationPlanningsRequest) GetQueryCondition() *common.QueryCondition {
	if x != nil {
		return x.QueryCondition
	}
	return nil
}

func (x *ListApplicationPlanningsRequest) GetObjectMeta() []*resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ListApplicationPlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

func (x *ListApplicationPlanningsRequest) GetPlanningType() PlanningType {
	if x != nil {
		return x.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

type ListApplicationPlanningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ApplicationPlannings []*ApplicationPlanning `protobuf:"bytes,2,rep,name=application_plannings,json=applicationPlannings,proto3" json:"application_plannings,omitempty"`
}

func (x *ListApplicationPlanningsResponse) Reset() {
	*x = ListApplicationPlanningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationPlanningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationPlanningsResponse) ProtoMessage() {}

func (x *ListApplicationPlanningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationPlanningsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationPlanningsResponse) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{11}
}

func (x *ListApplicationPlanningsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListApplicationPlanningsResponse) GetApplicationPlannings() []*ApplicationPlanning {
	if x != nil {
		return x.ApplicationPlannings
	}
	return nil
}

type ListNamespacePlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryCondition *common.QueryCondition  `protobuf:"bytes,1,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	ObjectMeta     []*resources.ObjectMeta `protobuf:"bytes,2,rep,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Granularity    int64                   `protobuf:"varint,3,opt,name=granularity,proto3" json:"granularity,omitempty"`
	PlanningType   PlanningType            `protobuf:"varint,4,opt,name=planning_type,json=planningType,proto3,enum=prophetstor.api.datahub.plannings.PlanningType" json:"planning_type,omitempty"`
}

func (x *ListNamespacePlanningsRequest) Reset() {
	*x = ListNamespacePlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacePlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacePlanningsRequest) ProtoMessage() {}

func (x *ListNamespacePlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacePlanningsRequest.ProtoReflect.Descriptor instead.
func (*ListNamespacePlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{12}
}

func (x *ListNamespacePlanningsRequest) GetQueryCondition() *common.QueryCondition {
	if x != nil {
		return x.QueryCondition
	}
	return nil
}

func (x *ListNamespacePlanningsRequest) GetObjectMeta() []*resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ListNamespacePlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

func (x *ListNamespacePlanningsRequest) GetPlanningType() PlanningType {
	if x != nil {
		return x.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

type ListNamespacePlanningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *status.Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NamespacePlannings []*NamespacePlanning `protobuf:"bytes,2,rep,name=namespace_plannings,json=namespacePlannings,proto3" json:"namespace_plannings,omitempty"`
}

func (x *ListNamespacePlanningsResponse) Reset() {
	*x = ListNamespacePlanningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacePlanningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacePlanningsResponse) ProtoMessage() {}

func (x *ListNamespacePlanningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacePlanningsResponse.ProtoReflect.Descriptor instead.
func (*ListNamespacePlanningsResponse) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{13}
}

func (x *ListNamespacePlanningsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListNamespacePlanningsResponse) GetNamespacePlannings() []*NamespacePlanning {
	if x != nil {
		return x.NamespacePlannings
	}
	return nil
}

type ListNodePlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryCondition *common.QueryCondition  `protobuf:"bytes,1,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	ObjectMeta     []*resources.ObjectMeta `protobuf:"bytes,2,rep,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Granularity    int64                   `protobuf:"varint,3,opt,name=granularity,proto3" json:"granularity,omitempty"`
	PlanningType   PlanningType            `protobuf:"varint,4,opt,name=planning_type,json=planningType,proto3,enum=prophetstor.api.datahub.plannings.PlanningType" json:"planning_type,omitempty"`
}

func (x *ListNodePlanningsRequest) Reset() {
	*x = ListNodePlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodePlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodePlanningsRequest) ProtoMessage() {}

func (x *ListNodePlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodePlanningsRequest.ProtoReflect.Descriptor instead.
func (*ListNodePlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{14}
}

func (x *ListNodePlanningsRequest) GetQueryCondition() *common.QueryCondition {
	if x != nil {
		return x.QueryCondition
	}
	return nil
}

func (x *ListNodePlanningsRequest) GetObjectMeta() []*resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ListNodePlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

func (x *ListNodePlanningsRequest) GetPlanningType() PlanningType {
	if x != nil {
		return x.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

type ListNodePlanningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *status.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NodePlannings []*NodePlanning `protobuf:"bytes,2,rep,name=node_plannings,json=nodePlannings,proto3" json:"node_plannings,omitempty"`
}

func (x *ListNodePlanningsResponse) Reset() {
	*x = ListNodePlanningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodePlanningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodePlanningsResponse) ProtoMessage() {}

func (x *ListNodePlanningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodePlanningsResponse.ProtoReflect.Descriptor instead.
func (*ListNodePlanningsResponse) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{15}
}

func (x *ListNodePlanningsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListNodePlanningsResponse) GetNodePlannings() []*NodePlanning {
	if x != nil {
		return x.NodePlannings
	}
	return nil
}

type ListClusterPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryCondition *common.QueryCondition  `protobuf:"bytes,1,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	ObjectMeta     []*resources.ObjectMeta `protobuf:"bytes,2,rep,name=object_meta,json=objectMeta,proto3" json:"object_meta,omitempty"`
	Granularity    int64                   `protobuf:"varint,3,opt,name=granularity,proto3" json:"granularity,omitempty"`
	PlanningType   PlanningType            `protobuf:"varint,4,opt,name=planning_type,json=planningType,proto3,enum=prophetstor.api.datahub.plannings.PlanningType" json:"planning_type,omitempty"`
}

func (x *ListClusterPlanningsRequest) Reset() {
	*x = ListClusterPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterPlanningsRequest) ProtoMessage() {}

func (x *ListClusterPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterPlanningsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{16}
}

func (x *ListClusterPlanningsRequest) GetQueryCondition() *common.QueryCondition {
	if x != nil {
		return x.QueryCondition
	}
	return nil
}

func (x *ListClusterPlanningsRequest) GetObjectMeta() []*resources.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ListClusterPlanningsRequest) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

func (x *ListClusterPlanningsRequest) GetPlanningType() PlanningType {
	if x != nil {
		return x.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

type ListClusterPlanningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *status.Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ClusterPlannings []*ClusterPlanning `protobuf:"bytes,2,rep,name=cluster_plannings,json=clusterPlannings,proto3" json:"cluster_plannings,omitempty"`
}

func (x *ListClusterPlanningsResponse) Reset() {
	*x = ListClusterPlanningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterPlanningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterPlanningsResponse) ProtoMessage() {}

func (x *ListClusterPlanningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterPlanningsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterPlanningsResponse) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{17}
}

func (x *ListClusterPlanningsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListClusterPlanningsResponse) GetClusterPlannings() []*ClusterPlanning {
	if x != nil {
		return x.ClusterPlannings
	}
	return nil
}

type CreatePlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaMeta *schemas.SchemaMeta `protobuf:"bytes,1,opt,name=schema_meta,json=schemaMeta,proto3" json:"schema_meta,omitempty"`
	Plannings  []*WritePlanning    `protobuf:"bytes,2,rep,name=plannings,proto3" json:"plannings,omitempty"`
}

func (x *CreatePlanningsRequest) Reset() {
	*x = CreatePlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanningsRequest) ProtoMessage() {}

func (x *CreatePlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanningsRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{18}
}

func (x *CreatePlanningsRequest) GetSchemaMeta() *schemas.SchemaMeta {
	if x != nil {
		return x.SchemaMeta
	}
	return nil
}

func (x *CreatePlanningsRequest) GetPlannings() []*WritePlanning {
	if x != nil {
		return x.Plannings
	}
	return nil
}

type ListPlanningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryCondition *common.QueryCondition `protobuf:"bytes,1,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	SchemaMeta     *schemas.SchemaMeta    `protobuf:"bytes,2,opt,name=schema_meta,json=schemaMeta,proto3" json:"schema_meta,omitempty"`
}

func (x *ListPlanningsRequest) Reset() {
	*x = ListPlanningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanningsRequest) ProtoMessage() {}

func (x *ListPlanningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanningsRequest.ProtoReflect.Descriptor instead.
func (*ListPlanningsRequest) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{19}
}

func (x *ListPlanningsRequest) GetQueryCondition() *common.QueryCondition {
	if x != nil {
		return x.QueryCondition
	}
	return nil
}

func (x *ListPlanningsRequest) GetSchemaMeta() *schemas.SchemaMeta {
	if x != nil {
		return x.SchemaMeta
	}
	return nil
}

type ListPlanningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Plannings *RawPlanning   `protobuf:"bytes,2,opt,name=plannings,proto3" json:"plannings,omitempty"`
}

func (x *ListPlanningsResponse) Reset() {
	*x = ListPlanningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanningsResponse) ProtoMessage() {}

func (x *ListPlanningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanningsResponse.ProtoReflect.Descriptor instead.
func (*ListPlanningsResponse) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP(), []int{20}
}

func (x *ListPlanningsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListPlanningsResponse) GetPlannings() *RawPlanning {
	if x != nil {
		return x.Plannings
	}
	return nil
}

var File_prophetstor_api_datahub_plannings_services_proto protoreflect.FileDescriptor

var file_prophetstor_api_datahub_plannings_services_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x21, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x31, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x6f, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x70, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x22, 0xae, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x22, 0xb2, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x14,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa2, 0x01, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f,
	0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x22, 0xba, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a,
	0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9b,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0c,
	0x70, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xfe, 0x02, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x01,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x68, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x01, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6b, 0x0a,
	0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x01,
	0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x13,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x57, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x27, 0x5a, 0x25, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prophetstor_api_datahub_plannings_services_proto_rawDescOnce sync.Once
	file_prophetstor_api_datahub_plannings_services_proto_rawDescData = file_prophetstor_api_datahub_plannings_services_proto_rawDesc
)

func file_prophetstor_api_datahub_plannings_services_proto_rawDescGZIP() []byte {
	file_prophetstor_api_datahub_plannings_services_proto_rawDescOnce.Do(func() {
		file_prophetstor_api_datahub_plannings_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_prophetstor_api_datahub_plannings_services_proto_rawDescData)
	})
	return file_prophetstor_api_datahub_plannings_services_proto_rawDescData
}

var file_prophetstor_api_datahub_plannings_services_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_prophetstor_api_datahub_plannings_services_proto_goTypes = []interface{}{
	(*CreatePodPlanningsRequest)(nil),         // 0: prophetstor.api.datahub.plannings.CreatePodPlanningsRequest
	(*CreateControllerPlanningsRequest)(nil),  // 1: prophetstor.api.datahub.plannings.CreateControllerPlanningsRequest
	(*CreateApplicationPlanningsRequest)(nil), // 2: prophetstor.api.datahub.plannings.CreateApplicationPlanningsRequest
	(*CreateNamespacePlanningsRequest)(nil),   // 3: prophetstor.api.datahub.plannings.CreateNamespacePlanningsRequest
	(*CreateNodePlanningsRequest)(nil),        // 4: prophetstor.api.datahub.plannings.CreateNodePlanningsRequest
	(*CreateClusterPlanningsRequest)(nil),     // 5: prophetstor.api.datahub.plannings.CreateClusterPlanningsRequest
	(*ListPodPlanningsRequest)(nil),           // 6: prophetstor.api.datahub.plannings.ListPodPlanningsRequest
	(*ListPodPlanningsResponse)(nil),          // 7: prophetstor.api.datahub.plannings.ListPodPlanningsResponse
	(*ListControllerPlanningsRequest)(nil),    // 8: prophetstor.api.datahub.plannings.ListControllerPlanningsRequest
	(*ListControllerPlanningsResponse)(nil),   // 9: prophetstor.api.datahub.plannings.ListControllerPlanningsResponse
	(*ListApplicationPlanningsRequest)(nil),   // 10: prophetstor.api.datahub.plannings.ListApplicationPlanningsRequest
	(*ListApplicationPlanningsResponse)(nil),  // 11: prophetstor.api.datahub.plannings.ListApplicationPlanningsResponse
	(*ListNamespacePlanningsRequest)(nil),     // 12: prophetstor.api.datahub.plannings.ListNamespacePlanningsRequest
	(*ListNamespacePlanningsResponse)(nil),    // 13: prophetstor.api.datahub.plannings.ListNamespacePlanningsResponse
	(*ListNodePlanningsRequest)(nil),          // 14: prophetstor.api.datahub.plannings.ListNodePlanningsRequest
	(*ListNodePlanningsResponse)(nil),         // 15: prophetstor.api.datahub.plannings.ListNodePlanningsResponse
	(*ListClusterPlanningsRequest)(nil),       // 16: prophetstor.api.datahub.plannings.ListClusterPlanningsRequest
	(*ListClusterPlanningsResponse)(nil),      // 17: prophetstor.api.datahub.plannings.ListClusterPlanningsResponse
	(*CreatePlanningsRequest)(nil),            // 18: prophetstor.api.datahub.plannings.CreatePlanningsRequest
	(*ListPlanningsRequest)(nil),              // 19: prophetstor.api.datahub.plannings.ListPlanningsRequest
	(*ListPlanningsResponse)(nil),             // 20: prophetstor.api.datahub.plannings.ListPlanningsResponse
	(*PodPlanning)(nil),                       // 21: prophetstor.api.datahub.plannings.PodPlanning
	(*ControllerPlanning)(nil),                // 22: prophetstor.api.datahub.plannings.ControllerPlanning
	(*ApplicationPlanning)(nil),               // 23: prophetstor.api.datahub.plannings.ApplicationPlanning
	(*NamespacePlanning)(nil),                 // 24: prophetstor.api.datahub.plannings.NamespacePlanning
	(*NodePlanning)(nil),                      // 25: prophetstor.api.datahub.plannings.NodePlanning
	(*ClusterPlanning)(nil),                   // 26: prophetstor.api.datahub.plannings.ClusterPlanning
	(*common.QueryCondition)(nil),             // 27: prophetstor.api.datahub.common.QueryCondition
	(*resources.ObjectMeta)(nil),              // 28: prophetstor.api.datahub.resources.ObjectMeta
	(PlanningType)(0),                         // 29: prophetstor.api.datahub.plannings.PlanningType
	(*status.Status)(nil),                     // 30: google.rpc.Status
	(resources.Kind)(0),                       // 31: prophetstor.api.datahub.resources.Kind
	(*schemas.SchemaMeta)(nil),                // 32: prophetstor.api.datahub.schemas.SchemaMeta
	(*WritePlanning)(nil),                     // 33: prophetstor.api.datahub.plannings.WritePlanning
	(*RawPlanning)(nil),                       // 34: prophetstor.api.datahub.plannings.RawPlanning
}
var file_prophetstor_api_datahub_plannings_services_proto_depIdxs = []int32{
	21, // 0: prophetstor.api.datahub.plannings.CreatePodPlanningsRequest.pod_plannings:type_name -> prophetstor.api.datahub.plannings.PodPlanning
	22, // 1: prophetstor.api.datahub.plannings.CreateControllerPlanningsRequest.controller_plannings:type_name -> prophetstor.api.datahub.plannings.ControllerPlanning
	23, // 2: prophetstor.api.datahub.plannings.CreateApplicationPlanningsRequest.application_plannings:type_name -> prophetstor.api.datahub.plannings.ApplicationPlanning
	24, // 3: prophetstor.api.datahub.plannings.CreateNamespacePlanningsRequest.namespace_plannings:type_name -> prophetstor.api.datahub.plannings.NamespacePlanning
	25, // 4: prophetstor.api.datahub.plannings.CreateNodePlanningsRequest.node_plannings:type_name -> prophetstor.api.datahub.plannings.NodePlanning
	26, // 5: prophetstor.api.datahub.plannings.CreateClusterPlanningsRequest.cluster_plannings:type_name -> prophetstor.api.datahub.plannings.ClusterPlanning
	27, // 6: prophetstor.api.datahub.plannings.ListPodPlanningsRequest.query_condition:type_name -> prophetstor.api.datahub.common.QueryCondition
	28, // 7: prophetstor.api.datahub.plannings.ListPodPlanningsRequest.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	29, // 8: prophetstor.api.datahub.plannings.ListPodPlanningsRequest.planning_type:type_name -> prophetstor.api.datahub.plannings.PlanningType
	30, // 9: prophetstor.api.datahub.plannings.ListPodPlanningsResponse.status:type_name -> google.rpc.Status
	21, // 10: prophetstor.api.datahub.plannings.ListPodPlanningsResponse.pod_plannings:type_name -> prophetstor.api.datahub.plannings.PodPlanning
	27, // 11: prophetstor.api.datahub.plannings.ListControllerPlanningsRequest.query_condition:type_name -> prophetstor.api.datahub.common.QueryCondition
	28, // 12: prophetstor.api.datahub.plannings.ListControllerPlanningsRequest.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	31, // 13: prophetstor.api.datahub.plannings.ListControllerPlanningsRequest.kind:type_name -> prophetstor.api.datahub.resources.Kind
	29, // 14: prophetstor.api.datahub.plannings.ListControllerPlanningsRequest.planning_type:type_name -> prophetstor.api.datahub.plannings.PlanningType
	30, // 15: prophetstor.api.datahub.plannings.ListControllerPlanningsResponse.status:type_name -> google.rpc.Status
	22, // 16: prophetstor.api.datahub.plannings.ListControllerPlanningsResponse.controller_plannings:type_name -> prophetstor.api.datahub.plannings.ControllerPlanning
	27, // 17: prophetstor.api.datahub.plannings.ListApplicationPlanningsRequest.query_condition:type_name -> prophetstor.api.datahub.common.QueryCondition
	28, // 18: prophetstor.api.datahub.plannings.ListApplicationPlanningsRequest.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	29, // 19: prophetstor.api.datahub.plannings.ListApplicationPlanningsRequest.planning_type:type_name -> prophetstor.api.datahub.plannings.PlanningType
	30, // 20: prophetstor.api.datahub.plannings.ListApplicationPlanningsResponse.status:type_name -> google.rpc.Status
	23, // 21: prophetstor.api.datahub.plannings.ListApplicationPlanningsResponse.application_plannings:type_name -> prophetstor.api.datahub.plannings.ApplicationPlanning
	27, // 22: prophetstor.api.datahub.plannings.ListNamespacePlanningsRequest.query_condition:type_name -> prophetstor.api.datahub.common.QueryCondition
	28, // 23: prophetstor.api.datahub.plannings.ListNamespacePlanningsRequest.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	29, // 24: prophetstor.api.datahub.plannings.ListNamespacePlanningsRequest.planning_type:type_name -> prophetstor.api.datahub.plannings.PlanningType
	30, // 25: prophetstor.api.datahub.plannings.ListNamespacePlanningsResponse.status:type_name -> google.rpc.Status
	24, // 26: prophetstor.api.datahub.plannings.ListNamespacePlanningsResponse.namespace_plannings:type_name -> prophetstor.api.datahub.plannings.NamespacePlanning
	27, // 27: prophetstor.api.datahub.plannings.ListNodePlanningsRequest.query_condition:type_name -> prophetstor.api.datahub.common.QueryCondition
	28, // 28: prophetstor.api.datahub.plannings.ListNodePlanningsRequest.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	29, // 29: prophetstor.api.datahub.plannings.ListNodePlanningsRequest.planning_type:type_name -> prophetstor.api.datahub.plannings.PlanningType
	30, // 30: prophetstor.api.datahub.plannings.ListNodePlanningsResponse.status:type_name -> google.rpc.Status
	25, // 31: prophetstor.api.datahub.plannings.ListNodePlanningsResponse.node_plannings:type_name -> prophetstor.api.datahub.plannings.NodePlanning
	27, // 32: prophetstor.api.datahub.plannings.ListClusterPlanningsRequest.query_condition:type_name -> prophetstor.api.datahub.common.QueryCondition
	28, // 33: prophetstor.api.datahub.plannings.ListClusterPlanningsRequest.object_meta:type_name -> prophetstor.api.datahub.resources.ObjectMeta
	29, // 34: prophetstor.api.datahub.plannings.ListClusterPlanningsRequest.planning_type:type_name -> prophetstor.api.datahub.plannings.PlanningType
	30, // 35: prophetstor.api.datahub.plannings.ListClusterPlanningsResponse.status:type_name -> google.rpc.Status
	26, // 36: prophetstor.api.datahub.plannings.ListClusterPlanningsResponse.cluster_plannings:type_name -> prophetstor.api.datahub.plannings.ClusterPlanning
	32, // 37: prophetstor.api.datahub.plannings.CreatePlanningsRequest.schema_meta:type_name -> prophetstor.api.datahub.schemas.SchemaMeta
	33, // 38: prophetstor.api.datahub.plannings.CreatePlanningsRequest.plannings:type_name -> prophetstor.api.datahub.plannings.WritePlanning
	27, // 39: prophetstor.api.datahub.plannings.ListPlanningsRequest.query_condition:type_name -> prophetstor.api.datahub.common.QueryCondition
	32, // 40: prophetstor.api.datahub.plannings.ListPlanningsRequest.schema_meta:type_name -> prophetstor.api.datahub.schemas.SchemaMeta
	30, // 41: prophetstor.api.datahub.plannings.ListPlanningsResponse.status:type_name -> google.rpc.Status
	34, // 42: prophetstor.api.datahub.plannings.ListPlanningsResponse.plannings:type_name -> prophetstor.api.datahub.plannings.RawPlanning
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_prophetstor_api_datahub_plannings_services_proto_init() }
func file_prophetstor_api_datahub_plannings_services_proto_init() {
	if File_prophetstor_api_datahub_plannings_services_proto != nil {
		return
	}
	file_prophetstor_api_datahub_plannings_plannings_proto_init()
	file_prophetstor_api_datahub_plannings_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePodPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateControllerPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespacePlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodePlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPodPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPodPlanningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListControllerPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListControllerPlanningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationPlanningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacePlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacePlanningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodePlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodePlanningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterPlanningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prophetstor_api_datahub_plannings_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prophetstor_api_datahub_plannings_services_proto_goTypes,
		DependencyIndexes: file_prophetstor_api_datahub_plannings_services_proto_depIdxs,
		MessageInfos:      file_prophetstor_api_datahub_plannings_services_proto_msgTypes,
	}.Build()
	File_prophetstor_api_datahub_plannings_services_proto = out.File
	file_prophetstor_api_datahub_plannings_services_proto_rawDesc = nil
	file_prophetstor_api_datahub_plannings_services_proto_goTypes = nil
	file_prophetstor_api_datahub_plannings_services_proto_depIdxs = nil
}
