// This file has messages related to plannings of containers, pods, and controllers

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: prophetstor/api/datahub/plannings/types.proto

package plannings

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "prophetstor.com/api/datahub/common"
	schemas "prophetstor.com/api/datahub/schemas"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlanningType int32

const (
	PlanningType_PT_UNDEFINED      PlanningType = 0
	PlanningType_PT_RECOMMENDATION PlanningType = 1
	PlanningType_PT_PLANNING       PlanningType = 2
)

// Enum value maps for PlanningType.
var (
	PlanningType_name = map[int32]string{
		0: "PT_UNDEFINED",
		1: "PT_RECOMMENDATION",
		2: "PT_PLANNING",
	}
	PlanningType_value = map[string]int32{
		"PT_UNDEFINED":      0,
		"PT_RECOMMENDATION": 1,
		"PT_PLANNING":       2,
	}
)

func (x PlanningType) Enum() *PlanningType {
	p := new(PlanningType)
	*p = x
	return p
}

func (x PlanningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanningType) Descriptor() protoreflect.EnumDescriptor {
	return file_prophetstor_api_datahub_plannings_types_proto_enumTypes[0].Descriptor()
}

func (PlanningType) Type() protoreflect.EnumType {
	return &file_prophetstor_api_datahub_plannings_types_proto_enumTypes[0]
}

func (x PlanningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanningType.Descriptor instead.
func (PlanningType) EnumDescriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_types_proto_rawDescGZIP(), []int{0}
}

type ControllerPlanningType int32

const (
	ControllerPlanningType_CPT_UNDEFINED ControllerPlanningType = 0
	ControllerPlanningType_CPT_PRIMITIVE ControllerPlanningType = 1
	ControllerPlanningType_CPT_K8S       ControllerPlanningType = 2
)

// Enum value maps for ControllerPlanningType.
var (
	ControllerPlanningType_name = map[int32]string{
		0: "CPT_UNDEFINED",
		1: "CPT_PRIMITIVE",
		2: "CPT_K8S",
	}
	ControllerPlanningType_value = map[string]int32{
		"CPT_UNDEFINED": 0,
		"CPT_PRIMITIVE": 1,
		"CPT_K8S":       2,
	}
)

func (x ControllerPlanningType) Enum() *ControllerPlanningType {
	p := new(ControllerPlanningType)
	*p = x
	return p
}

func (x ControllerPlanningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControllerPlanningType) Descriptor() protoreflect.EnumDescriptor {
	return file_prophetstor_api_datahub_plannings_types_proto_enumTypes[1].Descriptor()
}

func (ControllerPlanningType) Type() protoreflect.EnumType {
	return &file_prophetstor_api_datahub_plannings_types_proto_enumTypes[1]
}

func (x ControllerPlanningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControllerPlanningType.Descriptor instead.
func (ControllerPlanningType) EnumDescriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_types_proto_rawDescGZIP(), []int{1}
}

type ControllerPlanningSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentReplicas    int32                `protobuf:"varint,1,opt,name=current_replicas,json=currentReplicas,proto3" json:"current_replicas,omitempty"`
	DesiredReplicas    int32                `protobuf:"varint,2,opt,name=desired_replicas,json=desiredReplicas,proto3" json:"desired_replicas,omitempty"`
	Time               *timestamp.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	CreateTime         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CurrentCpuRequests float64              `protobuf:"fixed64,5,opt,name=current_cpu_requests,json=currentCpuRequests,proto3" json:"current_cpu_requests,omitempty"`
	CurrentMemRequests float64              `protobuf:"fixed64,6,opt,name=current_mem_requests,json=currentMemRequests,proto3" json:"current_mem_requests,omitempty"`
	CurrentCpuLimits   float64              `protobuf:"fixed64,7,opt,name=current_cpu_limits,json=currentCpuLimits,proto3" json:"current_cpu_limits,omitempty"`
	CurrentMemLimits   float64              `protobuf:"fixed64,8,opt,name=current_mem_limits,json=currentMemLimits,proto3" json:"current_mem_limits,omitempty"`
	DesiredCpuLimits   float64              `protobuf:"fixed64,9,opt,name=desired_cpu_limits,json=desiredCpuLimits,proto3" json:"desired_cpu_limits,omitempty"`
	DesiredMemLimits   float64              `protobuf:"fixed64,10,opt,name=desired_mem_limits,json=desiredMemLimits,proto3" json:"desired_mem_limits,omitempty"`
	TotalCost          float64              `protobuf:"fixed64,11,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (x *ControllerPlanningSpec) Reset() {
	*x = ControllerPlanningSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerPlanningSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerPlanningSpec) ProtoMessage() {}

func (x *ControllerPlanningSpec) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerPlanningSpec.ProtoReflect.Descriptor instead.
func (*ControllerPlanningSpec) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_types_proto_rawDescGZIP(), []int{0}
}

func (x *ControllerPlanningSpec) GetCurrentReplicas() int32 {
	if x != nil {
		return x.CurrentReplicas
	}
	return 0
}

func (x *ControllerPlanningSpec) GetDesiredReplicas() int32 {
	if x != nil {
		return x.DesiredReplicas
	}
	return 0
}

func (x *ControllerPlanningSpec) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ControllerPlanningSpec) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ControllerPlanningSpec) GetCurrentCpuRequests() float64 {
	if x != nil {
		return x.CurrentCpuRequests
	}
	return 0
}

func (x *ControllerPlanningSpec) GetCurrentMemRequests() float64 {
	if x != nil {
		return x.CurrentMemRequests
	}
	return 0
}

func (x *ControllerPlanningSpec) GetCurrentCpuLimits() float64 {
	if x != nil {
		return x.CurrentCpuLimits
	}
	return 0
}

func (x *ControllerPlanningSpec) GetCurrentMemLimits() float64 {
	if x != nil {
		return x.CurrentMemLimits
	}
	return 0
}

func (x *ControllerPlanningSpec) GetDesiredCpuLimits() float64 {
	if x != nil {
		return x.DesiredCpuLimits
	}
	return 0
}

func (x *ControllerPlanningSpec) GetDesiredMemLimits() float64 {
	if x != nil {
		return x.DesiredMemLimits
	}
	return 0
}

func (x *ControllerPlanningSpec) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type ControllerPlanningSpecK8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentReplicas int32                `protobuf:"varint,1,opt,name=current_replicas,json=currentReplicas,proto3" json:"current_replicas,omitempty"`
	DesiredReplicas int32                `protobuf:"varint,2,opt,name=desired_replicas,json=desiredReplicas,proto3" json:"desired_replicas,omitempty"`
	Time            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	CreateTime      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *ControllerPlanningSpecK8S) Reset() {
	*x = ControllerPlanningSpecK8S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerPlanningSpecK8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerPlanningSpecK8S) ProtoMessage() {}

func (x *ControllerPlanningSpecK8S) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerPlanningSpecK8S.ProtoReflect.Descriptor instead.
func (*ControllerPlanningSpecK8S) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_types_proto_rawDescGZIP(), []int{1}
}

func (x *ControllerPlanningSpecK8S) GetCurrentReplicas() int32 {
	if x != nil {
		return x.CurrentReplicas
	}
	return 0
}

func (x *ControllerPlanningSpecK8S) GetDesiredReplicas() int32 {
	if x != nil {
		return x.DesiredReplicas
	}
	return 0
}

func (x *ControllerPlanningSpecK8S) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ControllerPlanningSpecK8S) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type RawPlanning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaMeta   *schemas.SchemaMeta `protobuf:"bytes,1,opt,name=schema_meta,json=schemaMeta,proto3" json:"schema_meta,omitempty"`
	PlanningData []*PlanningData     `protobuf:"bytes,2,rep,name=planning_data,json=planningData,proto3" json:"planning_data,omitempty"`
}

func (x *RawPlanning) Reset() {
	*x = RawPlanning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawPlanning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawPlanning) ProtoMessage() {}

func (x *RawPlanning) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawPlanning.ProtoReflect.Descriptor instead.
func (*RawPlanning) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_types_proto_rawDescGZIP(), []int{2}
}

func (x *RawPlanning) GetSchemaMeta() *schemas.SchemaMeta {
	if x != nil {
		return x.SchemaMeta
	}
	return nil
}

func (x *RawPlanning) GetPlanningData() []*PlanningData {
	if x != nil {
		return x.PlanningData
	}
	return nil
}

type PlanningData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricType    common.MetricType    `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=prophetstor.api.datahub.common.MetricType" json:"metric_type,omitempty"`
	ResourceQuota common.ResourceQuota `protobuf:"varint,2,opt,name=resource_quota,json=resourceQuota,proto3,enum=prophetstor.api.datahub.common.ResourceQuota" json:"resource_quota,omitempty"`
	ReadData      *common.ReadData     `protobuf:"bytes,3,opt,name=read_data,json=readData,proto3" json:"read_data,omitempty"`
}

func (x *PlanningData) Reset() {
	*x = PlanningData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prophetstor_api_datahub_plannings_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanningData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanningData) ProtoMessage() {}

func (x *PlanningData) ProtoReflect() protoreflect.Message {
	mi := &file_prophetstor_api_datahub_plannings_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanningData.ProtoReflect.Descriptor instead.
func (*PlanningData) Descriptor() ([]byte, []int) {
	return file_prophetstor_api_datahub_plannings_types_proto_rawDescGZIP(), []int{3}
}

func (x *PlanningData) GetMetricType() common.MetricType {
	if x != nil {
		return x.MetricType
	}
	return common.MetricType_METRICS_TYPE_UNDEFINED
}

func (x *PlanningData) GetResourceQuota() common.ResourceQuota {
	if x != nil {
		return x.ResourceQuota
	}
	return common.ResourceQuota_RESOURCE_QUOTA_UNDEFINED
}

func (x *PlanningData) GetReadData() *common.ReadData {
	if x != nil {
		return x.ReadData
	}
	return nil
}

var File_prophetstor_api_datahub_plannings_types_proto protoreflect.FileDescriptor

var file_prophetstor_api_datahub_plannings_types_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x72, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x68, 0x75, 0x62, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x04, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x70, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x70, 0x75, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x22, 0xde, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x4b, 0x38, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x54, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x68, 0x75,
	0x62, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x2a, 0x48, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x54,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x50, 0x54, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x50, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x50, 0x54, 0x5f, 0x4b, 0x38, 0x53, 0x10, 0x02, 0x42, 0x27, 0x5a, 0x25, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prophetstor_api_datahub_plannings_types_proto_rawDescOnce sync.Once
	file_prophetstor_api_datahub_plannings_types_proto_rawDescData = file_prophetstor_api_datahub_plannings_types_proto_rawDesc
)

func file_prophetstor_api_datahub_plannings_types_proto_rawDescGZIP() []byte {
	file_prophetstor_api_datahub_plannings_types_proto_rawDescOnce.Do(func() {
		file_prophetstor_api_datahub_plannings_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_prophetstor_api_datahub_plannings_types_proto_rawDescData)
	})
	return file_prophetstor_api_datahub_plannings_types_proto_rawDescData
}

var file_prophetstor_api_datahub_plannings_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_prophetstor_api_datahub_plannings_types_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_prophetstor_api_datahub_plannings_types_proto_goTypes = []interface{}{
	(PlanningType)(0),                 // 0: prophetstor.api.datahub.plannings.PlanningType
	(ControllerPlanningType)(0),       // 1: prophetstor.api.datahub.plannings.ControllerPlanningType
	(*ControllerPlanningSpec)(nil),    // 2: prophetstor.api.datahub.plannings.ControllerPlanningSpec
	(*ControllerPlanningSpecK8S)(nil), // 3: prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s
	(*RawPlanning)(nil),               // 4: prophetstor.api.datahub.plannings.RawPlanning
	(*PlanningData)(nil),              // 5: prophetstor.api.datahub.plannings.PlanningData
	(*timestamp.Timestamp)(nil),       // 6: google.protobuf.Timestamp
	(*schemas.SchemaMeta)(nil),        // 7: prophetstor.api.datahub.schemas.SchemaMeta
	(common.MetricType)(0),            // 8: prophetstor.api.datahub.common.MetricType
	(common.ResourceQuota)(0),         // 9: prophetstor.api.datahub.common.ResourceQuota
	(*common.ReadData)(nil),           // 10: prophetstor.api.datahub.common.ReadData
}
var file_prophetstor_api_datahub_plannings_types_proto_depIdxs = []int32{
	6,  // 0: prophetstor.api.datahub.plannings.ControllerPlanningSpec.time:type_name -> google.protobuf.Timestamp
	6,  // 1: prophetstor.api.datahub.plannings.ControllerPlanningSpec.create_time:type_name -> google.protobuf.Timestamp
	6,  // 2: prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.time:type_name -> google.protobuf.Timestamp
	6,  // 3: prophetstor.api.datahub.plannings.ControllerPlanningSpecK8s.create_time:type_name -> google.protobuf.Timestamp
	7,  // 4: prophetstor.api.datahub.plannings.RawPlanning.schema_meta:type_name -> prophetstor.api.datahub.schemas.SchemaMeta
	5,  // 5: prophetstor.api.datahub.plannings.RawPlanning.planning_data:type_name -> prophetstor.api.datahub.plannings.PlanningData
	8,  // 6: prophetstor.api.datahub.plannings.PlanningData.metric_type:type_name -> prophetstor.api.datahub.common.MetricType
	9,  // 7: prophetstor.api.datahub.plannings.PlanningData.resource_quota:type_name -> prophetstor.api.datahub.common.ResourceQuota
	10, // 8: prophetstor.api.datahub.plannings.PlanningData.read_data:type_name -> prophetstor.api.datahub.common.ReadData
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_prophetstor_api_datahub_plannings_types_proto_init() }
func file_prophetstor_api_datahub_plannings_types_proto_init() {
	if File_prophetstor_api_datahub_plannings_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prophetstor_api_datahub_plannings_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerPlanningSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerPlanningSpecK8S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawPlanning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prophetstor_api_datahub_plannings_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanningData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prophetstor_api_datahub_plannings_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prophetstor_api_datahub_plannings_types_proto_goTypes,
		DependencyIndexes: file_prophetstor_api_datahub_plannings_types_proto_depIdxs,
		EnumInfos:         file_prophetstor_api_datahub_plannings_types_proto_enumTypes,
		MessageInfos:      file_prophetstor_api_datahub_plannings_types_proto_msgTypes,
	}.Build()
	File_prophetstor_api_datahub_plannings_types_proto = out.File
	file_prophetstor_api_datahub_plannings_types_proto_rawDesc = nil
	file_prophetstor_api_datahub_plannings_types_proto_goTypes = nil
	file_prophetstor_api_datahub_plannings_types_proto_depIdxs = nil
}
