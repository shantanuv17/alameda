// This file has messages related general definitions

syntax = "proto3";

package prophetstor.api.datahub.common;

option go_package = "prophetstor.com/api/datahub/common";

/**
 * Represents the amount resources that a Kubernete object is allowed to use.
 */
enum ResourceBoundary {
    RESOURCE_BOUNDARY_UNDEFINED = 0;
    RESOURCE_RAW                = 1;
    RESOURCE_UPPER_BOUND        = 2;
    RESOURCE_LOWER_BOUND        = 3;
}

/**
 * Represents the constraints that limit aggretage resource consumption per Kubernete object.
 */
enum ResourceQuota {
    RESOURCE_QUOTA_UNDEFINED = 0;
    RESOURCE_LIMIT           = 1;
    RESOURCE_REQUEST         = 2;
    RESOURCE_INITIAL_LIMIT   = 3;
    RESOURCE_INITIAL_REQUEST = 4;
}

/**
 * Represents a specified database whcih is to query.
 */
enum DatabaseType {
    UNDEFINED  = 0;
    INFLUXDB   = 1;
    PROMETHEUS = 2;
}

/**
 * Represents the datahub specified data type.
 */
enum DataType {
    DATATYPE_UNDEFINED = 0;
    DATATYPE_BOOL      = 1;
    DATATYPE_INT       = 2;
    DATATYPE_INT8      = 3;
    DATATYPE_INT16     = 4;
    DATATYPE_INT32     = 5;
    DATATYPE_INT64     = 6;
    DATATYPE_UINT      = 7;
    DATATYPE_UINT8     = 8;
    DATATYPE_UINT16    = 9;
    DATATYPE_UINT32    = 10;
    DATATYPE_UTIN64    = 11;
    DATATYPE_FLOAT32   = 12;
    DATATYPE_FLOAT64   = 13;
    DATATYPE_STRING    = 14;
}

/**
 * Represents the field type of a record which queried from datahub.
 */
enum ColumnType {
    COLUMNTYPE_UDEFINED = 0;
    COLUMNTYPE_TAG      = 1;
    COLUMNTYPE_FIELD    = 2;
}

/**
 * Represents the functional query type of datahub.
 */
enum FunctionType {
    FUNCTIONTYPE_UNDEFINED  = 0;

    // Aggregation function
    FUNCTIONTYPE_COUNT      = 1; // Returns the number of non-null field values
    FUNCTIONTYPE_DISTINCT   = 2; // Returns the list of unique field values
    FUNCTIONTYPE_INTEGRAL   = 3; // Returns the area under the curve for subsequent field values
    FUNCTIONTYPE_MEAN       = 4; // Returns the arithmetic mean (average) of field values.
    FUNCTIONTYPE_MEDIAN     = 5; // Returns the middle value from a sorted list of field values.
    FUNCTIONTYPE_MODE       = 6; // Returns the most frequent value in a list of field values
    FUNCTIONTYPE_SPREAD     = 7; // Returns the difference between the minimum and maximum field values
    FUNCTIONTYPE_STDDEV     = 8; // Returns the standard deviation of field values.
    FUNCTIONTYPE_SUM        = 9; // Returns the sum of field values.

    // Selector function
    FUNCTIONTYPE_BOTTOM     = 10; // Returns the smallest N field values.
    FUNCTIONTYPE_FIRST      = 11; // Returns the field value with the oldest timestamp.
    FUNCTIONTYPE_LAST       = 12; // Returns the field value with the most recent timestamp.
    FUNCTIONTYPE_MAX        = 13; // Returns the greatest field value.
    FUNCTIONTYPE_MIN        = 14; // Returns the lowest field value.
    FUNCTIONTYPE_PERCENTILE = 15; // Returns the Nth percentile field value
    FUNCTIONTYPE_SAMPLE     = 16; // Returns a random sample of N field values. SAMPLE() uses reservoir sampling to generate the random points
    FUNCTIONTYPE_TOP        = 17; // Returns the greatest N field values.

    // Transformation function
    FUNCTIONTYPE_DERIVATIVE = 18; // Returns the rate of change between subsequent field values
}
